<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfragisticsWP7.Controls.Charts.XamDataChart.v12.1</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Controls.Charts.AutomationPeers.LegendAutomationPeer">
            <summary>
            The automation peer for the legend
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AutomationPeers.LegendAutomationPeer.#ctor(Infragistics.Controls.Charts.Legend)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Charts.AutomationPeers.LegendAutomationPeer"/> class.
            </summary>
            <param name="legend">The legend.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AutomationPeers.LegendAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Overrides the framework invocation of what generic type of control this is.
            </summary>
            <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationControlType"/> that describes this control.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AutomationPeers.LegendAutomationPeer.GetClassNameCore">
            <summary>
            Overrides the framework invocation requesting a string that describes this control.
            </summary>
            <returns>A string describing the name of this control.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AutomationPeers.LegendAutomationPeer.GetNameCore">
            <summary>
            Returns the text label of the <see cref="T:System.Windows.FrameworkElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName"/>.
            </summary>
            <returns>
            The text label of the element that is associated with this automation peer.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AutomationPeers.LegendAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Overrides the framework invocation of when a request is made for what types of user interaction are avalible. 
            </summary>
            <param name="patternInterface">This is the type of user interaction requested.</param>
            <returns>An object that can handle this pattern or null if none available.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.AutomationPeers.LegendAutomationPeer.Legend">
            <summary>
            Gets or sets the legend.
            </summary>
            <value>The legend.</value>
        </member>
        <member name="T:Infragistics.Controls.Charts.AutomationPeers.XamDataChartAutomationPeer">
            <summary>
            The automation peer for the the data chart
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AutomationPeers.XamDataChartAutomationPeer.#ctor(Infragistics.Controls.Charts.XamDataChart)">
            <summary>
            Instantiates the automation peer.
            </summary>
            <param name="chart">chart control reference</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AutomationPeers.XamDataChartAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Overrides the framework invocation of what generic type of control this is.
            </summary>
            <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationControlType"/> that describes this control.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AutomationPeers.XamDataChartAutomationPeer.GetClassNameCore">
            <summary>
            Overrides the framework invocation requesting a string that describes this control.
            </summary>
            <returns>A string describing the name of this control.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AutomationPeers.XamDataChartAutomationPeer.GetNameCore">
            <summary>
            Returns the chart control's name.
            </summary>
            <returns>Chart's name</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AutomationPeers.XamDataChartAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Overrides the framework invocation of when a request is made for what types of user interaction are avalible. 
            </summary>
            <param name="patternInterface">This is the type of user interaction requested.</param>
            <returns>An object that can handle this pattern or null if none available.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.AxisLabelPanelBaseView">
            <summary>
            Defines the view class of an axis label panel.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBaseView.#ctor(Infragistics.Controls.Charts.AxisLabelPanelBase)">
            <summary>
            Initializes a new instance of the view.
            </summary>
            <param name="model">Instance of an axis label panel</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelPanelBaseView.Model">
            <summary>
            Gets or sets the axis label pane object for this view.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.AngleAxisLabelPanel">
            <summary>
            Represents the panel control, containing angle axis labels.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.AxisLabelPanelBase">
            <summary>
            Base class for creating an axis label panel.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.DetectCollisions(System.Collections.Generic.List{System.Windows.Rect})">
            <summary>
            Determines if there are label collisions.
            </summary>
            <param name="rectangles">List of label bounds</param>
            <returns>True if collisions were detected; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.StaggerLabels(System.Double,System.Collections.Generic.List{System.Windows.Rect}@)">
            <summary>
            Stagger the labels.
            </summary>
            <param name="largestHeight">Largest label height</param>
            <param name="rectangles">List of label bounds</param>
            <returns>Number of staggered rows</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.CreateBoundsRectangles">
            <summary>
            Creates the label placeholder bounds.
            </summary>
            <returns>List of label rectangles</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.BindExtent">
            <summary>
            Binds label panel's extent to axis extent.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.ApplyPanelRotation(System.Windows.Size)">
            <summary>
            Sets up a rotate transform on the label panel.
            </summary>
            <param name="finalSize">Final size of the panel</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.GetEffectiveAngle">
            <summary>
            Returns the rotation angle of the labels.
            </summary>
            <returns>Rotation angle of the labels</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.ShouldDisplay(System.Int32,System.Windows.Rect)">
            <summary>
            Determines if the label should be displayed.
            </summary>
            <param name="index">Label index</param>
            <param name="bounds">Label bounds</param>
            <returns>True if the label should be displayed; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.GetDesiredWidth(System.Object)">
            <summary>
            Gets the desired width of the element.
            </summary>
            <param name="element">target element</param>
            <returns>Desired width of the element</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.GetDesiredHeight(System.Object)">
            <summary>
            Gets the desired height of the element.
            </summary>
            <param name="element">target element</param>
            <returns>Desired height of the element</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.DetermineLabelBounds">
            <summary>
            Calculates label bounds.
            </summary>
            <returns>List of calculated bounds</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.SetLabelRotationTransform(System.Windows.FrameworkElement,System.Double)">
            <summary>
            Sets up the transform for the label.
            </summary>
            <param name="label">Target label</param>
            <param name="angle">Rotation angle</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelPanelBase.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelPanelBase.ExtentProperty">
            <summary>
            Identifies the Extent dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelPanelBase.TextBlocks">
            <summary>
            Gets or sets the list of label elements.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelPanelBase.LabelBounds">
            <summary>
            Gets or sets the list of label placeholder bounds.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelPanelBase.FoundCollisions">
            <summary>
            Gets or sets whether label collisions were detected.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelPanelBase.UseRotation">
            <summary>
            Gets or sets whether label rotation should be used.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelPanelBase.UseStaggering">
            <summary>
            Gets or sets whether label staggering should be used.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelPanelBase.UseWrapping">
            <summary>
            Gets or sets whether label text wrapping should be used.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelPanelBase.LongestTextBlock">
            <summary>
            Gets or sets the longest label control.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelPanelBase.Extent">
            <summary>
            Gets or sets the Extent property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AngleAxisLabelPanel.#ctor">
            <summary>
            Initializes the AngleAxis label panel.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AngleAxisLabelPanel.ShouldDisplay(System.Int32,System.Windows.Rect)">
            <summary>
            Determines if the label should be displayed.
            </summary>
            <param name="index">label index</param>
            <param name="bounds">label bounds</param>
            <returns>True if the label should be displayed; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AngleAxisLabelPanel.CreateBoundsRectangles">
            <summary>
            Creates a list of label bounds.
            </summary>
            <returns>List of label rectangles</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.AngleAxisLabelPanel.ClipLabelsToBounds">
            <summary>
            Gets or sets whether labels should be clipped to bounds.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AngleAxisLabelPanel.GetPoint">
            <summary>
            Gets or sets the function used to calculate point locations.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Axis">
            <summary>
            Represents the base class from which all axis types are derived.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.#ctor">
            <summary>
            Constucts a new Axis instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.SeriesViewer_WindowRectChanged">
            <summary>
            Listener for the onwer chart area's window rect changed
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.StrokeProperty">
            <summary>
            Identifies the Stroke dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.StrokeThicknessProperty">
            <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.StrokeDashArrayProperty">
            <summary>
            Identifies the StrokeDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.StripProperty">
            <summary>
            Identifies the Strip dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.MajorStrokeProperty">
            <summary>
            Identifies the MajorStroke dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.MajorStrokeThicknessProperty">
            <summary>
            Identifies the MajorStrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.MajorStrokeDashArrayProperty">
            <summary>
            Identifies the MajorStrokeDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.MinorStrokeProperty">
            <summary>
            Identifies the MinorStroke dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.MinorStrokeThicknessProperty">
            <summary>
            Identifies the MinorStrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.MinorStrokeDashArrayProperty">
            <summary>
            Identifies the MinorStrokeDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.IsDisabledProperty">
            <summary>
            Identifies the IsDisabled dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.IsInvertedProperty">
            <summary>
            Identifies the IsInverted dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.LabelSettingsProperty">
            <summary>
            Identifies the LabelSettings dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.LabelPanelStyleProperty">
            <summary>
            Identifies the LabelPanelStyle Dependency Property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.CrossingAxisProperty">
            <summary>
            Identifies the CrossingAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.CrossingValueProperty">
            <summary>
            Identifies the CrossingValue dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.RaiseRangeChanged(Infragistics.Controls.Charts.AxisRangeChangedEventArgs)">
            <summary>
            Raises the RangeChanged event.
            </summary>
            <param name="ea">The AxisRangeChangedEventArgs for the event.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.ViewportChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the viewport changing.
            </summary>
            <param name="oldRect">The old viewport rectangle.</param>
            <param name="newRect">The new viewport rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.WindowRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the chart's window changing.
            </summary>
            <param name="oldRect">The old window rectangle.</param>
            <param name="newRect">The new window rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the axis. Gives the axis a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.HorizontalStrip(System.Windows.Media.GeometryCollection,System.Double,System.Double,System.Windows.Rect)">
            <summary>
            Generates the visual for a horizontal strip.
            </summary>
            <param name="geometry">The geometry into which to generate the visual.</param>
            <param name="y0">The starting y value for the strip.</param>
            <param name="y1">The ending y value for the strip.</param>
            <param name="viewportRect">The viewport of the axis.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.HorizontalLine(System.Windows.Media.GeometryCollection,System.Double,System.Windows.Rect)">
            <summary>
            Generates the visual for a horizontal line.
            </summary>
            <param name="geometry">The geometry into which to generate the visual.</param>
            <param name="y">The y value for the horizontal line.</param>
            <param name="viewportRect">The viewport of the axis.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.VerticalStrip(System.Windows.Media.GeometryCollection,System.Double,System.Double,System.Windows.Rect)">
            <summary>
            Generates the visual for a vertical strip.
            </summary>
            <param name="geometry">The geometry into which to generated the visual.</param>
            <param name="x0">The starting x value for the strip.</param>
            <param name="x1">The ending x value for the strip.</param>
            <param name="viewportRect">The viewport of the axis.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.VerticalLine(System.Windows.Media.GeometryCollection,System.Double,System.Windows.Rect)">
            <summary>
            Generates the visual for a vertical line.
            </summary>
            <param name="geometry">The geometry into which to generate the visual.</param>
            <param name="x">The x value for the line.</param>
            <param name="viewportRect">The viewport of the axis.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.ClearMarks(System.Windows.Media.GeometryCollection)">
            <summary>
            Clears the marks from a geometry.
            </summary>
            <param name="geometry">The geometry to clear the marks from.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.ClearAllMarks">
            <summary>
            Clears all marks from the axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.RenderAxis">
            <summary>
            Renders the axis with no animation.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.UpdateRange">
            <summary>
            Updates the axis range.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.UpdateRange(System.Boolean)">
            <summary>
            Updates the axis range.
            </summary>
            <param name="immediate">True if the change should be made immediately, or False if it can be deferred to the next refresh.</param>
            <returns>True if the axis range has changed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.RenderAxisOverride(System.Boolean)">
            <summary>
            Creates or updates the visuals for the axis.
            </summary>
            <param name="animate">Whether the updates to the visuals should be animated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the property changed and updated events.
            </summary>
            <param name="name">The name of the property being changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.RegisterSeries(Infragistics.Controls.Charts.Series)">
            <summary>
            Registers a series that uses an axis with the axis.
            </summary>
            <param name="series">The series to register.</param>
            <returns>If the registration was a success.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.DeregisterSeries(Infragistics.Controls.Charts.Series)">
            <summary>
            Deregisters a series that uses an axis from the axis.
            </summary>
            <param name="series">The series to deregister.</param>
            <returns>If the deregistration was a success.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis.LabelProperty">
            <summary>
            Identifies the Label dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.GetLabel(System.Object)">
            <summary>
            Gets the label for a data item.
            </summary>
            <param name="dataItem">The data item to get the label for.</param>
            <returns>The requested label.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the scaled viewport value from an unscaled axis value.
            </summary>
            <param name="unscaledValue">The unscaled axis value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The scaled viewport value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.GetScaledValue(System.Double,System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Gets the scaled viewport value from an unscaled axis value.
            </summary>
            <param name="unscaledValue">The unscaled axis value.</param>
            <param name="windowRect">The current window of the chart.</param>
            <param name="viewportRect">The current viewport.</param>
            <returns>The scaled viewport value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.GetScaledValueList(System.Collections.Generic.IList{System.Double},Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Get a list of scaled viewport values from a list of unscaled axis values.
            </summary>
            <param name="unscaledValues">The list of unscaled axis values.</param>
            <param name="p">Scaler parameters</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the unscaled axis value from an scaled viewport value.
            </summary>
            <param name="scaledValue">The scaled viewport value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The unscaled axis value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.GetUnscaledValue(System.Double,System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Gets the unscaled axis value from an scaled viewport value.
            </summary>
            <param name="scaledValue">The scaled viewport value.</param>
            <param name="windowRect">The current window of the chart.</param>
            <param name="viewportRect">The current viewport.</param>
            <returns>The unscaled axis value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.GetUnscaledValueList(System.Collections.Generic.IList{System.Double},Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets a list of unscaled axis values from a list of scaled viewport values.
            </summary>
            <param name="scaledValues">A list containing the scaled viewport values to unscale.</param>
            <param name="p">Scaler parameters</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.ScaleValue(System.Double)">
            <summary>
            Scales a value from axis space into screen space.
            </summary>
            <param name="unscaledValue">The unscaled axis value to scale.</param>
            <returns>The scaled value in screen coordinates.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.Axis._currentLabelSettings">
            <summary>
            Reference to the axis label settings class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Axis.ExportVisualData">
            <summary>
            Exports visual information about the series for use by external tools and functionality.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.RootCanvas">
            <summary>
            Gets the current Axis object's root canvas.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.SeriesViewer">
            <summary>
            Gets the ChartArea for the current Axis object.
            </summary>
            <remarks>
            This property is maintained by the chart control and is not guaranteed to be
            valid until at least after the owner chart has been loaded.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.Chart">
            <summary>
            Gets or sets the Chart control reference.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.Stroke">
            <summary>
            Gets or sets the Stroke property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.StrokeThickness">
            <summary>
            Gets or sets the StrokeThickness property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.StrokeDashArray">
            <summary>
            Gets or sets the StrokeDashArray property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.Strip">
            <summary>
            Gets or sets the Strip property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.MajorStroke">
            <summary>
            Gets or sets the MajorStroke property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.MajorStrokeThickness">
            <summary>
            Gets or sets the MajorStrokeThickness property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.MajorStrokeDashArray">
            <summary>
            Gets or sets the MajorStrokeDashArray property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.MinorStroke">
            <summary>
            Gets or sets the MinorStroke property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.MinorStrokeThickness">
            <summary>
            Gets or sets the MinorStrokeThickness property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.MinorStrokeDashArray">
            <summary>
            Gets or sets the MinorStrokeDashArray property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.IsDisabled">
            <summary>
            Gets or sets the IsDisabled property. If true, the axis will not be rendered.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.IsInverted">
            <summary>
            Gets or sets the IsInverted property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.IsInvertedCached">
            <summary>
            Gets or sets whether the axis is inverted.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.LabelSettings">
            <summary>
            Gets or sets the settings for the axis labels.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.LabelPanelStyle">
            <summary>
            Gets or sets the LabelPanelStyle property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.CrossingAxis">
            <summary>
            Gets or sets the CrossingAxis property.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.CrossingValue">
            <summary>
            Gets or sets the CrossingValue property.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.Axis.RangeChanged">
            <summary>
            Occurs when the axis range changes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.ViewportRect">
            <summary>
            Gets the viewport of the axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.LabelDataContext">
            <summary>
            Gets the label data contexts.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.ShouldRenderMinorLines">
            <summary>
            Gets or sets whether the minor gridliens should be displayed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.Axis.PropertyChanged">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.Axis.PropertyUpdated">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.Series">
            <summary>
            The series that are registered to this axis.
            </summary>
            
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.Label">
            <summary>
            Gets or sets the axis label format string.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.Orientation">
            <summary>
            Gets the axis orientation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.AxisLines">
            <summary>
            Gets the visuals representing the Axis line.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.MajorLines">
            <summary>
            Gets the visuals representing the major lines.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.Strips">
            <summary>
            Gets the visuals representing the strips.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Axis.MinorLines">
            <summary>
            Gets the visuals representing the minor lines.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.AxisCollection">
            <summary>
            Represents an observable collection of Axis objects.
            </summary>
            <remarks>
            It is not possible to clear the contents of a AxisCollection collection; the Axis
            objects must be removed one at a time.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisCollection.#ctor">
            <summary>
            Initializes a default, empty AxisCollection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisCollection.ClearItems">
            <summary>
            Clears the contained items of the collection, but provides a preview of the occurrance 
            in the form of the CollectionResetting event.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.AxisCollection.CollectionResetting">
            <summary>
            Occurs just before the current axis collection contents are reset
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisCollection.Item(System.String)">
            <summary>
            Gets the first matching Axis object by name.
            </summary>
            <param name="axisName"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.AxisLabelSettings">
            <summary>
            Represents the class for the axis labels settings and behaviors.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelSettings.#ctor">
            <summary>
            Constructs a new AxisLabelSettings instance.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.ForegroundProperty">
            <summary>
            Identifies the Foreground dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.FontFamilyProperty">
            <summary>
            Identifies the FontFamily dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.FontSizeProperty">
            <summary>
            Identifies the FontSize dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.FontStretchProperty">
            <summary>
            Identifies the FontStretch dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.FontStyleProperty">
            <summary>
            Identifies the FontStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.FontWeightProperty">
            <summary>
            Identifies the FontWeight dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.HorizontalAlignmentProperty">
            <summary>
            Identifies the HorizontalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.VerticalAlignmentProperty">
            <summary>
            Identifies the VerticalAlignment dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.IsHitTestVisibleProperty">
            <summary>
            Identifies the IsHitTestVisible dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.OpacityMaskProperty">
            <summary>
            Identifies the OpacityMask dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.OpacityProperty">
            <summary>
            Identifies the Opacity dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.PaddingProperty">
            <summary>
            Identifies the Padding dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.ProjectionProperty">
            <summary>
            Identifies the Projection dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.TextDecorationsProperty">
            <summary>
            Identifies the TextDecorations dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.TextWrappingProperty">
            <summary>
            Identifies the TextWrapping dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.VisibilityProperty">
            <summary>
            Identifies the Visibility dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.ExtentProperty">
            <summary>
            Identifies the Extent dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.AngleProperty">
            <summary>
            Identifies the Angle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.LocationProperty">
            <summary>
            Identifies the Location dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelSettings.TextAlignmentProperty">
            <summary>
            Identifies the TextAlignment dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisLabelSettings.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the AxisLabels. Gives the axis labels a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.Foreground">
            <summary>
            Gets or sets the Foreground property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.FontFamily">
            <summary>
            Gets or sets the FontFamily property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.FontSize">
            <summary>
            Gets or sets the FontSize property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.FontStretch">
            <summary>
            Gets or sets the FontStretch property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.FontStyle">
            <summary>
            Gets or sets the FontStyle property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.FontWeight">
            <summary>
            Gets or sets the FontWeight property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.HorizontalAlignment">
            <summary>
            Gets or sets the HorizontalAlignment property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.VerticalAlignment">
            <summary>
            Gets or sets the VerticalAlignment property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.IsHitTestVisible">
            <summary>
            Gets or sets the IsHitTestVisible property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.OpacityMask">
            <summary>
            Gets or sets the OpacityMask property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.Opacity">
            <summary>
            Gets or sets the Opacity property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.Padding">
            <summary>
            Gets or sets the Padding property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.Projection">
            <summary>
            Gets or sets the Projection property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.TextDecorations">
            <summary>
            Gets or sets the TextDecorations property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.TextWrapping">
            <summary>
            Gets or sets the TextWrapping property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.Visibility">
            <summary>
            Gets or sets the Visibility property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.Extent">
            <summary>
            Gets or sets the Extent property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.Angle">
            <summary>
            Gets or sets the Angle property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.Location">
            <summary>
            Gets or sets the Location property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.TextAlignment">
            <summary>
            Gets or sets the TextAlignment property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.Axis">
            <summary>
            a reference back to the axis containing these label settings.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisLabelSettings.ActualLocation">
            <summary>
            Location where the labels are displayed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.AxisLabelSettings.PropertyChanged">
            <summary>
            Notifies clients that a property value has changed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.AxisLabelSettings.PropertyUpdated">
            <summary>
            Occurs when a property value has been updated.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.AxisRange">
            <summary>
            Represents a chart axis or break range.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisRange.#ctor(System.Double,System.Double)">
            <summary>
            Creates and initializes an immutable AxisRange object.
            </summary>
            <param name="minimum">The range minimum value.</param>
            <param name="maximum">The range maximum value.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisRange.Equals(Infragistics.Controls.Charts.AxisRange)">
            <summary>
            Returns true if this AxisRange is equal to the other AxisRange.
            </summary>
            <param name="other">The AxisRange to check against.</param>
            <returns>True if the two AxisRange objects are equal.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisRange.Equals(System.Object)">
            <summary>
            Returns true if this AxisRange is equal to the other AxisRange.
            </summary>
            <param name="other">The AxisRange to check against.</param>
            <returns>True if the two AxisRange objects are equal.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisRange.GetHashCode">
            <summary>
            Computes a hash code value.
            </summary>
            <returns>A hash code value.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisRange.Minimum">
            <summary>
            Gets the range minimum value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisRange.Maximum">
            <summary>
            Gets the range maximum value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.LinearNumericSnapper.Interval">
            <summary>
            Gets the major line interval.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.LinearNumericSnapper.Precision">
            <summary>
            Gets the number of decimal places required to label major lines.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.LinearNumericSnapper.MinorCount">
            <summary>
            Gets the number of minor lines per major line.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisView.TextBlockCreate">
            <summary>
            Creates a TextBlock object.
            </summary>
            <returns>The created TextBlock.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisView.TextBlockActivate(System.Windows.Controls.TextBlock)">
            <summary>
            Activates a TextBlock object from the pool.
            </summary>
            <param name="TextBlock">The TextBlock to activate.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisView.TextBlockDisactivate(System.Windows.Controls.TextBlock)">
            <summary>
            Disactivates a TextBlock from the pool.
            </summary>
            <param name="textBlock">The TextBlock to disactivate.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisView.TextBlockDestroy(System.Windows.Controls.TextBlock)">
            <summary>
            Destroys a TextBlock from the pool.
            </summary>
            <param name="textBlock">The TextBlock to destroy.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisView.SetupStrips">
            <summary>
            Initializes the axis strip visuals.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisView.ClearMarks(System.Windows.Media.GeometryCollection)">
            <summary>
            Clears the marks from a geometry.
            </summary>
            <param name="geometry">The geometry to clear the marks from.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisView.AxisLines">
            <summary>
            Gets the visuals representing the Axis line.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisView.MajorLines">
            <summary>
            Gets the visuals representing the major lines.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisView.Strips">
            <summary>
            Gets the visuals representing the strips.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisView.MinorLines">
            <summary>
            Gets the visuals representing the minor lines.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CategoryAngleAxis">
            <summary>
            Represents a XamDataChart category angle axis. Useful for displaying radial categories.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CategoryAxisBase">
            <summary>
            Represents the base class for all XamDataChart category-based axes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAxisBase.#ctor">
            <summary>
            CategoryAxisBase constructor.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryAxisBase._fastItemsSource">
            <summary>
            Link to the fast items source.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryAxisBase.FastItemsSourceProperty">
            <summary>
            Identifies the FastItemsSource dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryAxisBase.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryAxisBase.GapProperty">
            <summary>
            Identifies the Gap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryAxisBase.OverlapProperty">
            <summary>
            Identifies the Overlap dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAxisBase.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the unscaled axis value from a scaled viewport value.
            </summary>
            <param name="scaledValue">The scaled viewport value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The unscaled axis value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAxisBase.UnscaleValue(System.Double)">
            <summary>
            Unscales a value from screen space into axis space.
            </summary>
            <param name="unscaledValue">The scaled value in screen coordinates to unscale into axis space.</param>
            <returns>The unscaled value in axis space.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAxisBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the axis. Gives the axis a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAxisBase.HandleFastItemsSourceEvent(System.Object,Infragistics.FastItemsSourceEventArgs)">
            <summary>
            Updates the axis based on a change in the data source.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The FastItemsSource event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAxisBase.RegisterSeries(Infragistics.Controls.Charts.Series)">
            <summary>
            Registers a series that uses an axis with the axis.
            </summary>
            <param name="series">The series to register.</param>
            <returns>If the registration was a success.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAxisBase.DeregisterSeries(Infragistics.Controls.Charts.Series)">
            <summary>
            Deregisters a series that uses an axis from the axis.
            </summary>
            <param name="series">The series to deregister.</param>
            <returns>If the deregistration was a success.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAxisBase.RenderCrossingAxis">
            <summary>
            Updates the crossing axis. Useful when category mode changes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryAxisBase.FastItemsSource">
            <summary>
            Gets the FastItemsSource for the current CategoryAxis object
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryAxisBase.ItemsSource">
            <summary>
            Gets or sets the ItemsSource property for the current axis.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryAxisBase.ItemsCount">
            <summary>
            Gets the number of items in the current category axis items source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryAxisBase.Gap">
            <summary>
            Gets or sets the amount of space between adjacent categories for the current axis object.
            <para>This is a dependency property.</para>
            </summary>
            <remarks>
            The gap is silently clamped to the range [0, inf] when used.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryAxisBase.Overlap">
            <summary>
            Gets or sets the amount of overlap between adjacent categories for the current axis object.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The overlap is silently clamped to the range [-1, 1] when used.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryAxisBase.Mode2GroupCount">
            <summary>
            Gets the number of category groups in the current Chart object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAngleAxis.#ctor">
            <summary>
            Initializes a new CategoryAngleAxis instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAngleAxis.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryAngleAxis.StartAngleOffsetProperty">
            <summary>
            Identifies the StartAngleOffset dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAngleAxis.RenderAxisOverride(System.Boolean)">
            <summary>
            Renders the visuals for the current axis.
            </summary>
            <param name="animate">True if the changes should be animated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAngleAxis.GetScaledAngle(System.Double)">
            <summary>
            Gets the scaled angle in radians from the raw axis value.
            </summary>
            <param name="unscaledAngle">The raw axis value.</param>
            <returns>The scaled angle in radians.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAngleAxis.GetUnscaledAngle(System.Double)">
            <summary>
            Gets the raw axis value from the scaled angle in radians.
            </summary>
            <param name="scaledAngle"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAngleAxis.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the scaled angle in radians from the raw axis value.
            </summary>
            <param name="unscaledValue">The raw axis value.</param>
            <param name="p">Scaler parameters</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAngleAxis.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Handles property updated events.
            </summary>
            <param name="sender">The sender of the updated event.</param>
            <param name="propertyName">The name of the property that was updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryAngleAxis.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryAngleAxis.HasUserInterval">
            <summary>
            Determines if the axis has a user-defined interval.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryAngleAxis.RadiusAxis">
            <summary>
            The radius axis for this angle axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryAngleAxis.StartAngleOffset">
            <summary>
            Indicates the angle in degress that the chart's 0th angle should be offset.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryAngleAxis.Interval">
            <summary>
            Gets or sets the frequency of displayed labels.
            </summary>
            <remarks>
            The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryAngleAxis.Orientation">
            <summary>
            Gets the axis orientation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CategoryDateTimeXAxis">
            <summary>
            Represents an category-based horizontal X axis that uses a DateTime scale.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryDateTimeXAxis.#ctor">
            <summary>
            Creates an new instance of CategoryDateTimeXAxis class.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryDateTimeXAxis.DisplayTypeProperty">
            <summary>
            Identifies the DisplayType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryDateTimeXAxis.MinimumValueProperty">
            <summary>
            Identifies the MinimumValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryDateTimeXAxis.MaximumValueProperty">
            <summary>
            Identifies the MaximumValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryDateTimeXAxis.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryDateTimeXAxis.RenderAxisOverride(System.Boolean)">
            <summary>
            Creates or updates the visual elements of the Axis.
            </summary>
            <param name="animate">Indicates if the visual changes should be animated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryDateTimeXAxis.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets a scaled value inside the viewport.
            </summary>
            <param name="unscaledValue">Value to scale.</param>
            <param name="p">Scaler parameters</param>
            <returns>Scaled value inside the viewport.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryDateTimeXAxis.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Returns an unscaled value from a scaled value based on the amount of data.
            </summary>
            <param name="scaledValue">Scaled value.</param>
            <param name="p">Scaler parameters</param>
            <returns>Unscaled value from a scaled value based on the amount of data.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryDateTimeXAxis.DateTimeMemberPathProperty">
            <summary>
            Identifies the DateTimeMemberPath dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryDateTimeXAxis.RegisterDateTimeColumn(System.String)">
            <summary>
            Registers a date time column for the series from the assigned fast items source.
            </summary>
            <param name="memberPath">The path to use to obtain values for the column.</param>
            <returns>The fast items column reference.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryDateTimeXAxis.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the axis. Gives the axis a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryDateTimeXAxis.RenderAxisAndSeries(System.Boolean)">
            <summary>
            Renders the this date time axis and all series that belong to this axis.
            </summary>
            <param name="animate"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryDateTimeXAxis.NotifyDataChanged">
            <summary>
            Updates the axis when the data has been changed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryDateTimeXAxis.DisplayType">
            <summary>
            Gets or sets the axis display type. 
            Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points.
            Discrete display type will not use a constant interval, but will align each label with its data point.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryDateTimeXAxis.MinimumValue">
            <summary>
            Gets or sets the axis MinimumValue.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryDateTimeXAxis.MaximumValue">
            <summary>
            Gets or sets the axis MaximumValue.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryDateTimeXAxis.Interval">
            <summary>
            Gets or sets the X axis time interval.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryDateTimeXAxis.ActualMinimumValue">
            <summary>
            Gets the coerced minimum value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryDateTimeXAxis.ActualMaximumValue">
            <summary>
            Gets the coerced maximum value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryDateTimeXAxis.DateTimeMemberPath">
            <summary>
            Gets or sets the DateTime mapping property for the CategoryDateTimeXAxis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryDateTimeXAxis.DateTimeColumn">
            <summary>
            Gets column of date time values for the axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryDateTimeXAxis.Orientation">
            <summary>
            Gets the axis orientation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CategoryXAxis">
            <summary>
            Represents a XamDataChart category X axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryXAxis.#ctor">
            <summary>
            Initializes a new instance of the CategoryXAxis class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryXAxis.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the specified item into view.
            </summary>
            <param name="item">Data item to scroll into view</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryXAxis.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the scaled viewport coordinate value from the unscaled axis value.
            </summary>
            <param name="unscaledValue">The unscaled axis value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryXAxis.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the unscaled axis value from a scaled viewport value.
            </summary>
            <param name="scaledValue">The scaled viewport value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The unscaled axis value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryXAxis.RenderAxisOverride(System.Boolean)">
            <summary>
            Renders or updates the axis visuals.
            </summary>
            <param name="animate">Whether the visual changes should be animated.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryXAxis.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryXAxis.Interval">
            <summary>
            Gets or sets the frequency of displayed labels.
            </summary>
            <remarks>
            The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryXAxis.Orientation">
            <summary>
            Gets the axis orientation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CategoryYAxis">
            <summary>
            Represents a XamDataChart category Y axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryYAxis.#ctor">
            <summary>
            Initializes a new instance of the CategoryYAxis class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryYAxis.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryYAxis.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the scaled viewport coordinate value from the unscaled axis value.
            </summary>
            <param name="unscaledValue">The unscaled axis value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryYAxis.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the unscaled axis value from a scaled viewport value.
            </summary>
            <param name="scaledValue">The scaled viewport value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The unscaled axis value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryYAxis.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the specified item into view.
            </summary>
            <param name="item">Data item to scroll into view</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryYAxis.RenderAxisOverride(System.Boolean)">
            <summary>
            Renders or updates the axis visuals.
            </summary>
            <param name="animate">Whether the visual changes should be animated.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryYAxis.Interval">
            <summary>
            Gets or sets the frequency of displayed labels.
            </summary>
            <remarks>
            The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryYAxis.Orientation">
            <summary>
            Gets the axis orientation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.HorizontalAxisLabelPanelBase">
            <summary>
            Represents the base class for horizontal axis label panels.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAxisLabelPanelBase.BindExtent">
            <summary>
            Sets up the horizontal axis extent.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAxisLabelPanelBase.ShouldRotate">
            <summary>
            Determines whether or not the axis labels should be rotated.
            </summary>
            <returns>True if the labels should be rotated; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAxisLabelPanelBase.ShouldTryStagger">
            <summary>
            Determines if the axis labels should be staggered.
            </summary>
            <returns>True if labels should be staggered; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAxisLabelPanelBase.CreateBoundsRectangles">
            <summary>
            Returns a list of label placeholder rectangles.
            </summary>
            <returns>List of label bounds</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAxisLabelPanelBase.HideOptionalLabels(System.Collections.Generic.List{System.Windows.Rect})">
            <summary>
            Hides optional labels
            </summary>
            <param name="rectangles">list of label rectangles</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAxisLabelPanelBase.ShowOptionalLabels">
            <summary>
            Shows optional labels.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAxisLabelPanelBase.SetLabelRotationTransform(System.Windows.FrameworkElement,System.Double)">
            <summary>
            Sets up a rotate transform object for the labels.
            </summary>
            <param name="label">label to apply the transformation to</param>
            <param name="angle">rotatoin angle</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAxisLabelPanelBase.ShouldVerticalAlign">
            <summary>
            Determines if the labels should be vertically aligned.
            </summary>
            <returns>True if the labels should be vertically aligned; other wise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAxisLabelPanelBase.ShouldClip">
            <summary>
            Determines is the labels should be clipped.
            </summary>
            <returns>True if the labels should be clipped; otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAxisLabelPanelBase.StaggerLabels(System.Double,System.Collections.Generic.List{System.Windows.Rect}@)">
            <summary>
            Staggers the axis labels.
            </summary>
            <param name="largestHeight">largest label's height</param>
            <param name="rectangles">list of label bounds</param>
            <returns>number of rows after staggering</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.HorizontalAxisLabelPanel">
            <summary>
            Represents a panel control, containing horizontal axis labels.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.NumericAngleAxis">
            <summary>
            Represents a XamDataChart angle based axis for polar series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.NumericAxisBase">
            <summary>
            Represents the base class for all XamDataChart numeric axes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAxisBase.#ctor">
            <summary>
            Constructs a new NumericAxisBase instance.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericAxisBase.MinimumValueProperty">
            <summary>
            Identifies the MinimumValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericAxisBase.MaximumValueProperty">
            <summary>
            Identifies the MaximumValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericAxisBase.IntervalProperty">
            <summary>
            Identifies the Interval dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericAxisBase.ReferenceValueProperty">
            <summary>
            Identifies the ReferenceValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericAxisBase.IsLogarithmicProperty">
            <summary>
            Identifies the IsLogarithmic dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericAxisBase.LogarithmBaseProperty">
            <summary>
            Identifies the LogarithmBase dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAxisBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the axis. Gives the axis a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAxisBase.InvalidateSeries">
            <summary>
            Invalidates all series associated with the current axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAxisBase.CalculateRange(Infragistics.Controls.Charts.NumericAxisBase,System.Double,System.Double,System.Boolean,System.Int32,System.Double@,System.Double@)">
            <summary>
            Calculates the axis range.
            </summary>
            <param name="target">Target axis</param>
            <param name="minimumValue">Minimum value</param>
            <param name="maximumValue">Maximum valuje</param>
            <param name="isLogarithmic">Whether or not the axis is logarithmic</param>
            <param name="logarithmBase">Logarithm base</param>
            <param name="actualMinimumValue">Actual coerced minimum value</param>
            <param name="actualMaximumValue">Actual coerced maximum value</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAxisBase.RegisterSeries(Infragistics.Controls.Charts.Series)">
            <summary>
            Registers a series that uses an axis with the axis.
            </summary>
            <param name="series">The series to register.</param>
            <returns>If the registration was a success.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAxisBase.DeregisterSeries(Infragistics.Controls.Charts.Series)">
            <summary>
            Deregisters a series that uses an axis from the axis.
            </summary>
            <param name="series">The series to deregister.</param>
            <returns>If the deregistration was a success.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAxisBase.CreateScalerOverride">
            <summary>
            Creates a new numeric axis scaler.
            </summary>
            <returns>New axis scaler</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAxisBase.UnscaleValue(System.Double)">
            <summary>
            Unscales a value from screen space into axis space.
            </summary>
            <param name="unscaledValue">The scaled value in screen coordinates to unscale into axis space.</param>
            <returns>The unscaled value in axis space.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericAxisBase.TickmarkValuesProperty">
            <summary>
            Identifies the TickmarkValues dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.MinimumValue">
            <summary>
            Gets or sets the MinimumValue property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.ActualMinimumValue">
            <summary>
            Gets the effective minimum value for the current numeric axis object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.MaximumValue">
            <summary>
            Gets or sets the MaximumValue property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.ActualMaximumValue">
            <summary>
            Gets the effective maximum value for the current numeric axis object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.ReferenceValue">
            <summary>
            Gets or sets the ReferenceValue property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.IsLogarithmic">
            <summary>
            Gets or sets the IsLogarithmic property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.ActualIsLogarithmic">
            <summary>
            Determines if the axis has a valid logarithmic scale.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.LogarithmBase">
            <summary>
            Gets or sets the LogarithmBase property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.LogarithmBaseCached">
            <summary>
            Gets or sets the cached value of the log base.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.Renderer">
            <summary>
            Houses the rendering logic for the axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.HasUserMinimum">
            <summary>
            Determines if the axis has a user-defined minimum.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.HasUserMaximum">
            <summary>
            Determines if the axis has a user-defined maximum.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.TickmarkValues">
            <summary>
            Gets or sets tickmark values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAxisBase.ActualTickmarkValues">
            <summary>
            Gets or sets the actual tickmark values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAngleAxis.#ctor">
            <summary>
            Constructs a numeric angle axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAngleAxis.CreateRenderer">
            <summary>
            Creates the renderer for this axis.
            </summary>
            <returns>The renderer object.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAngleAxis.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the scaled angle value in radians from the raw axis value.
            </summary>
            <param name="unscaledValue">The raw axis value.</param>
            <param name="p">Scaler parameters</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAngleAxis.GetScaledAngle(System.Double)">
            <summary>
            Gets the scaled angle value in radians based on the raw input.
            </summary>
            <param name="unscaledValue">The raw input value.</param>
            <returns>The scaled angle value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAngleAxis.GetUnscaledAngle(System.Double)">
            <summary>
            Gets the raw axis value back from the angle that would be used on the chart.
            </summary>
            <param name="scaledValue">The chart angle value.</param>
            <returns>The raw axis value.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericAngleAxis.StartAngleOffsetProperty">
            <summary>
            Identifies the StartAngleOffset dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAngleAxis.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Handles property updated events.
            </summary>
            <param name="sender">The sender of the updated event.</param>
            <param name="propertyName">The name of the property that was updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAngleAxis.CreateRenderingParams(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Creates the parameters for the rendering.
            </summary>
            <param name="viewportRect">The viewport rectangle.</param>
            <param name="windowRect">The window rectangle.</param>
            <returns>The rendering parameters.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAngleAxis.RenderAxisOverride(System.Boolean)">
            <summary>
            Performs the rendering of the axis.
            </summary>
            <param name="animate">Indicates whether the rendering should be animated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericAngleAxis.ViewportChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes if they want to respond to the viewport of the axis changing.
            </summary>
            <param name="oldRect">The old viewport rectangle.</param>
            <param name="newRect">The new viewport rectangle.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAngleAxis.StartAngleOffset">
            <summary>
            Indicates the angle in degress that the chart's 0th angle should be offset.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAngleAxis.RadiusAxis">
            <summary>
            Gets or sets the radius axis reference.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericAngleAxis.Orientation">
            <summary>
            Gets the axis orientation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.StraightNumericAxisBase">
            <summary>
            Defines a set of basic methods and properties used to create a StranghtNumeric axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StraightNumericAxisBase.#ctor">
            <summary>
            Creates new instance of StraightNumeric axis.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StraightNumericAxisBase.ScaleModeProperty">
            <summary>
            Identifies the ScaleMode dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StraightNumericAxisBase.CreateLinearScaler">
            <summary>
            Creates a new linear scaler.
            </summary>
            <returns>New linear scaler</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StraightNumericAxisBase.CalculateRange(Infragistics.Controls.Charts.NumericAxisBase,System.Double,System.Double,System.Boolean,System.Int32,System.Double@,System.Double@)">
            <summary>
            Calculates the axis range.
            </summary>
            <param name="target">target axis</param>
            <param name="minimumValue">minimum value</param>
            <param name="maximumValue">maximum value</param>
            <param name="isLogarithmic">whether the axis is logarithmic</param>
            <param name="logarithmBase">log base</param>
            <param name="actualMinimumValue">actual minimum value</param>
            <param name="actualMaximumValue">actual maximum value</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.StraightNumericAxisBase.UpdateActualScaler">
            <summary>
            Updates the actual axis scaler.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StraightNumericAxisBase.BindScalerProperties">
            <summary>
            Updates axis scaler's properties.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StraightNumericAxisBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Handles property updates.
            </summary>
            <param name="sender">source object</param>
            <param name="propertyName">property name</param>
            <param name="oldValue">old property value</param>
            <param name="newValue">new property value</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.StraightNumericAxisBase.ScaleMode">
            <summary>
            Gets or sets the axis scale mode.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StraightNumericAxisBase.Scaler">
            <summary>
            Gets or sets the axis scaler.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StraightNumericAxisBase.ActualScaler">
            <summary>
            Gets or sets the actual axis scaler.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.NumericRadiusAxis">
            <summary>
            Represents a XamDataChart radius axis for polar and radial series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericRadiusAxis.#ctor">
            <summary>
            Constructs a numeric radius axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericRadiusAxis.CreateRenderer">
            <summary>
            Creates the rendering provider for the axis.
            </summary>
            <returns>The axis renderer.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericRadiusAxis.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the window length for the provided radius.
            </summary>
            <param name="unscaledValue">The radius for which to get the window length.</param>
            <param name="p">Scaler parameters</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericRadiusAxis.GetScaledValue(System.Double)">
            <summary>
            Returns a world coordinates radius length (0 - 0.5) from a raw axis value.
            </summary>
            <param name="unscaledValue">The raw axis value.</param>
            <returns>The world coordinates radius value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericRadiusAxis.GetUnscaledValue(System.Double)">
            <summary>
            Returns a raw axis value from the world coordinates radius length provided.
            </summary>
            <param name="scaledValue">The scaled world coordinates radius length.</param>
            <returns>The raw axis value.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericRadiusAxis.RadiusExtentScaleProperty">
            <summary>
            Identifies the RadiusExtentScale dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericRadiusAxis.InnerRadiusExtentScaleProperty">
            <summary>
            Identifies the RadiusExtentScale dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericRadiusAxis.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Handles property updated events.
            </summary>
            <param name="sender">The sender of the updated event.</param>
            <param name="propertyName">The name of the property that was updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericRadiusAxis.OnAngleAxisChanged(Infragistics.Controls.Charts.Axis)">
            <summary>
            Handles axis changed event.
            </summary>
            <param name="angleAxis">source axis</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericRadiusAxis.CreateRenderingParams(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Creates the parameters for the rendering.
            </summary>
            <param name="viewportRect">The viewport rectangle.</param>
            <param name="windowRect">The window rectangle.</param>
            <returns>The rendering parameters.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericRadiusAxis.RenderAxisOverride(System.Boolean)">
            <summary>
            Renders the axis.
            </summary>
            <param name="animate">Whether or not to use animation</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericRadiusAxis.ViewportChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes if they want to respond to the viewport of the axis changing.
            </summary>
            <param name="oldRect">The old viewport rectangle.</param>
            <param name="newRect">The new viewport rectangle.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericRadiusAxis.RadiusExtentScale">
            <summary>
            Defines the percentage of the maximum radius extent to use as the maximum radius. Should be 
            a value between 0.0 and 1.0.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericRadiusAxis.InnerRadiusExtentScale">
            <summary>
            Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be 
            a value between 0.0 and 1.0.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericRadiusAxis.CrossingValueRadians">
            <summary>
            Gets or sets the axis crossing value in radians.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericRadiusAxis.AngleAxis">
            <summary>
            Gets or sets the reference to the angle axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericRadiusAxis.Orientation">
            <summary>
            Gets the axis orientation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.NumericXAxis">
            <summary>
            Represents a XamDataChart numeric X axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericXAxis.#ctor">
            <summary>
            Initializes a new instance of the NumericXAxis class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericXAxis.CreateRenderer">
            <summary>
            Creates the rendering provider for the axis.
            </summary>
            <returns>The axis renderer.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericXAxis.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the scaled viewport value from an unscaled axis value.
            </summary>
            <param name="unscaledValue">The unscaled axis value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The scaled viewport value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericXAxis.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the unscaled axis value from an scaled viewport value.
            </summary>
            <param name="scaledValue">The scaled viewport value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The unscaled axis value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericXAxis.GetScaledValueList(System.Collections.Generic.IList{System.Double},Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Get a list of scaled viewport values from a list of unscaled axis values.
            </summary>
            <param name="unscaledValues">The list of unscaled axis values.</param>
            <param name="p">Scaler parameters</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericXAxis.GetUnscaledValueList(System.Collections.Generic.IList{System.Double},Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets a list of unscaled axis values from a list of scaled viewport values.
            </summary>
            <param name="scaledValues">A list containing the scaled viewport values to unscale.</param>
            <param name="p">Scaler parameters</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericXAxis.CreateRenderingParams(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Creates the parameters for the rendering.
            </summary>
            <param name="viewportRect">The viewport rectangle.</param>
            <param name="windowRect">The window rectangle.</param>
            <returns>The rendering parameters.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericXAxis.RenderAxisOverride(System.Boolean)">
            <summary>
            Renders or updates the axis visuals.
            </summary>
            <param name="animate">Whether of not the visual changes should be animated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericXAxis.ViewportChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes if they want to respond to the viewport of the axis changing.
            </summary>
            <param name="oldRect">The old viewport rectangle.</param>
            <param name="newRect">The new viewport rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericXAxis.CreateScalerOverride">
            <summary>
            Creates a new axis scaler.
            </summary>
            <returns>New axis scaler</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericXAxis.Orientation">
            <summary>
            Gets the axis orientation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.NumericYAxis">
            <summary>
            Represents a XamDataChart numeric Y axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericYAxis.#ctor">
            <summary>
            Initializes a new instance of the NumericYAxis class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericYAxis.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the scaled viewport value from an unscaled axis value.
            </summary>
            <param name="unscaledValue">The unscaled axis value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The scaled viewport value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericYAxis.GetScaledValueList(System.Collections.Generic.IList{System.Double},Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Get a list of scaled viewport values from a list of unscaled axis values.
            </summary>
            <param name="unscaledValues">The list of unscaled axis values.</param>
            <param name="p">Scaler parameters</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericYAxis.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the unscaled axis value from an scaled viewport value.
            </summary>
            <param name="scaledValue">The scaled viewport value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The unscaled axis value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericYAxis.GetUnscaledValueList(System.Collections.Generic.IList{System.Double},Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets a list of unscaled axis values from a list of scaled viewport values.
            </summary>
            <param name="scaledValues">A list containing the scaled viewport values to unscale.</param>
            <param name="p">Scaler parameters</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericYAxis.CreateRenderingParams(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Creates the parameters for the rendering.
            </summary>
            <param name="viewportRect">The viewport rectangle.</param>
            <param name="windowRect">The window rectangle.</param>
            <returns>The rendering parameters.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericYAxis.RenderAxisOverride(System.Boolean)">
            <summary>
            Creates or updates the visuals for the axis.
            </summary>
            <param name="animate">Whether the updates to the visuals should be animated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericYAxis.ViewportChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the viewport of the axis updating.
            </summary>
            <param name="oldRect">The old viewport rectangle.</param>
            <param name="newRect">The new viewport rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericYAxis.CreateScalerOverride">
            <summary>
            Creates an axis scaler.
            </summary>
            <returns>Axis scaler</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericYAxis.CreateLinearScaler">
            <summary>
            Creates a linear numeric axis scaler.
            </summary>
            <returns>Linear vertical scaler</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericYAxis.Orientation">
            <summary>
            Gets the axis orientation
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PolarAxes">
            <summary>
            Performs polar axis logic than needs to refer to the two paired 
            axes in order to function appropriately.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxes.#ctor(Infragistics.Controls.Charts.NumericRadiusAxis,Infragistics.Controls.Charts.NumericAngleAxis)">
            <summary>
            Constructs a PolarAxes instance.
            </summary>
            <param name="radiusAxis">The radius axis to refer to when performing axis calculations.</param>
            <param name="angleAxis">The angle axis to refer to when performing axis calculations.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxes.GetXValue(System.Double,System.Double,System.Windows.Rect,System.Windows.Rect,System.Func{System.Double,System.Double})">
            <summary>
            Gets the X coordinate in the viewport coordinate system given an angle
            and a radius.
            </summary>
            <param name="angle">The angle for the point.</param>
            <param name="radius">The radius for the point.</param>
            <param name="windowRect">The window rectangle bounds.</param>
            <param name="viewportRect">The viewport rectangle bounds.</param>
            <param name="cosStrategy">A strategy for calculating cosines.</param>
            <returns>The X value of the point in scaled coordinates.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxes.GetUnscaledValues(System.Double,System.Double,System.Windows.Rect,System.Windows.Rect,System.Double@,System.Double@)">
            <summary>
            Gets the axis angle and radius values from a point in viewport coordinates.
            </summary>
            <param name="scaledXValue">The X value of the point in scaled coordinates.</param>
            <param name="scaledYValue">The Y value of the point in scaled coordinates.</param>
            <param name="windowRect">The window rectangle bounds.</param>
            <param name="viewportRect">The viewport rectangle bounds.</param>
            <param name="unscaledAngle">Returns the angle axis value of the point.</param>
            <param name="unscaledRadius">Returns the radius axis value of the point.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxes.GetYValue(System.Double,System.Double,System.Windows.Rect,System.Windows.Rect,System.Func{System.Double,System.Double})">
            <summary>
            Gets the Y coordinate in the viewport coordinate system given an angle
            and a radius.
            </summary>
            <param name="angle">The angle for the point.</param>
            <param name="radius">The radius for the point.</param>
            <param name="windowRect">The window rectangle bounds.</param>
            <param name="viewportRect">The viewport rectangle bounds.</param>
            <param name="sinStrategy">A strategy to calculate sines.</param>
            <returns>The Y value of the point in scaled coordinates.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarAxes.RadiusAxis">
            <summary>
            The radius axis to refer to when performing axis calculations.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarAxes.AngleAxis">
            <summary>
            The angle axis to refer to when performing axis calculations.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PolarAxisRenderingManager">
            <summary>
            Represents rendering functionality for the polar class of axes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.ConcentricStrip(System.Windows.Media.GeometryCollection,System.Double,System.Double,System.Windows.Rect,System.Windows.Rect,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Draws a concentric strip around the provided center point.
            </summary>
            <param name="geometry">The geometry to add the strip to.</param>
            <param name="radius0">The inner radius of the concentric strip.</param>
            <param name="radius1">The outer radius of the concentric strip.</param>
            <param name="viewportRect">The viewport rectangle.</param>
            <param name="windowRect">The window rectangle bounds.</param>
            <param name="center">The center around which to draw the concentric strip.</param>
            <param name="minAngle">Minimum angle</param>
            <param name="maxAngle">Maximum angle</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.ConcentricLine(System.Windows.Media.GeometryCollection,System.Double,System.Windows.Rect,System.Windows.Rect,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Draws a concentric line (a circle) around the provided center.
            </summary>
            <param name="geometry">The geometry to add a line to.</param>
            <param name="radius">The radius of the concentric circle.</param>
            <param name="viewportRect">The viewport rectangle.</param>
            <param name="windowRect">The window rectangle bounds.</param>
            <param name="center">The center around which to draw the concentric line.</param>
            <param name="startAngle">Start angle</param>
            <param name="endAngle">End angle</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.RadialStrip(System.Windows.Media.GeometryCollection,System.Double,System.Double,System.Windows.Rect,System.Windows.Rect,System.Double,System.Double,System.Windows.Point)">
            <summary>
            Draws a radial strip (a pie slice) around the provided center point.
            </summary>
            <param name="geometry">The geometry to add the strip to.</param>
            <param name="startAngle">The start angle of the strip.</param>
            <param name="endAngle">The end angle of the strip.</param>
            <param name="viewportRect">The viewport rectangle.</param>
            <param name="windowRect">The window rectangle bounds.</param>
            <param name="minLength">The inner extent of the strip.</param>
            <param name="maxLength">The outer extent of the strip.</param>
            <param name="center">The center around which to draw the radial strip.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.RadialLine(System.Windows.Media.GeometryCollection,System.Double,System.Windows.Rect,System.Windows.Rect,System.Double,System.Double,System.Windows.Point)">
            <summary>
            Draws a radial line (spoke) around the center point.
            </summary>
            <param name="geometry">The geometry to add the line to.</param>
            <param name="angle">The angle of the line around the center point.</param>
            <param name="viewportRect">The viewport rectangle.</param>
            <param name="windowRect">The window rectangle bounds.</param>
            <param name="minLength">The minimum length of the line.</param>
            <param name="maxLength">The maximum length of the line.</param>
            <param name="center">The center point around which to draw the line.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.InXBand(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Is the provided point within the x range of the bounding box.
            </summary>
            <param name="center">The point to check.</param>
            <param name="bounds">The bounding box.</param>
            <returns>True if it is in the X range.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.InYBand(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Is the provided point in the y range of the bounding box.
            </summary>
            <param name="center">The point to check.</param>
            <param name="bounds">The bounding box.</param>
            <returns>True if it is in the Y range.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.ClosestCorner(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Determines the distance to the corner on the cartesian axis aligned bounding rectangle that 
            is closest to the provided point.
            </summary>
            <param name="center">The point to determine closeness to.</param>
            <param name="bounds">The cartesian axis aligned rectangle.</param>
            <returns>The distance to the closest corner.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.FurthestCorner(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Determines the distance to the corner on the cartesian axis aligned bounding rectangle that 
            is furthest from the provided point.
            </summary>
            <param name="center">The point to determine distance to.</param>
            <param name="bounds">The cartesian axis aligned rectangle.</param>
            <returns>The distance to the furthest corner.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.GetClosestRadiusValue(System.Windows.Rect)">
            <summary>
            Determines the smallest radius that is visible in the current view into 
            the chart.
            </summary>
            <param name="windowRect">The window rectangle.</param>
            <returns>The radius value.</returns>
            <remarks>
            This makes use of the fact that the view into the chart is aligned on the 
            cartesian axes. 
            
            So, if the center point of the chart is inside the viewable 
            space, the minimum radius is 0. 
            
            If the view into the chart is scrolled above or below the center point, 
            such that the center point is in the X range of the view, then the closest
            radius is just the distance to the top or bottom edge of the window rectangle.
            
            Similarly, if the view into the chart is left of right of the center point,
            such that the center point is in the Y range of the view, then the closest
            radius is just the distance to the left of right edge of the window rectangle.
            
            In the case where the view is deeper into the quadrants of the space, and the
            center point is neither in the X or Y range of the view, then we simply need to 
            determine what the distance is to the closest corner of the rectangle.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.GetFurthestRadiusValue(System.Windows.Rect)">
            <summary>
            Determines the furthest radius value that is viewable in the current view into
            the chart.
            </summary>
            <param name="windowRect">The window rectangle.</param>
            <returns>The radius value.</returns>
            <remarks>In all cases the furthest distance will just be the distance to the furthest 
            corner of the viewing rectangle in scaled viewport space.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.GetAngleTo(System.Windows.Point,System.Windows.Point)">
            <summary>
            Gets the angle value to a specified point from the center point.
            </summary>
            <param name="center">The center point of the chart.</param>
            <param name="toPoint">The point to get the axis angle value to.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAxisRenderingManager.GetMinMaxAngle(System.Windows.Rect,System.Double@,System.Double@)">
            <summary>
            Gets the min and max angle axis value that are visible in the current 
            view into the chart.
            </summary>
            <param name="windowRect">The window rectangle.</param>
            <param name="minAngle">Returns the minimum angle that is visible.</param>
            <param name="maxAngle">Returns the maximum angle that is visible.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.IPolarRadialRenderingParameters.MinLength">
            <summary>
            The minimum extent of any spokes to be drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.IPolarRadialRenderingParameters.MaxLength">
            <summary>
            The maximum extent of any spokes to be drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.IPolarRadialRenderingParameters.Center">
            <summary>
            The center of the polar chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.IPolarRadialRenderingParameters.CrossingAngleRadians">
            <summary>
            The angle at which the radius axis will cross
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PolarAxisRenderingParameters">
            <summary>
            Polar axis specific rendering parameters.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarAxisRenderingParameters.MinLength">
            <summary>
            The minimum extent of any spokes to be drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarAxisRenderingParameters.MaxLength">
            <summary>
            The maximum extent of any spokes to be drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarAxisRenderingParameters.Center">
            <summary>
            The center of the polar chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarAxisRenderingParameters.CrossingAngleRadians">
            <summary>
            The angle at which the radius axis will cross
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAxisRenderingParameters.MinLength">
            <summary>
            The minimum extent of any spokes to be drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAxisRenderingParameters.MaxLength">
            <summary>
            The maximum extent of any spokes to be drawn.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAxisRenderingParameters.Center">
            <summary>
            The center of the polar chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAxisRenderingParameters.CrossingAngleRadians">
            <summary>
            The angle at which the radius axis will cross
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.RadialAxes">
            <summary>
            Performs radial axis logic than needs to refer to the two paired 
            axes in order to function appropriately.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxes.#ctor(Infragistics.Controls.Charts.NumericRadiusAxis,Infragistics.Controls.Charts.CategoryAngleAxis)">
            <summary>
            Constructs a PolarAxes instance.
            </summary>
            <param name="radiusAxis">The radius axis to refer to when performing axis calculations.</param>
            <param name="angleAxis">The angle axis to refer to when performing axis calculations.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxes.GetXValue(System.Double,System.Double,System.Windows.Rect,System.Windows.Rect,System.Func{System.Double,System.Double})">
            <summary>
            Gets the X coordinate in the viewport coordinate system given an angle
            and a radius.
            </summary>
            <param name="angle">The angle for the point.</param>
            <param name="radius">The radius for the point.</param>
            <param name="windowRect">The window rectangle bounds.</param>
            <param name="viewportRect">The viewport rectangle bounds.</param>
            <param name="cosStrategy">A strategy for performing cosine operations.</param>
            <returns>The X value of the point in scaled coordinates.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxes.GetUnscaledValues(System.Double,System.Double,System.Windows.Rect,System.Windows.Rect,System.Double@,System.Double@)">
            <summary>
            Gets the axis angle and radius values from a point in viewport coordinates.
            </summary>
            <param name="scaledXValue">The X value of the point in scaled coordinates.</param>
            <param name="scaledYValue">The Y value of the point in scaled coordinates.</param>
            <param name="windowRect">The window rectangle bounds.</param>
            <param name="viewportRect">The viewport rectangle bounds.</param>
            <param name="unscaledAngle">Returns the angle axis value of the point.</param>
            <param name="unscaledRadius">Returns the radius axis value of the point.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxes.GetYValue(System.Double,System.Double,System.Windows.Rect,System.Windows.Rect,System.Func{System.Double,System.Double})">
            <summary>
            Gets the Y coordinate in the viewport coordinate system given an angle
            and a radius.
            </summary>
            <param name="angle">The angle for the point.</param>
            <param name="radius">The radius for the point.</param>
            <param name="windowRect">The window rectangle bounds.</param>
            <param name="viewportRect">The viewport rectangle bounds.</param>
            <param name="sinStrategy">A strategy to calculate sines.</param>
            <returns>The Y value of the point in scaled coordinates.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAxes.RadiusAxis">
            <summary>
            The radius axis to refer to when performing axis calculations.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAxes.AngleAxis">
            <summary>
            The angle axis to refer to when performing axis calculations.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.RadialAxisLabelPanel">
            <summary>
            Represents a panel control, containing radial axis labels.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.ShouldTryStagger">
            <summary>
            Returns if staggering should be attempted.
            </summary>
            <returns>True if staggering should be attempted.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.ShouldVerticalAlign">
            <summary>
            Returns if vertical alignment should be performed.
            </summary>
            <returns>True if vertical alignment should be performed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.ApplyPanelRotation(System.Windows.Size)">
            <summary>
            Applies the rotation to the panel.
            </summary>
            <param name="finalSize">The final size of the plot area.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.GetEffectiveAngle">
            <summary>
            Gets the effective angle for the panel.
            </summary>
            <returns>The angle.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.ShouldRotate">
            <summary>
            Gets if the panel should rotate.
            </summary>
            <returns>True if the panel should rotate.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.ShouldClip">
            <summary>
            Returns if the panel should clip labels.
            </summary>
            <returns>True if labels should be clipped.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.SetLabelRotationTransform(System.Windows.FrameworkElement,System.Double)">
            <summary>
            Sets the rotation on a label.
            </summary>
            <param name="label">The label to rotate.</param>
            <param name="angle">The angle to rotate the label.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.MinimumPosition">
            <summary>
            Returns teh minimum label position
            </summary>
            <returns>minimum</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.MaximumPosition">
            <summary>
            Returns the maximum label position.
            </summary>
            <returns>maximum</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.HideOptionalLabels(System.Collections.Generic.List{System.Windows.Rect})">
            <summary>
            Hides any optional labels if collisions are occuring.
            </summary>
            <param name="rectangles">The label bounds list.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.ShouldDisplay(System.Int32,System.Windows.Rect)">
            <summary>
            Determins if something should be displayed via its index and bounds.
            </summary>
            <param name="index"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAxisLabelPanel.ShowOptionalLabels">
            <summary>
            Shows any optional labels.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAxisLabelPanel.RotationCenter">
            <summary>
            Sets or gets the rotation center of the panel.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAxisLabelPanel.CrossingAngle">
            <summary>
            Sets or gets the crossing angle of the panel.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAxisLabelPanel.AxisIsNotEmbedded">
            <summary>
            Gets if the axis is external to the plot area.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAxisLabelPanel.AxisIsEmbedded">
            <summary>
            Gets if the axis is embedded in the plot area.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.HorizontalLinearScaler">
            <summary>
            Represents a horizontally oriented linear scaler.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.LinearScaler">
            <summary>
            Represents a linear numeric axis scaler.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.NumericScaler">
            <summary>
            Represents a numeric axis scaler.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericScaler.ActualMinimumValuePropertyName">
            <summary>
            String used to determine the name of the ActualMinimumValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericScaler.ActualMaximumValuePropertyName">
            <summary>
            String used to determine the name of the ActualMaximumValue dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericScaler.CalculateRange(Infragistics.Controls.Charts.NumericAxisBase,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Calculates the range of the scaler.
            </summary>
            <param name="target">Target axis</param>
            <param name="minimumValue">Desired minimum value</param>
            <param name="maximumValue">Desired maximum value</param>
            <param name="actualMinimumValue">Actual minimum value</param>
            <param name="actualMaximumValue">Actual maximum value</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericScaler.ActualMinimumValueProperty">
            <summary>
            Identifies the ActualMinimumValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericScaler.ActualMaximumValueProperty">
            <summary>
            Identifies the ActualMaximumValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericScaler.CachedActualMinimumValue">
            <summary>
            A copy of the ActualMinimumValue property value, cached for performance reasons.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericScaler.CachedActualMaximumValue">
            <summary>
            A copy of the ActualMaximumValue property value, cached for performance reasons.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericScaler.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Called when a property value changes.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericScaler.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Returns an unscaled value in the viewport.
            </summary>
            <param name="scaledValue">The scaled value.</param>
            <param name="p">Scaler parameters.</param>
            <returns>Unscaled value in the viewport</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericScaler.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets a value on a numeric scale.
            </summary>
            <param name="unscaledValue">The value to be scaled.</param>
            <param name="p">Scaler parameters.</param>
            <returns>Value on a numeric scale</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericScaler.GetUnscaledValueList(System.Collections.Generic.IList{System.Double},Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Returns a list of unscaled values in the viewport.
            </summary>
            <param name="scaledValues">list of scaled values</param>
            <param name="p">Scaler parameters.</param>
            <returns>List of unscaled values in the viewport</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericScaler.GetScaledValueList(System.Collections.Generic.IList{System.Double},Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets a list of values on a numeric scale.
            </summary>
            <param name="unscaledValues">values to be scaled</param>
            <param name="p">Scaler parameters.</param>
            <returns>List of values on a numeric scale</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericScaler.ActualMinimumValue">
            <summary>
            Gets or sets the actual minimum value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericScaler.ActualMaximumValue">
            <summary>
            Gets or sets the actual maximum value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericScaler.ActualRange">
            <summary>
            Gets or sets the actual scaler range.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LinearScaler.CalculateRange(Infragistics.Controls.Charts.NumericAxisBase,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Calculates the range of the scaler.
            </summary>
            <param name="target">Target axis</param>
            <param name="minimumValue">Desired minimum value</param>
            <param name="maximumValue">Desired maximum value</param>
            <param name="actualMinimumValue">Actual minimum value</param>
            <param name="actualMaximumValue">Actual maximum value</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalLinearScaler.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the unscaled axis value from an scaled viewport value.
            </summary>
            <param name="scaledValue">The scaled viewport value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The unscaled axis value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalLinearScaler.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the scaled viewport value from an unscaled axis value.
            </summary>
            <param name="unscaledValue">The unscaled axis value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The scaled viewport value.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.HorizontalLogarithmicScaler">
            <summary>
            Represents a horizontally oriented logarithmic scaler.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.LogarithmicScaler">
            <summary>
            Represents a logarithmic numeric scaler.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LogarithmicScaler.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Called when a property value changes.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.LogarithmicScaler.CalculateRange(Infragistics.Controls.Charts.NumericAxisBase,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Calculates the axis range based on min and max values.
            </summary>
            <param name="target">Axis, for which the range is calculated</param>
            <param name="minimumValue">Minimum value</param>
            <param name="maximumValue">Maximum value</param>
            <param name="actualMinimumValue">Actual minimum value</param>
            <param name="actualMaximumValue">Actual maximum value</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalLogarithmicScaler.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the unscaled axis value from an scaled viewport value.
            </summary>
            <param name="scaledValue">The scaled viewport value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The unscaled axis value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalLogarithmicScaler.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the scaled viewport value from an unscaled axis value.
            </summary>
            <param name="unscaledValue">The unscaled axis value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The scaled viewport value.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.NumericScaleMode">
            <summary>
            Enumeration for typical scaling behaviors of an axis.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericScaleMode.Linear">
            <summary>
            Scale values on a linear number line.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.NumericScaleMode.Logarithmic">
            <summary>
            Scale values on a logarithmic number line.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ScalerParams">
            <summary>
            Class containing several properties which are used as parameters passed to scaling operations in a SeriesViewer.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScalerParams.#ctor(System.Windows.Rect,System.Windows.Rect,System.Boolean)">
            <summary>
            ScalerParams constructor.
            </summary>
            <param name="windowRect">The WindowRect in context.</param>
            <param name="viewportRect">The Viewport in context.</param>
            <param name="isInverted">True if the axis is inverted, otherwise False.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScalerParams.WindowRect">
            <summary>
            Rect representing the current zoom and pan.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScalerParams.ViewportRect">
            <summary>
            Rect corresponding roughly to the layout area. The reference frame for scaled coordinates.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScalerParams.EffectiveViewportRect">
            <summary>
            The Rect to which ViewportRect has been coerced for scaling purposes, if such behavior has been defined. Generally a subarea of ViewportRect.
            A value of Rect.Empty (by default) implies that the EffectiveViewportRect is the same as the ViewportRect.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScalerParams.IsInverted">
            <summary>
            Bool that determines whether or not to invert the scale.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VerticalLinearScaler">
            <summary>
            Represents a vertically oriented linear scaler.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalLinearScaler.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the unscaled axis value from an scaled viewport value.
            </summary>
            <param name="scaledValue">The scaled viewport value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The unscaled axis value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalLinearScaler.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the scaled viewport value from an unscaled axis value.
            </summary>
            <param name="unscaledValue">The unscaled axis value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The scaled viewport value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalLinearScaler.GetScaledValue(System.Double,System.Windows.Rect,System.Windows.Rect,System.Boolean)">
            <summary>
            Gets a value on a linear scale.
            </summary>
            <param name="unscaledValue">value to be scaled</param>
            <param name="windowRect">chart's window</param>
            <param name="viewportRect">chart's viewport</param>
            <param name="isInverted">is the axis inverted?</param>
            <returns>Value on a linear scale</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalLinearScaler.GetUnscaledValue(System.Double,System.Windows.Rect,System.Windows.Rect,System.Boolean)">
            <summary>
            Returns an unscaled value in the viewport.
            </summary>
            <param name="scaledValue">scaled value</param>
            <param name="windowRect">chart's window</param>
            <param name="viewportRect">chart's viewport</param>
            <param name="isInverted">is the axis inverted?</param>
            <returns>Unscaled value in the viewport</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.VerticalLogarithmicScaler">
            <summary>
            Represents a vertically oriented logarithmic scaled.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalLogarithmicScaler.GetUnscaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the unscaled axis value from an scaled viewport value.
            </summary>
            <param name="scaledValue">The scaled viewport value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The unscaled axis value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalLogarithmicScaler.GetScaledValue(System.Double,Infragistics.Controls.Charts.ScalerParams)">
            <summary>
            Gets the scaled viewport value from an unscaled axis value.
            </summary>
            <param name="unscaledValue">The unscaled axis value.</param>
            <param name="p">Scaler parameters</param>
            <returns>The scaled viewport value.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.TickmarkValues">
            <summary>
            Represents a set of methods and properties used to create tickmark values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.TickmarkValues.Initialize(Infragistics.Controls.Charts.TickmarkValuesInitializationParameters)">
            <summary>
            Initializes a new set of tickmark values.
            </summary>
            <param name="initializationParameters">initialization parameters</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.TickmarkValues.MajorValues">
            <summary>
            Returns a set of major tickmark values.
            </summary>
            <returns>Major tickmark values</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.TickmarkValues.MinorValues">
            <summary>
            Returns a set of minor tickmark values.
            </summary>
            <returns>Minor tickmark values</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValues.VisibleMaximum">
            <summary>
            Gets or sets the maximum tickmark value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValues.Interval">
            <summary>
            Gets or sets the tickmark interval.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValues.FirstIndex">
            <summary>
            Gets or sets the first tickmark index.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValues.LastIndex">
            <summary>
            Gets or sets the last tickmark index.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValues.MinorCount">
            <summary>
            Gets or sets the number of minor tickmarks between two consecutive major tickmarks.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.LinearTickmarkValues">
            <summary>
            Represents a set of linear tickmarks.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LinearTickmarkValues.#ctor">
            <summary>
            Initializes a new instance of the tickmarks.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LinearTickmarkValues.Initialize(Infragistics.Controls.Charts.TickmarkValuesInitializationParameters)">
            <summary>
            Initializes a set of new tickmark values.
            </summary>
            <param name="initializationParameters">Initialization parameters</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.LinearTickmarkValues.MajorValues">
            <summary>
            Returns a collection of marjor tickmark values.
            </summary>
            <returns>Major tickmark values</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.LinearTickmarkValues.MinorValues">
            <summary>
            Returns a collection of minor tickmark values.
            </summary>
            <returns>Minor tickmark values</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.LinearTickmarkValues.MinTicks">
            <summary>
            Gets or sets the number of minor tickmarks
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.LogarithmicTickmarkValues">
            <summary>
            Represents a set of logarithmic tickmarks.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LogarithmicTickmarkValues.Initialize(Infragistics.Controls.Charts.TickmarkValuesInitializationParameters)">
            <summary>
            Initializes a new set of tickmark values.
            </summary>
            <param name="initializationParameters">initialization parameters</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.LogarithmicTickmarkValues.LogarithmBaseProperty">
            <summary>
            Identifies the LogarithBase dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LogarithmicTickmarkValues.MajorValueAt(System.Int32)">
            <summary>
            Returns a major value at a specified index.
            </summary>
            <param name="tickIndex">tickmark index</param>
            <returns>Major value at a given index</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.LogarithmicTickmarkValues.MajorValues">
            <summary>
            Returns a collection of major values.
            </summary>
            <returns>Major values</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.LogarithmicTickmarkValues.MinorValues">
            <summary>
            Returns a collection of minor values.
            </summary>
            <returns>Minor values</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.LogarithmicTickmarkValues.LogarithmBase">
            <summary>
            Gets or sets the logarithm base.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters">
            <summary>
            Represents a set of properties used to create axis tickmarks.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.VisibleMinimum">
            <summary>
            Gets or sets the minimum tickmark value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.VisibleMaximum">
            <summary>
            Gets or sets the maximum tickmark value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.ActualMinimum">
            <summary>
            Gets or sets the actual minimum tickmark value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.ActualMaximum">
            <summary>
            Gets or sets the actual maximum tickmark value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.Resolution">
            <summary>
            Gets or sets the rendering resolution for the tickmarks.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.HasUserInterval">
            <summary>
            Specifies if the user has set a custom interval.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.UserInterval">
            <summary>
            Gets or sets the user-specified tickmark interval.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.IntervalOverride">
            <summary>
            Allows to override the interval returned by the axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.MinorCountOverride">
            <summary>
            Allows to override the number of minor lines returned by the axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.Mode">
            <summary>
            Gets or sets the category mode.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.Mode2GroupCount">
            <summary>
            Gets or sets the number of series with Mode2 category mode.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.Viewport">
            <summary>
            Gets or sets the chart's viewport.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.Window">
            <summary>
            Gets or sets the chart's window.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.IsInverted">
            <summary>
            Gets or sets whether the tickmarks are inverted.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.GetScaledValue">
            <summary>
            Gets or sets the function used to calculate the scaled value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.GetGroupCenter">
            <summary>
            Gets or sets the function used to calculate the group center for the series that use grouping.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TickmarkValuesInitializationParameters.GetUnscaledGroupCenter">
            <summary>
            Gets or sets the function used to calculate the unscaled group center for the series that use grouping.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VerticalAxisLabelPanel">
            <summary>
            Represents a panel control, containing vertical axis labels.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalAxisLabelPanel.BindExtent">
            <summary>
            Makes sure the extent is bound to the settings.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalAxisLabelPanel.CreateBoundsRectangles">
            <summary>
            Creates the bounds rectangles for the labels in the panel.
            </summary>
            <returns>A list of bounds rectangles.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalAxisLabelPanel.SetLabelRotationTransform(System.Windows.FrameworkElement,System.Double)">
            <summary>
            Sets the appropriate rotation transform on a label.
            </summary>
            <param name="label">The label to set.</param>
            <param name="angle">The angle to transform.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalAxisLabelPanel.ShouldHorizontalAlign">
            <summary>
            Returns true if horizontal alignment should be performed.
            </summary>
            <returns>True if horizontal alignment should be performed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.BrushScale">
            <summary>
            Represents a base class for brush scales.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BrushScale.#ctor">
            <summary>
            Creates a new instance of BrushScale class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BrushScale.Brushes_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the members of the brushes collection change.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BrushScale.GetBrush(System.Int32)">
            <summary>
            Gets a brush from the brushes collection by index.
            </summary>
            <param name="index"></param>
            <returns>Brush for a given index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BrushScale.GetInterpolatedBrush(System.Double)">
            <summary>
            Returns an interpolated brush value based on index.
            </summary>
            <param name="index">The index to use.</param>
            <returns>The interpolated brush.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BrushScale.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the property changed and updated events.
            </summary>
            <param name="name">The name of the property being changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BrushScale.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Called when a property is updated.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="propertyName">The name of the property that was changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.BrushScale.Brushes">
            <summary>
            Gets the brushes collection used by this scale.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.BrushScale.PropertyChanged">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.BrushScale.PropertyUpdated">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.BubbleMarkerManager">
            <summary>
            This class is responsible for creating and managing the markers of a bubble series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.MarkerManagerBase">
            <summary>
            Base class for managing markers for a data series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerManagerBase.#ctor(System.Func{System.Object,Infragistics.Controls.Charts.Marker},System.Func{System.Int32,System.Object},System.Action{System.Collections.Generic.IDictionary{System.Object,Infragistics.Controls.Charts.OwnedPoint}},System.Func{System.Windows.Point[]},System.Func{System.Collections.Generic.IList{System.Int32}})">
            <summary>
            MarkerManagerBase constructor.
            </summary>
            <param name="provideMarkerStrategy">The function used to provide marker objects given a data item.</param>
            <param name="provideItemStrategy">The function used to provide a data item given its index.</param>
            <param name="removeUnusedMarkers">The action used to remove unused markers.</param>
            <param name="getItemLocationsStrategy">The function used to get all marker locations.</param>
            <param name="activeMarkerIndexesStrategy">The function used to return the indexes of all active markers.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerManagerBase.WinnowMarkers(System.Collections.Generic.IDictionary{System.Object,Infragistics.Controls.Charts.OwnedPoint},System.Int32,System.Windows.Rect,System.Windows.Rect,System.Double)">
            <summary>
            Filter out markers that should not be visible.
            </summary>
            <param name="markers">A dictionary containing the locations of all markers.</param>
            <param name="maximumMarkers">The maximum number of markers which can be displayed.</param>
            <param name="windowRect">A rectangle representing the scroll window.  Rectangle coordinates are based on the range of zero to one.</param>
            <param name="viewportRect">A rectangle representing the viewport, in device coordinates.</param>
            <param name="currentResolution">The current Series Resolution.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerManagerBase.Render(System.Collections.Generic.IDictionary{System.Object,Infragistics.Controls.Charts.OwnedPoint},System.Boolean)">
            <summary>
            Renders the given markers.
            </summary>
            <param name="markers">A dictionary containing the locations of all markers.</param>
            <param name="lightweight">Whether or not to enable a lower-fidelity rendering mode with better performance.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerManagerBase.ActiveFirstKeys(System.Collections.Generic.Dictionary{System.Int32,Infragistics.Controls.Charts.MarkerManagerBucket},System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates a list of indices sorted with priority items in front.
            </summary>
            <param name="buckets">The buckets in context.</param>
            <param name="keys">The keys of all buckets in context.</param>
            <returns>The given keys, sorted with priority items first.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerManagerBase.SelectMarkerItems(System.Int32,System.Collections.Generic.Dictionary{System.Int32,Infragistics.Controls.Charts.MarkerManagerBucket},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Selects a given number of marker buckets, and adds them to a given list of items.
            </summary>
            <param name="numToSelect">The count of buckets to select.</param>
            <param name="buckets">All buckets in context.</param>
            <param name="keys">All available keys.</param>
            <param name="markerItems">The list of items to add selected markers to.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerManagerBase.GetVisibleItems(System.Windows.Rect,System.Windows.Rect,System.Collections.Generic.IList{System.Windows.Point},System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets only the visible items and adds them to the given list.
            </summary>
            <param name="windowRect">The WindowRect in context.</param>
            <param name="viewportRect">The Viewport in context.</param>
            <param name="itemLocations">The locations of all items in context.</param>
            <param name="visibleItems">The list to add all visible items to.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerManagerBase.GetBuckets(System.Windows.Rect,System.Collections.Generic.List{System.Int32},System.Double,System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Groups visible items into relevant buckets, based on the viewport size and resolution.
            </summary>
            <param name="viewportRect">The Viewport in context.</param>
            <param name="visibleItems">A list of the indices of all visible markers.</param>
            <param name="resolution">The Resolution in context.</param>
            <param name="itemLocations">A list of the locations of all markers.</param>
            <returns>A Dictionary containing the buckets.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerManagerBase.GetItemLocationsStrategy">
            <summary>
            The function used to get all marker locations.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerManagerBase.ProvideMarkerStrategy">
            <summary>
            The function used to provide marker objects given a data item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerManagerBase.RemoveUnusedMarkers">
            <summary>
            The action used to remove unused markers.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerManagerBase.ProvideItemStrategy">
            <summary>
            The function used to provide a data item given its index.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerManagerBase.ActiveMarkerIndexesStrategy">
            <summary>
            The function used to return the indexes of all active markers.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleMarkerManager.#ctor(System.Func{System.Object,Infragistics.Controls.Charts.Marker},System.Func{System.Int32,System.Object},System.Action{System.Collections.Generic.IDictionary{System.Object,Infragistics.Controls.Charts.OwnedPoint}},System.Func{System.Windows.Point[]},System.Func{System.Collections.Generic.IList{System.Int32}})">
            <summary>
            creates a new instance of the BubbleMarkerManager.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleMarkerManager.WinnowMarkers(System.Collections.Generic.IDictionary{System.Object,Infragistics.Controls.Charts.OwnedPoint},System.Int32,System.Windows.Rect,System.Windows.Rect,System.Double)">
            <summary>
            Filter out markers that should not be visible.
            </summary>
            <param name="markers">A dictionary containing the locations of all markers.</param>
            <param name="maximumMarkers">The maximum number of markers which can be displayed.</param>
            <param name="windowRect">A rectangle representing the scroll window.  Rectangle coordinates are based on the range of zero to one.</param>
            <param name="viewportRect">A rectangle representing the viewport, in device coordinates.</param>
            <param name="currentResolution">The current Series Resolution.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleMarkerManager.Render(System.Collections.Generic.IDictionary{System.Object,Infragistics.Controls.Charts.OwnedPoint},System.Boolean)">
            <summary>
            Renders the given markers.
            </summary>
            <param name="markers">A dictionary containing the locations of all markers.</param>
            <param name="lightweight">Whether or not to enable a lower-fidelity rendering mode with better performance.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleMarkerManager.RadiusColumn">
            <summary>
            Gets or sets which column from the datasource is used to map radius values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleMarkerManager.ActualRadiusColumn">
            <summary>
            Gets or sets the list of scaled radius values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleMarkerManager.ActualMarkers">
            <summary>
            Gets or sets the list of displayed markers.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.BubbleSeries">
            <summary>
            Represents a XamDataChart bubble series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ScatterBase">
            <summary>
            Represents the base class for all XamDataChart scatter series
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.MarkerSeries">
            <summary>
            Represents the base class for series containing markers.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Series">
            <summary>
            Represents the base class for all XamDataChart series.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Infragistics.Controls.Charts.Series.VisibilityProxyPropertyName" -->
        <member name="F:Infragistics.Controls.Charts.Series.SyncLinkPropertyName">
            <summary>
            The name of the SyncLink property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.SeriesViewerPropertyName">
            <summary>
            The name of the SeriesViewer property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.ItemsSourcePropertyName">
            <summary>
            The name of the ItemsSource property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.FastItemsSourcePropertyName">
            <summary>
            The name of the FastItemsSource property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.IndexPropertyName">
            <summary>
            The name of the Index property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.ResolutionPropertyName">
            <summary>
            Property name for the Resolution property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.ActualBrushPropertyName">
            <summary>
            Property name for the ActualBrush property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.TrendLineDashArrayPropertyName">
            <summary>
            Property name for the TrendLineDashArray property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.TrendLineTypePropertyName">
            <summary>
            Property name for the TrendLineType property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.TrendLinePeriodPropertyName">
            <summary>
            Property name for the TrendLinePeriod property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.TrendLineBrushPropertyName">
            <summary>
            Property name for the TrendLineBrush property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.TrendLineActualBrushPropertyName">
            <summary>
            Property name for the TrendLineActualBrush property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.TrendLineThicknessPropertyName">
            <summary>
            Property name for the TrendLineThickness property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.TrendLineDashCapPropertyName">
            <summary>
            Property name for the TrendLineDashCap property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.TrendLineZIndexPropertyName">
            <summary>
            Property name for the TrendLineZIndex property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.#ctor">
            <summary>
            Initializes a new instance of the Series class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.VisibilityProxyProperty">
            <summary>
            Identifies the VisibilityProxy dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.UseParentMarkerCanvas">
            <summary>
            Determines if the current series renders its markers to the MarkerCanvas of the parent series. 
            Ensures that StackedFragmentSeries don't reparent the MarkerCanvas.
            </summary>
            <returns>Whether or not to use parent series marker canvas.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.GetItemIndex(System.Windows.Point)">
            <summary>
            Gets the item item index associated with the specified world position
            </summary>
            <returns>Item index or -1 if no item is assocated with the specified world position.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises PropertyChanged and/or PropertyUpdated events if any listeners have been registered.
            </summary>
            <param name="propertyName">Name of property whos value changed.</param>
            <param name="oldValue">Property value before change.</param>
            <param name="newValue">Property value after change.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.Item(System.Object,System.Windows.Point)">
            <summary>
            When overriden in a derived class gives the opportunity to define how the data source item
            for a given set of mouse coordinates is fetched.
            </summary>
            <param name="sender">The element the mouse is over.</param>
            <param name="point">The mouse coordinates for which to fetch the item.</param>
            <returns>The retrieved item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ScrollIntoView(System.Object)">
            <summary>
            Requests that the provided item should be brought into view if possible.
            </summary>
            <param name="item">The item to attempt to bring into view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.RenderSeries(System.Boolean)">
            <summary>
            Renders the series.
            </summary>
            <param name="animate">True if the change should be animated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.RenderSeriesOverride(System.Boolean)">
            <summary>
            Renders the series.
            </summary>
            <param name="animate">Whether or not to transition smoothly from the previous state of the series.</param>
            <remarks>
            The animate parameter is relevant only for series which implement transitions.  Not all series in the DataChart support this behavior.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.RenderThumbnail(System.Windows.Rect,Infragistics.Controls.Charts.RenderSurface)">
            <summary>
            Renders the thumbnail for the OPD pane.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="surface">The render target.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.GetViewInfo(System.Windows.Rect@,System.Windows.Rect@)">
            <summary>
            Gets the view info for the series.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="windowRect">The window to use.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ValidateSeries(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ClearRendering(System.Boolean)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ClearAndAbortIfInvalid">
            <summary>
            Clears the series and aborts rendering if the series is not valid.
            </summary>
            <returns>True if rendering should be aborted.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ClearAndAbortIfInvalid(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the series and aborts rendering if the series is not valid.
            </summary>
            <returns>True if rendering should be aborted.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.WindowRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            When overridden in a derived class, is invoked whenever the series window rectangle 
            is changed.
            </summary>
            <param name="oldWindowRect">Old window rectangle in normalised world coordinates.</param>
            <param name="newWindowRect">New window rectangle in normalised world coordinates.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ViewportRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            When overridden in a derived class, is invoked whenever the series viewport rectangle 
            is changed.
            </summary>
            <param name="oldViewportRect">Old viewport rectangle in device coordinates.</param>
            <param name="newViewportRect">New viewport rectangle in device coordinates.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.NotifyThumbnailDataChanged">
            <summary>
            Called to notify that the data has changed and the thumbnail may need to refresh.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.NotifyThumbnailAppearanceChanged">
            <summary>
            Called to notify that the appearance has changed and the thumbnail may need to refresh
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.SeriesViewer_SeriesCollectionChanged">
            <summary>
            Listener for the owner chart's series collection.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.SeriesViewer_PropertyUpdated">
            <summary>
            Listener for the owner chart's property updated.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.SeriesViewer_WindowRectChanged">
            <summary>
            Listener for the onwer chart's window rect changed
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.FastItemsSourceProperty">
            <summary>
            Identifies the FastItemsSource dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            Method called whenever a change is made to the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.LegendProperty">
            <summary>
            Identifies the Legend dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.GetLegendItem">
            <summary>
            Gets the legend item control to use.
            </summary>
            <returns>The legend item control to use.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.LegendItemVisibilityProperty">
            <summary>
            Identifies the LegendItemVisibility Dependency Property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.LegendItemBadgeTemplateProperty">
            <summary>
            Identifies the LegendItemBadgeTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.LegendItemTemplateProperty">
            <summary>
            Identifies the LegendItemTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.DiscreteLegendItemTemplateProperty">
            <summary>
            Identifies the DiscreteLegendItemTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.IndexProperty">
            <summary>
            Identifies the Index dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.DoUpdateIndexedProperties">
            <summary>
            Makes sure the indexed properties are updated.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.UpdateIndexedProperties">
            <summary>
            Updates properties that are based on the index of the series in the series collection.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.TransitionEasingFunctionProperty">
            <summary>
            Identifies the TransitionEasingFunction dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.TransitionDurationProperty">
            <summary>
            Identifies the TransitionDuration dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.ResolutionProperty">
            <summary>
            Identifies the Resolution dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.BrushProperty">
            <summary>
            Identifies the Brush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.ActualBrushProperty">
            <summary>
            Identifies the ActualBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.OutlineProperty">
            <summary>
            Identifies the Outline dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.ActualOutlineProperty">
            <summary>
            Identifies the ActualOutline dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.LineJoinProperty">
            <summary>
            Identifies the Stroke dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.MiterLimitProperty">
            <summary>
            Identifies the Stroke dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.ThicknessProperty">
            <summary>
            Identifies the Thickness dependency property.
            </summary>
            <remarks>
            There is a problematic behavior in Silverlight 3 where changing the StrokeThickness property of many shapes is not reflected at runtime.  If changing this property seems to have no effect, please use the workaround of making another change to the UI to force a refresh.
            <code>
            theChart.RenderTransform = new RotateTransform() { Angle = 0.01 };
            Dispatcher.BeginInvoke( () => theChart.RenderTransform = null);
            </code>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.DashCapProperty">
            <summary>
            Identifies the DashCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.DashArrayProperty">
            <summary>
            Identifies the StrokeDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.ToolTipProperty">
            <summary>
            Identifies the ToolTip dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.InvalidateAxes">
            <summary>
            Method called when the series has changed in a way that will invalidate the range and rendering of its axes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.WMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the weighted moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The weighted moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.EMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the exponential moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The exponential moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.MMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the modified moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The modified moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.CMA(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the cumulative moving average.
            </summary>
            <param name="sequence">Sequence to average.</param>
            <returns>The cumulative moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.SMA(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the simple moving average.
            </summary>
            <remarks>
            The first period values are calculated by accumulation and may be considered invalid.
            </remarks>
            <param name="sequence">Sequence to average.</param>
            <param name="period">Average period.</param>
            <returns>The simple moving average.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.MovingSum(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates a moving sum over a sequence with a given period.
            </summary>
            <param name="sequence">The sequence for which to calculate the moving sum.</param>
            <param name="period">The period to use for the calculation.</param>
            <returns>The moving sum values.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.STDEV(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the standard deviation of a sequence with a given period.
            </summary>
            <param name="sequence">The sequence for which to calculate the standard deviation values.</param>
            <param name="period">The period to use for the calculation.</param>
            <returns>The sequence of calculated standard deviaton values.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ToEnumerableRange(System.Func{System.Int32,System.Double},System.Int32,System.Int32)">
            <summary>
            Evaluates the given epression over a range of indexes.
            </summary>
            <param name="expression">The expression to evaluate.</param>
            <param name="start">The starting index.</param>
            <param name="length">The ending index.</param>
            <returns>The stream of values.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ToEnumerable(System.Func{System.Int32,System.Double},System.Int32)">
            <summary>
            Evaluates the given expression over a range of indexes starting at 0.
            </summary>
            <param name="expression">The expression to evaluate.</param>
            <param name="length">The number of items to evaluate.</param>
            <returns>The stream of values.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.StartCapProperty">
            <summary>
            Identifies the StartCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Series.EndCapProperty">
            <summary>
            Identifies the EndCap dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.FindActualLegend">
            <summary>
            Finds the legend to use for this series.
            </summary>
            <returns>The legend that should be used.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.DeregisterForAxis(Infragistics.Controls.Charts.Axis)">
            <summary>
            Deregisters this series with an axis.
            </summary>
            <param name="axis">The axis to deregister from.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.RegisterForAxis(Infragistics.Controls.Charts.Axis)">
            <summary>
            Registers this series with an axis.
            </summary>
            <param name="axis">The axis to register with.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.RegisterDoubleColumn(System.String)">
            <summary>
            Registers a double column for the assigned ItemsSource.
            </summary>
            <param name="memberPath">The property path from which to retrieve the column values.</param>
            <returns>The column reference.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.RegisterIntColumn(System.String)">
            <summary>
            Registers an int column for the assigned ItemsSource.
            </summary>
            <param name="memberPath">The property path from which to retrieve the column values.</param>
            <returns>The column reference.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.RegisterObjectColumn(System.String)">
            <summary>
            Registers an object column for the assigned ItemsSource.
            </summary>
            <param name="memberPath">The property path from which to retrieve the column values.</param>
            <returns>The column reference.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ExportVisualData">
            <summary>
            Exports visual information about the series for use by external tools and functionality.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Series.ExportVisualDataOverride(Infragistics.Controls.Charts.VisualData.SeriesVisualData)">
            <summary>
            Called when the series should provide visual data for export.
            </summary>
            <param name="svd">The container for the visual data to export.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.View">
            <summary>
            Gets or sets the view associated with the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.RootCanvas">
            <summary>
            Gets the root canvas for the current series object.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.Series.PropertyChanged">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.Series.PropertyUpdated">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.SyncLink">
            <summary>
            Sets or sets the synchroniation link associated with the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.SeriesViewer">
            <summary>
            Gets the Chart for the current chart series object.
            </summary>
            <remarks>
            The chart property is maintained internally by the series and may 
            lag behind the visual hierarchy defined in xaml or code.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.Chart">
            <summary>
            Gets the chart associated with the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.ItemsSource">
            <summary>
            Gets or sets the ItemsSource property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.FastItemsSource">
            <summary>
            Gets or sets the ItemsSource property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <para>
            The FastItemsSource is a proxy which handles caching, conversion and
            weak event listeners.
            </para>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.Legend">
            <summary>
            Gets or sets a legend for the current series object.
            </summary>
            <remarks>
            If the Legend property is not set, the series will use the setting according to the parent XamDataChart's Legend property.
            <para>
            This is generally expressed as an element name binding, as the Legend must exist at some other position in the layout. 
            This property only indicates which Legend to use and will not alone cause the legend to be visible.
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.LegendItem">
            <summary>
            Gets the legend item associated with the current series object.
            </summary>
            <remarks>
            The legend item control is created according to the LegendItemTemplate on-demand by 
            the series object itself.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.ActualLegend">
            <summary>
            Gets the effective legend associated with the current series object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.LegendItemVisibility">
            <summary>
            Gets or sets the legend item visibility for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.LegendItemBadgeTemplate">
            <summary>
            Gets or sets the LegendItemBadgeTemplate property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The legend item badge is created according to the LegendItemBadgeTemplate on-demand by 
            the series object itself.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.LegendItemTemplate">
            <summary>
            Gets or sets the LegendItemTemplate property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The legend item control content is created according to the LegendItemTemplate on-demand by 
            the series object itself.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.DiscreteLegendItemTemplate">
            <summary>
            Gets or sets the DiscreteLegendItemTemplate property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The legend item control content is created according to the DiscreteLegendItemTemplate on-demand by 
            the series object itself.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.Index">
            <summary>
            Gets the Index property.
            </summary>
            <remarks>
            This property is used to support the XamDataChart infrastructure, and is not intended to be set by application code.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.TransitionEasingFunction">
            <summary>
            Gets or sets the EasingFunction used to morph the current series.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.TransitionDuration">
            <summary>
            Gets or sets the duration of the current series's morph.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.Resolution">
            <summary>
            Gets or sets the current series object's rendering resolution.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.Title">
            <summary>
            Gets or sets the Title property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The legend item control is created according to the Title on-demand by 
            the series object itself.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.Brush">
            <summary>
            Gets or sets the brush to use for the series.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.ActualBrush">
            <summary>
            Gets the effective brush for the current series object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.Outline">
            <summary>
            Gets or sets the brush to use for the outline of the series.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.</remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.ActualOutline">
            <summary>
            Gets the effective outline for the current series object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.LineJoin">
            <summary>
            Gets or sets the brush that specifies current series object's line join style.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.MiterLimit">
            <summary>
            Gets or sets the current series object's outline miter limit.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.Thickness">
            <summary>
            Gets or sets the width of the current series object's line thickness.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.DashCap">
            <summary>
            Gets or sets the PenLineCap enumeration value that specifies how the current series object's dash ends are drawn. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.DashArray">
            <summary>
            Gets or sets a collection of Double values that indicate the pattern of dashes and gaps that
            is used to outline the current series object. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.ToolTip">
            <summary>
            Gets or sets the ToolTip for the current series object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.StartCap">
            <summary>
            Gets or sets the style of the starting point of any lines or polylines representing this series.
            </summary>
            <remarks>
            Not every series type has a line at which it would be appropriate to display a start cap, so this property does not affect every series type.  LineSeries, for example, is affected by StartCap, but ColumnSeries is not.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.EndCap">
            <summary>
            Gets or sets the style of the end point of any lines or polylines representing this series.
            </summary>
            <remarks>
            Not every series type has a line at which it would be appropriate to display an end cap, so this property does not affect every series type.  LineSeries, for example, is affected by EndCap, but ColumnSeries is not.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.ToolTipFormatter">
            <summary>
            Gets the tooltip formatter associated with the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.LastHoverItem">
            <summary>
            Keeps track of the most recent item that was hovered over. Used for the mouse leave event.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Series.Viewport">
            <summary>
            Gets the viewport associated with the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerSeries.MarkerTypeProperty">
            <summary>
            Identifies the MarkerType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerSeries.MarkerTemplateProperty">
            <summary>
            Identifies the MarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerSeries.ActualMarkerTemplateProperty">
            <summary>
            Identifies the ActualMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerSeries.NullMarkerTemplate">
            <summary>
            The marker template to use if the MarkerTemplate property is set to null.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerSeries.MarkerBrushProperty">
            <summary>
            Identifies the MarkerBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerSeries.ActualMarkerBrushProperty">
            <summary>
            Identifies the ActualMarkerBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerSeries.MarkerOutlineProperty">
            <summary>
            Identifies the MarkerOutline dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerSeries.ActualMarkerOutlineProperty">
            <summary>
            Identifies the ActualMarkerOutline dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerSeries.MarkerStyleProperty">
            <summary>
            Identifies the MarkerStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerSeries.UseLightweightMarkersProperty">
            <summary>
            Identifies the UseLightweightMarkers dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeries.ShouldDisplayMarkers">
            <summary>
            Returns true if the markers should be displayed.
            </summary>
            <returns>True if the marker should be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeries.GetMarkerTemplatePropertyName(Infragistics.Controls.Charts.MarkerType)">
            <summary>
            Provides the property name of the marker template on the chart that should be bound to based on a MarkerType enumeration value.
            </summary>
            <param name="markerType">The enumeration value to map to a property name.</param>
            <returns>The proeprty name.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeries.ResolveMarkerType(Infragistics.Controls.Charts.Series,Infragistics.Controls.Charts.MarkerType)">
            <summary>
            Returnes the marker type that should be used for a series.
            </summary>
            <param name="series">The series to resolve for.</param>
            <param name="seriesMarkerType">The input marker type.</param>
            <returns>The resolved marker type.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeries.UpdateIndexedProperties">
            <summary>
            Updates properties that are based on the index of the series in the series collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeries.ExportVisualDataOverride(Infragistics.Controls.Charts.VisualData.SeriesVisualData)">
            <summary>
            Exports visual information about the series for use by external tools and functionality.
            </summary>
            <param name="svd">The data container.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerSeries.MarkerType">
            <summary>
            Gets or sets the marker type for the current series object.
            </summary>
            <remarks>
            If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerSeries.MarkerTemplate">
            <summary>
            Gets or sets the MarkerTemplate for the current series object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerSeries.ActualMarkerTemplate">
            <summary>
            Gets the effective marker template for the current series object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerSeries.MarkerBrush">
            <summary>
            Gets or sets the brush that specifies how the current series object's marker interiors are painted.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerSeries.ActualMarkerBrush">
            <summary>
            Gets the effective marker brush for the current series object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerSeries.MarkerOutline">
            <summary>
            Gets or sets the brush that specifies how the current series object's marker outlines are painted.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerSeries.ActualMarkerOutline">
            <summary>
            Gets the effective marker outline for the current series object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerSeries.MarkerStyle">
            <summary>
            Gets or sets the Style to be used for the markers.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerSeries.UseLightweightMarkers">
            <summary>
            Gets or sets the marker type for the current series object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.#ctor">
            <summary>
            ScatterBase constructor.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.XAxisProperty">
            <summary>
            Identifies the XAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.YAxisProperty">
            <summary>
            Identifies the YAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.XMemberPathProperty">
            <summary>
            Identifies the XMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.YMemberPathProperty">
            <summary>
            Identifies the YMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.TrendLineTypeProperty">
            <summary>
            Identifies the TrendLineType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.TrendLineBrushProperty">
            <summary>
            Identifies the TrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.ActualTrendLineBrushProperty">
            <summary>
            Identifies the ActualTrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.TrendLineThicknessProperty">
            <summary>
            Identifies the TrendLineThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.TrendLineDashCapProperty">
            <summary>
            Identifies the TrendLineDashCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.TrendLineDashArrayProperty">
            <summary>
            Identifies the TrendLineDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.TrendLinePeriodProperty">
            <summary>
            Identifies the TrendLinePeriod dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.MarkerCollisionAvoidanceProperty">
            <summary>
            Identifies the MarkerCollisionAvoidance dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.TrendLineZIndexProperty">
            <summary>
            Identifies the TrendLineZIndex dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.MaximumMarkersProperty">
            <summary>
            Identifies the MaximumMarkers dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.InvalidateAxes">
            <summary>
            Invalidates the axes associated with the series.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterBase.ErrorBarSettingsProperty">
            <summary>
            Identifies the ErrorBarSettings dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.MustReact(System.String,Infragistics.FastItemsSourceEventAction)">
            <summary>
            Returns true if the series should react to a data change.
            </summary>
            <param name="propertyName">The name of the property being changed.</param>
            <param name="action">The action on the items source.</param>
            <returns>True if the series should react.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.GetItemIndex(System.Windows.Point)">
            <summary>
            Gets the index of the item that resides at the provided world coordinates.
            </summary>
            <param name="world">The world coordinates of the requested item.</param>
            <returns>The requested item's index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the series to display the item for the specified data item.
            </summary>
            <remarks>
            The series is scrolled by the minimum amount required to place the specified data item within
            the central 80% of the visible axis.
            </remarks>
            <param name="item">The data item (item) to scroll to.</param>
            <returns>True if the specified item could be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.ViewportRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the viewport changing.
            </summary>
            <param name="oldViewportRect">The old viewport rectangle.</param>
            <param name="newViewportRect">The new viewport rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.WindowRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the chart's window changing.
            </summary>
            <param name="oldWindowRect">The old window rectangle of the chart.</param>
            <param name="newWindowRect">The new window rectangle of the chart.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.GetViewInfo(System.Windows.Rect@,System.Windows.Rect@)">
            <summary>
            Gets the view info for the series.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="windowRect">The window to use.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.RenderSeriesOverride(System.Boolean)">
            <summary>
            Renders the series.
            </summary>
            <param name="animate">True if the change should be animated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.UpdateIndexedProperties">
            <summary>
            Updates properties that are based on the index of the series in the series collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBase.RenderThumbnail(System.Windows.Rect,Infragistics.Controls.Charts.RenderSurface)">
            <summary>
            Renders the thumbnail for the OPD.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="surface">The render target.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.XAxis">
            <summary>
            Gets or sets the effective x-axis for the current object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.YAxis">
            <summary>
            Gets or sets the effective y-axis for the current object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.XMemberPath">
            <summary>
            Gets or sets the value mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.XColumn">
            <summary>
            The IFastItemColumn containing X values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.YMemberPath">
            <summary>
            Gets or sets the value mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.YColumn">
            <summary>
            The IFastItemColumn containing Y values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.TrendLineType">
            <summary>
            Gets or sets the trend type for the current scatter series.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.TrendLineBrush">
            <summary>
            Gets or sets the brush to use to draw the trend line.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.ActualTrendLineBrush">
            <summary>
            Gets the effective TrendLineBrush for this series.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.TrendLineThickness">
            <summary>
            Gets or sets the thickness of the current scatter series object's trend line.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.TrendLineDashCap">
            <summary>
            Gets or sets the PenLineCap enumeration value that specifies how the current
            scatter series object's trend line dash ends are drawn. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.TrendLineDashArray">
            <summary>
            Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
            is used to draw the trend line for the current scatter series object. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.TrendLinePeriod">
            <summary>
            Gets or sets the moving average period for the current scatter series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The typical, and initial, value for trend line period is 7.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.MarkerCollisionAvoidance">
            <summary>
            The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.TrendLineZIndex">
            <summary>
            Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.MaximumMarkers">
            <summary>
            Gets or sets the maximum number of markerItems displayed by the current series.
            <para>If more than the specified number of markerItems are visible, the series will automatically
            choose a representative set.</para>
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterBase.ErrorBarSettings">
            <summary>
            The error bar settings for the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeries.#ctor">
            <summary>
            Initializes a new instance of the BubbleSeries class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.BubbleSeries.RadiusMemberPathProperty">
            <summary>
            Identifies the RadiusMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.BubbleSeries.RadiusScaleProperty">
            <summary>
            Identifies the RadiusScale dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.BubbleSeries.LabelMemberPathProperty">
            <summary>
            Identifies the LabelMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.BubbleSeries.FillMemberPathProperty">
            <summary>
            Identifies the FillMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.BubbleSeries.FillScaleProperty">
            <summary>
            Identifies the FillScale dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeries.RenderFrame(Infragistics.Controls.Charts.ScatterFrame,Infragistics.Controls.Charts.ScatterBaseView)">
            <summary>
            Render the current bubble series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeries.PrepareFrame(Infragistics.Controls.Charts.ScatterFrame,Infragistics.Controls.Charts.ScatterBaseView)">
            <summary>
            Prepare the current bubble series for rendering.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeries.GetLinearSize(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the a marker size for a given value based on a linear scale.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeries.GetLogarithmicSize(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the marker size for a given value based on a logarithmic scale.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeries.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeries.MustReact(System.String,Infragistics.FastItemsSourceEventAction)">
            <summary>
            Returns whether or not a property changed event should be raised for the given property name.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="action">DataSource event action</param>
            <returns>True if property changed event should be raised, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeries.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            Called when the underlying data changes.
            </summary>
            <param name="action">DataSource event action</param>
            <param name="position">Item index</param>
            <param name="count">Item count</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleSeries.InternalRadiusColumn">
            <summary>
            Gets the radius column from the datasource.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleSeries.RadiusMemberPath">
            <summary>
            Gets or sets the radius mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleSeries.RadiusColumn">
            <summary>
            The IFastItemColumn containing Radius values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleSeries.RadiusScale">
            <summary>
            Gets or sets the radius size scale for the bubbles.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleSeries.LabelMemberPath">
            <summary>
            Gets or sets the Label mapping property for the current series object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleSeries.LabelColumn">
            <summary>
            Gets or sets the data column used for labels.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleSeries.FillMemberPath">
            <summary>
            Gets or sets the fill mapping property for the current series object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleSeries.FillScale">
            <summary>
            Gets or sets the brush scale for the marker brush.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleSeries.FillColumn">
            <summary>
            Represents the column of fill values to use.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SeriesView">
            <summary>
            Represents the platform specific portion of a series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.#ctor(Infragistics.Controls.Charts.Series)">
            <summary>
            Constructs a SeriesView.
            </summary>
            <param name="model">The model to associate with the view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.OnInit">
            <summary>
            Called to initialize the view.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.OnTemplateProvided">
            <summary>
            Called when the template for the control has been provided.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.AttachUI(System.Windows.Controls.Canvas)">
            <summary>
            Called to attach ui of the view to the appropriate canvas.
            </summary>
            <param name="rootCanvas">The canvas to which to attach the view visuals.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.OnMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse enters the control.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.OnMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse moves over the control.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.OnMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse leaves the control.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.OnMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called wehn the left mouse button is depressed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.OnMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is released.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.OnLostMouseCapture(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse capture has been lost.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.ExportViewShapes(Infragistics.Controls.Charts.VisualData.SeriesVisualData)">
            <summary>
            Exports visual information about the series for use by external tools and functionality.
            </summary>
            <param name="svd">The data container.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesView.GetViewInfo(System.Windows.Rect@,System.Windows.Rect@)">
            <summary>
            Gets the view info for the series.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="windowRect">The window to use.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.SeriesView.Model">
            <summary>
            Gets or sets the model for the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SeriesView.ViewportCalculator">
            <summary>
            Gets or sets the calculator to use for the viewport calculations.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SeriesView.RootCanvas">
            <summary>
            Gets the root visual for the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SeriesView.MarkerCanvas">
            <summary>
            Gets the parent canvas for the current series object's markerItems.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SeriesView.Viewport">
            <summary>
            Gets the viewport for the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SeriesView.WindowRect">
            <summary>
            Gets the current zoom label for the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeriesView.MarkerCreate">
            <summary>
            Creates a marker object.
            </summary>
            <returns>The created marker.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeriesView.DoToAllMarkers(System.Action{Infragistics.Controls.Charts.Marker})">
            <summary>
            Perform an action on all markers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeriesView.UpdateMarkerTemplates">
            <summary>
            Updates the templates assigned to the markers.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeriesView.SetMarkerStyle(Infragistics.Controls.Charts.Marker)">
            <summary>
            Sets any available Marker style on the provided marker.
            </summary>
            <param name="marker">The marker to set the style for.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeriesView.MarkerActivate(Infragistics.Controls.Charts.Marker)">
            <summary>
            Activates a marker object from the pool.
            </summary>
            <param name="marker">The marker to activate.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeriesView.MarkerDisactivate(Infragistics.Controls.Charts.Marker)">
            <summary>
            Disactivates a marker from the pool.
            </summary>
            <param name="marker">The marker to disactivate.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerSeriesView.MarkerDestroy(Infragistics.Controls.Charts.Marker)">
            <summary>
            Destroys a marker from the pool.
            </summary>
            <param name="marker">The marker to destroy.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterBaseView.ClearRendering(System.Boolean)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeriesView.CreateMarkerSizes">
            <summary>
            Populates the list of actual marker radii based on the scaling algorithm.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BubbleSeriesView.SetMarkerColors">
            <summary>
            Sets a color on each bubble based on the existing color axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BubbleSeriesView.RadiusValues">
            <summary>
            Gets or sets the list of scaled radius values.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CustomPaletteBrushScale">
            <summary>
            Represents a brush scale that uses index-based brush selection mode.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CustomPaletteBrushScale.#ctor">
            <summary>
            Creates a new instance of the CustomPaletteBrushScale.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CustomPaletteBrushScale.BrushSelectionModeProperty">
            <summary>
            Identifies the BrushSelectionMode dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CustomPaletteBrushScale.GetBrush(System.Int32,System.Int32)">
            <summary>
            Returns calculated brush for the given index.
            </summary>
            <param name="index">Point index.</param>
            <param name="total">Total number of markers in the series.</param>
            <returns>Brush object at a specified index.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.CustomPaletteBrushScale.BrushSelectionMode">
            <summary>
            Gets or sets the brush selection mode.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SizeScale">
            <summary>
            Represents a scale that is used determine an object's size.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SizeScale.#ctor">
            <summary>
            Creates a new instance of SizeScale.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.SizeScale.MinimumValueProperty">
            <summary>
            Identifies the MinimumValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.SizeScale.MaximumValueProperty">
            <summary>
            Identifies the MaximumValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.SizeScale.IsLogarithmicProperty">
            <summary>
            Identifies the IsLogarithmic dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.SizeScale.LogarithmBaseProperty">
            <summary>
            Identifies the LogarithmBase dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SizeScale.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the property changed and updated events.
            </summary>
            <param name="name">The name of the property being changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SizeScale.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Handles property updates.
            </summary>
            <param name="sender">source object</param>
            <param name="propertyName">property name</param>
            <param name="oldValue">old property value</param>
            <param name="newValue">new property value</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.SizeScale.Series">
            <summary>
            Gets or sets the collection of series objects.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SizeScale.MinimumValue">
            <summary>
            Gets or sets the minimum value for this scale.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SizeScale.MaximumValue">
            <summary>
            Gets or sets the maximum value for this scale.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SizeScale.IsLogarithmic">
            <summary>
            Gets or sets whether the scale is logarithmic.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SizeScale.LogarithmBase">
            <summary>
            Gets or sets the logarithm base for this scale.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.SizeScale.PropertyChanged">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.SizeScale.PropertyUpdated">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ValueBrushScale">
            <summary>
            Represents a brush scale that uses value-based brush selection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueBrushScale.#ctor">
            <summary>
            Creates a new instance of the ValueBrushScale.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ValueBrushScale.MinimumValueProperty">
            <summary>
            Identifies the MinimumValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ValueBrushScale.MaximumValueProperty">
            <summary>
            Identifies the MaximumValue dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ValueBrushScale.IsLogarithmicProperty">
            <summary>
            Identifies the IsLogarithmic dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ValueBrushScale.LogarithmBaseProperty">
            <summary>
            Identifies the LogarithmBase dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueBrushScale.GetBrushByIndex(System.Int32,Infragistics.IFastItemColumn{System.Double})">
            <summary>
            Selects a brush from the brush collection by index.
            </summary>
            <param name="index">Index of the brush.</param>
            <param name="FillColumn">Datasource column used to calculate the brush scale.</param>
            <returns>Brush for a specified index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueBrushScale.GetBrushByValue(System.Double,Infragistics.IFastItemColumn{System.Double})">
            <summary>
            Selects a brush from the brush colleciton by value.
            </summary>
            <param name="value">Value used to get an interpolated brush.</param>
            <param name="FillColumn">Datasource column used to calculate the brush scale.</param>
            <returns>Brush for a specified value.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.ValueBrushScale.MinimumValue">
            <summary>
            Gets or sets the minimum value for this scale.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ValueBrushScale.MaximumValue">
            <summary>
            Gets or sets the maximum value for this scale.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ValueBrushScale.IsLogarithmic">
            <summary>
            Gets or sets whether the scale is logarithmic.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ValueBrushScale.LogarithmBase">
            <summary>
            Gets or sets the logarithm base for this scale.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.HorizontalAnchoredCategorySeries">
            <summary>
            Base class for anchored category series with a category x-axis and a numeric y-axis.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.AnchoredCategorySeries">
            <summary>
            Represents the base class for all XamDataChart anchored category/value series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CategorySeries">
            <summary>
            Represents the base class for XamDataChart category series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.#ctor">
            <summary>
            Initialises a default CategorySeries object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.InvalidateAxes">
            <summary>
            Invalidates the axes associated with the series.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategorySeries.ErrorBarSettingsProperty">
            <summary>
            Identifies the ErrorBarSettings dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.WindowRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the chart's window changing.
            </summary>
            <param name="oldWindowRect">The old window rectangle of the chart.</param>
            <param name="newWindowRect">The new window rectangle of the chart.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.ViewportRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the viewport changing.
            </summary>
            <param name="oldViewportRect">The old viewport rectangle.</param>
            <param name="newViewportRect">The new viewport rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.GetItemIndexSorted(System.Windows.Point)">
            <summary>
            Gets the index of the item based on world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The index of the item for the specified coordinates.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.GetItemIndex(System.Windows.Point)">
            <summary>
            Gets the index of the item based on world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The index of the item for the specified coordinates.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.RenderSeriesOverride(System.Boolean)">
            <summary>
            Renders the series visual.
            </summary>
            <param name="animate">True if the change should be animated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.GetMode2Index">
            <summary>
            Gets the mode 2 index for the series.
            </summary>
            <returns>The mode 2 index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategorySeries.RenderThumbnail(System.Windows.Rect,Infragistics.Controls.Charts.RenderSurface)">
            <summary>
            Renders the thumbnail for the OPD pane.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="surface">The render target.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategorySeries.ErrorBarSettings">
            <summary>
            The error bar settings for the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.#ctor">
            <summary>
            Initializes a new instance of the AnchoredCategorySeries class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredCategorySeries._valueMemberPath">
            <summary>
            String path to the value column.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredCategorySeries.ValueMemberPathProperty">
            <summary>
            Identifies the ValueMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineTypeProperty">
            <summary>
            Identifies the TrendLineType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineBrushProperty">
            <summary>
            Identifies the TrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredCategorySeries.ActualTrendLineBrushProperty">
            <summary>
            Identifies the ActualTrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineThicknessProperty">
            <summary>
            Identifies the TrendLineThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineDashCapProperty">
            <summary>
            Identifies the TrendLineDashCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineDashArrayProperty">
            <summary>
            Identifies the TrendLineDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLinePeriodProperty">
            <summary>
            Identifies the TrendLinePeriod dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineZIndexProperty">
            <summary>
            Identifies the TrendLineZIndex dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the series to display the item for the specified data item.
            </summary>
            <remarks>
            The series is scrolled by the minimum amount required to place the specified data item within
            the central 80% of the visible axis.
            </remarks>
            <param name="item">The data item (item) to scroll to.</param>
            <returns>True if the specified item could be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.UpdateIndexedProperties">
            <summary>
            Updates properties that are based on the index of the series in the series collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.Item(System.Object,System.Windows.Point)">
            <summary>
            Returns the item that is found at the given point.
            </summary>
            <param name="sender">The origin of the mouse interaction.</param>
            <param name="point">The point to search for the item near.</param>
            <returns>The found item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredCategorySeries.ExportVisualDataOverride(Infragistics.Controls.Charts.VisualData.SeriesVisualData)">
            <summary>
            Exports visual information about the series for use by external tools and functionality.
            </summary>
            <param name="svd">The data container.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredCategorySeries.ValueMemberPath">
            <summary>
            Gets or sets the value mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredCategorySeries.ValueColumn">
            <summary>
            Gets the FastItemColumn representing the mapped values in the items source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineType">
            <summary>
            Gets or sets the trend type for the current series object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineBrush">
            <summary>
            Gets or sets the brush to use to draw the trend line.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredCategorySeries.ActualTrendLineBrush">
            <summary>
            Gets the effective TrendLineBrush for this series.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineThickness">
            <summary>
            Gets or sets the thickness of the current series object's trend line.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineDashCap">
            <summary>
            Gets or sets the PenLineCap enumeration value that specifies how the current
            series object's trend line dash ends are drawn. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineDashArray">
            <summary>
            Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
            is used to draw the trend line for the current series object. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLinePeriod">
            <summary>
            Gets or sets the trend line period for the current series.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The typical, and initial, value for trend line period is 7.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredCategorySeries.TrendLineZIndex">
            <summary>
            Gets or sets the trend line Z index for the current series.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The trend line renders over the series and markers by default, lower this value to shift it to the background.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredCategorySeries.CachedValueMemberPath">
            <summary>
            A cached version of ValueMemberPath.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HorizontalAnchoredCategorySeries.XAxisProperty">
            <summary>
            Identifies the XAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HorizontalAnchoredCategorySeries.YAxisProperty">
            <summary>
            Identifies the YAxis dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAnchoredCategorySeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalAnchoredCategorySeries.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            Called when the data assigned to the series has been updated.
            </summary>
            <param name="action">The action that was performed on the data.</param>
            <param name="position">The position that was updated in the data.</param>
            <param name="count">The number of items that were affected by the data change.</param>
            <param name="propertyName">The name of the property that has been changed on a data item.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.HorizontalAnchoredCategorySeries.XAxis">
            <summary>
            Gets or sets the effective x-axis for this series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HorizontalAnchoredCategorySeries.YAxis">
            <summary>
            Gets or sets the effective y-axis for this series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HorizontalAnchoredCategorySeries.CachedXAxis">
            <summary>
            A cached value for the x axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HorizontalAnchoredCategorySeries.CachedYAxis">
            <summary>
            A cached value for the y axis.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VerticalAnchoredCategorySeries">
            <summary>
            Represents a vertically laid out category based series.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.VerticalAnchoredCategorySeries.XAxisProperty">
            <summary>
            Identifies the ActualXAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.VerticalAnchoredCategorySeries.YAxisProperty">
            <summary>
            Identifies the ActualYAxis dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalAnchoredCategorySeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VerticalAnchoredCategorySeries.XAxis">
            <summary>
            Gets or sets the effective x-axis for the current CategorySeries object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VerticalAnchoredCategorySeries.YAxis">
            <summary>
            Gets or sets the effective y-axis for the current CategorySeries object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.AreaSeries">
            <summary>
            Represents a XamDataChart area series.
            <para>Displays trend over time or ordered categories.</para>
            <para>Useful when there are many data points and the order is important.</para>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AreaSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AreaSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AreaSeries.#ctor">
            <summary>
            Initializes a new instance of the AreaSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AreaSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.AreaSeries.UnknownValuePlottingProperty">
            <summary>
            Identifies the UnknownValuePlotting dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AreaSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.AreaSeries.UnknownValuePlotting">
            <summary>
            Determines how unknown values will be plotted on the chart.
            </summary>
            <remarks>
            Null and Double.NaN are two examples of unknown values.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Charts.BarSeries">
            <summary>
            Represents a XamDataChart bar series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.#ctor">
            <summary>
            Initializes a new instance of the BarSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.BarSeries.RadiusXProperty">
            <summary>
            Identifies the RadiusX dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.BarSeries.RadiusYProperty">
            <summary>
            Identifies the RadiusY dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.GetMode2Index">
            <summary>
            Returns the mode 2 index to use for the series.
            </summary>
            <returns>The mode 2 index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the series to display the item for the specified data item.
            </summary>
            <remarks>
            The series is scrolled by the minimum amount required to place the specified data item within
            the central 80% of the visible axis.
            </remarks>
            <param name="item">The data item (item) to scroll to.</param>
            <returns>True if the specified item could be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.GetItemIndex(System.Windows.Point)">
            <summary>
            Gets the index of the item that resides at the provided world coordinates.
            </summary>
            <param name="world">The world coordinates of the requested item.</param>
            <returns>The requested item's index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarSeries.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.BarSeries.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.
            <para>
            This is a dependency property.
            </para>
            </summary> 
        </member>
        <member name="P:Infragistics.Controls.Charts.BarSeries.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryBucketCalculator.CalculateBuckets(System.Double)">
            <summary>
            Calculates the bucket values to use based on the desired resolution.
            </summary>
            <param name="resolution">The resolution desired.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryBucketCalculator.FirstBucket">
            <summary>
            Gets or sets the first visible bucket of the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryBucketCalculator.LastBucket">
            <summary>
            Gets or sets the last visible bucket of the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryBucketCalculator.BucketSize">
            <summary>
            Gets or sets the bucket size of the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarBucketCalculator.CalculateBuckets(System.Double)">
            <summary>
            Calculates the bucket values to use based on the desired resolution.
            </summary>
            <param name="resolution">The resolution desired.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryLineRasterizer.RasterizePolyline(System.Windows.Shapes.Polyline,System.Windows.Shapes.Polyline,System.Windows.Shapes.Polyline,System.Windows.Shapes.Polyline,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},Infragistics.Clipper,System.Int32,System.Double)">
            <summary>
            Renders into a potentially chunky polyline
            </summary>
            <param name="polyline0">Bottom polyline</param>
            <param name="polyline1">Top polyline</param>
            <param name="polygon0">Bottom of center polygon</param>
            <param name="polygon1">Top of center polygon</param>
            <param name="count">Number of points</param>
            <param name="x0">Bottom points x coordinate indexed left to right</param>
            <param name="y0">Bottom points y coordinate indexed left to right</param>
            <param name="x1">Top points x coordinate indexed right to left</param>
            <param name="y1">Top points y coordinate indexed right to left</param>
            <param name="clipper">Clipper to use</param>
            <param name="bucketSize">Current bucketsize of the series</param>
            <param name="resolution">Current resolution of the chart</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryLineRasterizer.IsSortingAxis">
            <summary>
            True, if the series uses a date time axis; false otherwise.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ColumnSeries">
            <summary>
            Represents a XamDataChart column series.
            <para>Compare values across categories by using vertical rectangles.</para>
            <para>Use it when the order of categories is not important or for displaying
            item counts such as a histogram.</para>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the ColumnSeries class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ColumnSeries.RadiusXProperty">
            <summary>
            Identifies the RadiusX dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ColumnSeries.RadiusYProperty">
            <summary>
            Identifies the RadiusY dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.ColumnSeries.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
            <para>
            This is a dependency property.
            </para>
            </summary>  
        </member>
        <member name="P:Infragistics.Controls.Charts.ColumnSeries.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.LineSeries">
            <summary>
            Represents a XamDataChart line series.
            <para>Displays trend over time or ordered categories.</para>
            <para>Useful when there are many data points and the order is important.</para>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LineSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.LineSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.LineSeries.#ctor">
            <summary>
            Initializes a new instance of the LineSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LineSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.LineSeries.UnknownValuePlottingProperty">
            <summary>
            Identifies the UnknownValuePlotting dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LineSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.LineSeries.UnknownValuePlotting">
            <summary>
            Determines how unknown values will be plotted on the chart.
            </summary>
            <remarks>
            Null and Double.NaN are two examples of unknown values.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Charts.PointSeries">
            <summary>
            Represents a XamDataChart point series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PointSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PointSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PointSeries.#ctor">
            <summary>
            Initializes a new instance of the PointSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PointSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.RangeAreaSeries">
            <summary>
            Represents a XamDataChart range area series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.HorizontalRangeCategorySeries">
            <summary>
            Base class for ranged category series with a category X-axis and a numeric Y-axis.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.RangeCategorySeries">
            <summary>
            Represents the base class for all XamDataChart ranged category/value series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeCategorySeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeCategorySeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeCategorySeries.#ctor">
            <summary>
            Initialises a default, empty RangeCategorySeries object.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.RangeCategorySeries.LowMemberPathProperty">
            <summary>
            Identifies the LowMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.RangeCategorySeries.HighMemberPathProperty">
            <summary>
            Identifies the HighMemberPath dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeCategorySeries.RasterizePolygon(System.Windows.Shapes.Polyline,System.Windows.Shapes.Polygon,System.Windows.Shapes.Polyline,System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Renders into a floating polygon
            </summary>
            <param name="polyline0"></param>
            <param name="polygon01"></param>
            <param name="polyline1"></param>
            <param name="count">Number of points</param>
            <param name="x0">Bottom points x coordinate indexed left to right</param>
            <param name="y0">Bottom points y coordinate indexed left to right</param>
            <param name="x1">Top points x coordinate indexed right to left</param>
            <param name="y1">Top points y coordinate indexed right to left</param>        
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeCategorySeries.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the series to display the item for the specified data item.
            </summary>
            <remarks>
            The series is scrolled by the minimum amount required to place the specified data item within
            the central 80% of the visible axis.
            </remarks>
            <param name="item">The data item (item) to scroll to.</param>
            <returns>True if the specified item could be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeCategorySeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeCategorySeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeCategorySeries.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeCategorySeries.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeCategorySeries.RenderThumbnail(System.Windows.Rect,Infragistics.Controls.Charts.RenderSurface)">
            <summary>
            Renders the thumbnail for the OPD pane.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="surface">The render target.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.RangeCategorySeries.LowMemberPath">
            <summary>
            Gets or sets the value mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RangeCategorySeries.LowColumn">
            <summary>
            Gets the column representing the Low values for the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RangeCategorySeries.HighMemberPath">
            <summary>
            Gets or sets the value mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RangeCategorySeries.HighColumn">
            <summary>
            Gets the column representing the High values of the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HorizontalRangeCategorySeries.XAxisProperty">
            <summary>
            Identifies the ActualXAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HorizontalRangeCategorySeries.YAxisProperty">
            <summary>
            Identifies the ActualYAxis dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalRangeCategorySeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.HorizontalRangeCategorySeries.XAxis">
            <summary>
            Gets or sets the effective x-axis for the current CategorySeries object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HorizontalRangeCategorySeries.YAxis">
            <summary>
            Gets or sets the effective y-axis for the current CategorySeries object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeAreaSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeAreaSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeAreaSeries.#ctor">
            <summary>
            Initializes a new instance of the RangeAreaSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeAreaSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.RangeColumnSeries">
            <summary>
            Represents a XamDataChart range column series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeColumnSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeColumnSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the AreaSeries class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.RangeColumnSeries.RadiusXProperty">
            <summary>
            Identifies the RadiusX dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.RangeColumnSeries.RadiusYProperty">
            <summary>
            Identifies the RadiusY dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RangeColumnSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.RangeColumnSeries.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RangeColumnSeries.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SplineAreaSeries">
            <summary>
            Represents a XamDataChart spline area series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SplineSeriesBase">
            <summary>
             Represents the base class for all XamDataChart spline series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineSeriesBase.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineSeriesBase.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.SplineSeriesBase.SplineTypeProperty">
            <summary>
            Identifies the SplineType dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineSeriesBase.SplineFitMustBeRecalculated">
            <summary>
            Indicate that the spline fit must be recalculated.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineSeriesBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineSeriesBase.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            Overriden in derived classes when they want to respond to the bound data being updated.
            </summary>
            <param name="action">The type of action performed on the data source.</param>
            <param name="position">The position the change began at.</param>
            <param name="count">The number of items affected by the change.</param>
            <param name="propertyName">The name of the property changed, if applicable.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.SplineSeriesBase.UColumn">
            <summary>
            Represents the spline fit data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SplineSeriesBase.SplineType">
            <summary>
            Gets or sets the type of spline to be rendered.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineAreaSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineAreaSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineAreaSeries.#ctor">
            <summary>
            Initializes a new instance of the SplineAreaSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineAreaSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.SplineSeries">
            <summary>
            Represents a XamDataChart spline series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineSeries.#ctor">
            <summary>
            Initializes a new instance of the SplineSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.StepAreaSeries">
            <summary>
            Represents a XamDataChart step area series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StepAreaSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StepAreaSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.StepAreaSeries.#ctor">
            <summary>
            Initializes a new instance of the StepAreaSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StepAreaSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.StepLineSeries">
            <summary>
            Represents a XamDataChart step line series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StepLineSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StepLineSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.StepLineSeries.#ctor">
            <summary>
            Initializes a new instance of the StepLineSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StepLineSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StepLineSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.WaterfallSeries">
            <summary>
            Represents a XamDataChart waterfall column series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.WaterfallSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.WaterfallSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.WaterfallSeries.#ctor">
            <summary>
            Initializes a new instance of the WaterfallSeries class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.WaterfallSeries.NegativeBrushProperty">
            <summary>
            Identifies the Fill dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.WaterfallSeries.RadiusXProperty">
            <summary>
            Identifies the RadiusX dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.WaterfallSeries.RadiusYProperty">
            <summary>
            Identifies the RadiusY dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.WaterfallSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.WaterfallSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.WaterfallSeries.NegativeBrush">
            <summary>
            Gets or sets the brush to use for negative portions of the series.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.WaterfallSeries.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
            </summary> 
        </member>
        <member name="P:Infragistics.Controls.Charts.WaterfallSeries.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.XamDataChart">
            <summary>
            Represents a chart area containing axes, series, an optional legend and other hosted content.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.SeriesViewer">
            <summary>
            A control for viewing series.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.WindowRectPropertyName">
            <summary>
            The property name of the WindowRect property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.ActualWindowRectPropertyName">
            <summary>
            The property name of the ActualWindowRect property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.#ctor">
            <summary>
            Instantiates an instance of a SeriesViewer.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.RemoveDataSource(System.Object)">
            <summary>
            Removes the DataSource setting for the given argument.
            </summary>
            <param name="item">The object to remove the datasource from; typically a Series or Axis.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.GetBrushByIndex(System.Int32)">
            <summary>
            Gets the appropriate color for a series based on index.
            </summary>
            <param name="index">The index to use.</param>
            <returns>The color to use.</returns>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.GetOutlineByIndex(System.Int32)">
            <summary>
            Gets the appropriate color for an outline based on index.
            </summary>
            <param name="index">The index to use.</param>
            <returns>The color to use.</returns>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.GetMarkerBrushByIndex(System.Int32)">
            <summary>
            Gets the appropriate color for a marker based on index.
            </summary>
            <param name="index">The index to use.</param>
            <returns>The color to use.</returns>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.GetMarkerOutlineByIndex(System.Int32)">
            <summary>
            Gets the appropriate color for a marker outline based on index.
            </summary>
            <param name="index">The index to use.</param>
            <returns>The color to use.</returns>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.LegendProperty">
            <summary>
            Identifies the Legend dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the propertychanged event.
            </summary>
            <param name="name">The name of the property that has been changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.ComputeEffectiveViewport(System.Windows.Rect)">
            <summary>
            Method used to calculate the effective viewport bounds.
            </summary>
            <param name="viewportRect">The actual viewport bounds.</param>
            <returns>The effective viewport bounds.</returns>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.UpdateAxisViewport(Infragistics.Controls.Charts.Axis)">
            <summary>
            Set the given Axis viewport equal to the SeriesViewer viewport.
            </summary>
            <param name="axis"></param>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.WindowRectProperty">
            <summary>
            Identifies the WindowRect dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.ProcessPlotAreaSizeChanged(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Called so that the viewer can reconcile a plot area size change.
            </summary>
            <param name="oldGridAreaRect">The old size of the plot area.</param>
            <param name="newGridAreaRect">The new size of the plot area.</param>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.HorizontalZoomableProperty">
            <summary>
            Identifies the HorizontalZoomable dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.VerticalZoomableProperty">
            <summary>
            Identifies the VerticalWindowMode dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.OnKeyDown(System.Windows.Input.Key)">
            <summary>
            Called when a key is pressed down.
            </summary>
            <param name="key">The key that has been pressed.</param>
            <returns>True if the event is handled by the series viewer.</returns>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.OnContactStarted(System.Windows.Point)">
            <summary>
            Called when a contact has started at a location.
            </summary>
            <param name="pt">The location of the contact.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.OnContactMoved(System.Windows.Point)">
            <summary>
            Called when a contact is moved to a new position.
            </summary>
            <param name="pt">The new position of the contact.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.OnContactCompleted(System.Windows.Point)">
            <summary>
            Called when a contact is completed.
            </summary>
            <param name="pt">The point of contact.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.CrosshairNotify(System.Windows.Point)">
            <summary>
            Called to notify of the crosshair point changing.
            </summary>
            <param name="notificationPoint">The new crosshair point.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.WindowNotify(System.Windows.Rect)">
            <summary>
            Called to notify of the window rectangle changing.
            </summary>
            <param name="windowRect">The new window rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.PreviewNotify(System.Windows.Rect)">
            <summary>
            Called to notify of the preview rectangle changing.
            </summary>
            <param name="previewRect">The new preview rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.ResetZoom">
            <summary>
            Resets the zoom level to default.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.WindowRectMinWidthProperty">
            <summary>
            Identifies the WindowRectMinWidth property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.CrosshairVisibilityProperty">
            <summary>
            Identifies the CrosshairVisibility dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.PlotAreaBorderBrushProperty">
            <summary>
            Identifies the GridAreaBorderBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.PlotAreaBorderThicknessProperty">
            <summary>
            Identifies the GridAreaBorderThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.PlotAreaBackgroundProperty">
            <summary>
            Identifies the PlotAreaBackground dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.PlotAreaMinWidthProperty">
            <summary>
            Identifies the PlotAreaMinWidth dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.PlotAreaMinHeightProperty">
            <summary>
            Identifies the PlotAreaMinHeight dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning SeriesViewer. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.DragModifierProperty">
            <summary>
            Identifies the DragModifier dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.PanModifierProperty">
            <summary>
            Identifies the PanModifier dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.WindowPositionHorizontalProperty">
            <summary>
            Identifies the WindowPositionHorizontal dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.WindowPositionVerticalProperty">
            <summary>
            Identifies the WindowPositionVertical dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.WindowScaleHorizontalProperty">
            <summary>
            Identifies the WindowScaleHorizontal dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.WindowScaleVerticalProperty">
            <summary>
            Identifies the WindowScaleVertical dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.OnViewCreated(Infragistics.Controls.SeriesViewerView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.CrosshairLineStyleProperty">
            <summary>
            Identifies the CrosshairLineStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.PreviewPathStyleProperty">
            <summary>
            Identifies the PreviewPathStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.ToolTipStyleProperty">
            <summary>
            Identifies the ToolTipStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.ZoombarStyleProperty">
            <summary>
            Identifies the ZoombarStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.CircleMarkerTemplateProperty">
            <summary>
            Identifies the CircleMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.TriangleMarkerTemplateProperty">
            <summary>
            Identifies the TriangleMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.PyramidMarkerTemplateProperty">
            <summary>
            Identifies the PyramidMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.SquareMarkerTemplateProperty">
            <summary>
            Identifies the SquareMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.DiamondMarkerTemplateProperty">
            <summary>
            Identifies the DiamondMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.PentagonMarkerTemplateProperty">
            <summary>
            Identifies the PentagonMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.HexagonMarkerTemplateProperty">
            <summary>
            Identifies the HexagonMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.TetragramMarkerTemplateProperty">
            <summary>
            Identifies the TetragramMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.PentagramMarkerTemplateProperty">
            <summary>
            Identifies the PentagramMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.HexagramMarkerTemplateProperty">
            <summary>
            Identifies the HexagramMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewer.ToolTipInfoBoxStyleProperty">
            <summary>
            Identifies the ToolTipInfoBoxStyle dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.CalculateActualWindowRect">
            <summary>
            Called to calculate the actual window rectangle.
            </summary>
            <returns>The value which should be assigned to the ActualWindowRect property, based on a calculation on the WindowRect property.</returns>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.Flush">
            <summary>
            Use to force the SeriesViewer to finish any deferred work before printing or evaluating its visual.
            </summary>
            <remarks>
            This should only be called if the visual of the SeriesViewer needs to be synchronously saved or evaluated. 
            Calling this method too often will hinder the performance of the SeriesViewer.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.UseFixedAspectZoom">
            <summary>
            Boolean method indicating whether or not this SeriesViewer should be zoomed only with a fixed aspect ratio.
            </summary>
            <returns>False.</returns>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.RegisterBackgroundContent(System.Windows.DependencyObject,System.Action{System.Boolean})">
            <summary>
            Registers the given DependencyObject as background content.
            </summary>
            <param name="content">The DependencyObject to register as background content.</param>
            <param name="refresh">An action to be invoked each time the background content is being refreshed.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.UnRegisterBackgroundContent(System.Windows.DependencyObject)">
            <summary>
            Unregisters the given DependencyObject as background content.
            </summary>
            <param name="content">The DependencyObject to unregister as background content.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewer.DeferBackgroundRefresh">
            <summary>
            Calls for a deferred refresh to the SeriesViewer's background.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.Series">
            <summary>
            Gets the current SeriesViewer object's child Series. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ChartContentManager">
            <summary>
            Helps manage the SeriesViewer content.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.CrosshairPoint">
            <summary>
            Gets or sets the cross hair point (in world coordinates)
            </summary>
            <remarks>
            Either or both of the crosshair point's X and Y may be set to double.NaN, in which
            case the relevant crosshair line is hidden.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.Legend">
            <summary>
            Gets or sets which legend to use for all series in this SeriesViewer, unless otherwise specified by the Series.Legend property.
            </summary>
            <remarks>
            This is generally expressed as an element name binding, as the Legend must exist at some other position in the layout.
            This property only indicates which Legend to use and will not alone cause the legend to be visible.
            </remarks>
        </member>
        <member name="E:Infragistics.Controls.SeriesViewer.PropertyChanged">
            <summary>
            Notifies clients that a property value has changed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.SeriesViewer.PropertyUpdated">
            <summary>
            Occurs when the value of a property is updated.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.SeriesViewer.SeriesMouseLeftButtonDown">
            <summary>
            Occurs when the left mouse button is pressed while the mouse pointer is over a Series.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.SeriesViewer.SeriesMouseLeftButtonUp">
            <summary>
            Occurs when the left mouse button is released while the mouse pointer is over a Series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ViewportRect">
            <summary>
            Gets the viewport rectangle associated with the SeriesViewer, the physical dimensions of the plot area.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.EffectiveViewport">
            <summary>
            Gets the EffectiveViewport rectangle, representing the effective viewport area after margins have been subtracted.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.WindowRect">
            <summary>
            A rectangle representing the portion of the SeriesViewer currently in view.
            </summary>
            <remarks>
            A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.HorizontalZoomable">
            <summary>
            Gets or sets the current SeriesViewer's horizontal zoomability.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.VerticalZoomable">
            <summary>
            Gets or sets the current SeriesViewer's vertical zoomability.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.Anchor">
            <summary>
            anchor (mouse down or multitouch) in grid area coordinates.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.SeriesViewer.WindowRectChanged">
            <summary>
            Occurs just after the current SeriesViewer's window rectangle is changed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.SeriesViewer.ActualWindowRectChanged">
            <summary>
            Raised when the actual window rectangle of the SeriesViewer changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.SeriesViewer.GridAreaRectChanged">
            <summary>
            Occurs just after the current SeriesViewer's grid area rectangle is changed.
            </summary>
            <remarks>
            The grid area may change as the result of the SeriesViewer being resized, or
            of an axis being added or changing size, possibly in another SeriesViewer.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.WindowRectMinWidth">
            <summary>
            Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
            Decrease this value if you want to allow for further zooming into the viewer.
            If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.SyncChannel">
            <summary>
            Sets or gets the Synchronization channel to use for the SeriesViewer.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ActualSyncLink">
            <summary>
            Gets or sets the sync manager used to synchronize SeriesViewers.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.CrosshairVisibility">
            <summary>
            Gets or sets the current SeriesViewer's crosshair visibility override.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.CentralArea">
            <summary>
            The current SeriesViewer object's central area in its top-level panel.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.PlotAreaBorderBrush">
            <summary>
            Gets or sets the brush used as the border for the current SeriesViewer object's plot area.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.PlotAreaBorderThickness">
            <summary>
            Gets or sets the thickness of the border for the current SeriesViewer object's plot area.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.PlotAreaBackground">
            <summary>
            Gets or sets the brush used as the background for the current SeriesViewer object's plot area.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.PlotAreaMinWidth">
            <summary>
            Gets or sets the minimum width used to size the plot area.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.PlotAreaMinHeight">
            <summary>
            Gets or sets the minimum Height used to size the plot area.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.DragModifier">
            <summary>
            Gets or sets the current SeriesViewer's DragModifier property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.PanModifier">
            <summary>
            Gets or sets the current SeriesViewer's PanModifier property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.PreviewRect">
            <summary>
            Gets or sets the preview rectangle.
            </summary>
            <remarks>
            The preview rectangle may be set to Rect.Empty, in which case the visible preview
            strokePath is hidden.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.WindowPositionHorizontal">
            <summary>
            A number between 0 and 1 determining the position of the horizontal scroll.
            </summary>
            <remarks>
            This property is effectively a shortcut to the X position of the WindowRect property.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.WindowPositionVertical">
            <summary>
            A number between 0 and 1 determining the position of the vertical scroll.
            </summary>
            <remarks>
            This property is effectively a shortcut to the Y position of the WindowRect property.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.WindowScaleHorizontal">
            <summary>
            A number between 0 and 1 determining the scale of the horizontal zoom.
            </summary>
            <remarks>
            This property is effectively a shortcut to the Width of the WindowRect property.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.WindowScaleVertical">
            <summary>
            A number between 0 and 1 determining the scale of the vertical zoom.
            </summary>
            <remarks>
            This property is effectively a shortcut to the Height of the WindowRect property.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ContentPresenter">
            <summary>
            Gets the current SeriesViewer's root ContentPresenter.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.SeriesViewer.RefreshCompleted">
            <summary>
            Raised when the SeriesViewer's processing for an update has completed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.CrosshairLineStyle">
            <summary>
            Gets or sets the style used to display the current SeriesViewer's crosshair lines.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.PreviewPathStyle">
            <summary>
            Gets or sets the style used to display the window preview shadow.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ToolTipStyle">
            <summary>
            Gets or sets the current SeriesViewer's ToolTipStyle property.
            </summary>
            <remarks>
            The ToolTipStyle property defines the marker template used for
            series with a MarkerStyleType of Circle.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ZoombarStyle">
            <summary>
            Gets or sets the style used to display the current SeriesViewer object's zoom bars.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.CircleMarkerTemplate">
            <summary>
            Gets or sets the template to use for circle markers on the SeriesViewer.
            </summary>
            <remarks>
            Defines the marker template used for
            series with a marker type of circle.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.TriangleMarkerTemplate">
            <summary>
            Gets or sets the template to use for triangle markers on the SeriesViewer.
            </summary>
            <remarks>
            Defines the marker template used for
            series with a marker type of triangle.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.PyramidMarkerTemplate">
            <summary>
            Gets or sets the template to use for pyramid markers on the SeriesViewer.
            </summary>
            <remarks>
            Defines the marker template used for
            series with a marker type of pyramid.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.SquareMarkerTemplate">
            <summary>
            Gets or sets the template to use for square markers on the SeriesViewer.
            </summary>
            <remarks>
            Defines the marker template used for
            series with a marker type of square.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.DiamondMarkerTemplate">
            <summary>
            Gets or sets the template to use for diamond markers on the SeriesViewer.
            </summary>
            <remarks>
            Defines the marker template used for
            series with a marker type of diamond.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.PentagonMarkerTemplate">
            <summary>
            Gets or sets the template to use for pentagon markers on the SeriesViewer.
            </summary>
            <remarks>
            Defines the marker template used for
            series with a marker type of pentagon.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.HexagonMarkerTemplate">
            <summary>
            Gets or sets the template to use for hexagon markers on the SeriesViewer.
            </summary>
            <remarks>
            Defines the marker template used for
            series with a marker type of hexagon.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.TetragramMarkerTemplate">
            <summary>
            Gets or sets the template to use for tetragram markers on the SeriesViewer.
            </summary>
            <remarks>
            Defines the marker template used for
            series with a marker type of tetragram.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.PentagramMarkerTemplate">
            <summary>
            Gets or sets the template to use for pentragram markers on the SeriesViewer.
            </summary>
            <remarks>
            Defines the marker template used for
            series with a marker type of pentagram.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.HexagramMarkerTemplate">
            <summary>
            Gets or sets the template to use for hexagram markers on the SeriesViewer.
            </summary>
            <remarks>
            Defines the marker template used for
            series with a marker type of hexagram.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ToolTipInfoBoxStyle">
            <summary>
            Gets or sets the current SeriesViewer's ToolTipInfoBoxStyle property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ActualWindowRect">
            <summary>
            Gets the actual value of the window rectangle, which represents the current zoom level.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ActualWindowPositionHorizontal">
            <summary>
            A number between 0 and 1 determining the position of the horizontal scroll.
            </summary>
            <remarks>
            This property is effectively a shortcut to the Left of the ActualWindowRect property.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ActualWindowPositionVertical">
            <summary>
            A number between 0 and 1 determining the position of the vertical scroll.
            </summary>
            <remarks>
            This property is effectively a shortcut to the Top of the ActualWindowRect property.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ActualWindowScaleHorizontal">
            <summary>
            A number between 0 and 1 determining the scale of the horizontal zoom.
            </summary>
            <remarks>
            This property is effectively a shortcut to the Width of the ActualWindowRect property.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewer.ActualWindowScaleVertical">
            <summary>
            A number between 0 and 1 determining the scale of the vertical zoom.
            </summary>
            <remarks>
            This property is effectively a shortcut to the Height of the ActualWindowRect property.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamDataChart.#ctor">
            <summary>
            Initializes a default, empty XamDataChart object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamDataChart.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamDataChart.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Called when a property value has been updated.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="propertyName">The name of the updated property.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamDataChart.IsSquareProperty">
            <summary>
            Identifies the IsSquare dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamDataChart.GridModeProperty">
            <summary>
            Identifies the GridMode dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamDataChart.BrushesProperty">
            <summary>
            Identifies the Brushes dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamDataChart.MarkerBrushesProperty">
            <summary>
            Identifies the MarkerBrushes dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamDataChart.OutlinesProperty">
            <summary>
            Identifies the Outlines dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamDataChart.MarkerOutlinesProperty">
            <summary>
            Identifies the MarkerOutlines dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamDataChart.OnCreateAutomationPeer">
            <summary>
            Called when the automation peer has been created.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamDataChart.GetBrushByIndex(System.Int32)">
            <summary>
            Gets a brush based on a series index.
            </summary>
            <param name="index">The series index.</param>
            <returns>The brush based on the provided index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamDataChart.GetMarkerBrushByIndex(System.Int32)">
            <summary>
            Gets the appropriate marker color to use based on the series index.
            </summary>
            <param name="index">The index to use.</param>
            <returns>The color to use.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamDataChart.GetMarkerOutlineByIndex(System.Int32)">
            <summary>
            Gets the appropriate marker outline color to use based on the series index.
            </summary>
            <param name="index">The index to use.</param>
            <returns>The color to use.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamDataChart.GetOutlineByIndex(System.Int32)">
            <summary>
            Gets the appropriate outline color based on the series index.
            </summary>
            <param name="index">The index to use.</param>
            <returns>The color to use.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamDataChart.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamDataChart.OnViewCreated(Infragistics.Controls.SeriesViewerView)">
            <summary>
            Called when the view for the chart is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamDataChart.PlotAreaBackgroundContentProperty">
            <summary>
            Identifies the PlotAreaBackgroundContent dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamDataChart.ExportVisualData">
            <summary>
            Returns the chart visuals expressed as a ChartVisualData object.
            </summary>
            <returns>A ChartVisualData object representing the current chart visuals.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamDataChart.IsSquare">
            <summary>
            Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamDataChart.GridMode">
            <summary>
            Gets or sets the GridMode property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamDataChart.Brushes">
            <summary>
            Gets or sets the Brushes property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The brushes property defines the palette from which automatically assigned series brushes are selected.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamDataChart.MarkerBrushes">
            <summary>
            Gets or sets the MarkerBrushes property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The brushes property defines the palette from which automatically assigned series brushes are selected.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamDataChart.Outlines">
            <summary>
            Gets or sets the Outlines property.
            </summary>
            <remarks>
            The outlines property defines the palette from which automatically assigned series outlines are selected.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamDataChart.MarkerOutlines">
            <summary>
            Gets or sets the MarkerOutlines property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The brushes property defines the palette from which automatically assigned series brushes are selected.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamDataChart.Axes">
            <summary>
            Gets the current Chart object's child DataChartAxes.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamDataChart.GridZIndex">
            <summary>
            Gets the z index to use for the grid visuals.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamDataChart.SeriesZIndex">
            <summary>
            Gets the z index to use for the series visuals.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamDataChart.PlotAreaBackgroundContent">
            <summary>
            Gets or sets the FrameworkElement used as the background for the current Chart object's grid area.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.SeriesViewerView">
            <summary>
            The platfrom specific view for a series viewer.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.#ctor(Infragistics.Controls.SeriesViewer)">
            <summary>
            Constructs a new instance of the SeriesViewerView.
            </summary>
            <param name="model">The SeriesViewer model to associate with the view.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.RemoveAxis(Infragistics.Controls.Charts.Axis)">
            <summary>
            Removes an axis from the view.
            </summary>
            <param name="axis">The axis to remove.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.RemoveLabelPanel(Infragistics.Controls.Charts.Axis)">
            <summary>
            Removes a label panel from the view. 
            </summary>
            <param name="axis">The axis for which to remove the label panel.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.AttachAxis(Infragistics.Controls.Charts.Axis)">
            <summary>
            Attaches and axis to the view.
            </summary>
            <param name="axis">The axis to attach.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.AddLabelPanel(Infragistics.Controls.Charts.Axis)">
            <summary>
            Adds a label panel to the view.
            </summary>
            <param name="axis">The axis for which to add the label panel.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.CancelMouseInteractions">
            <summary>
            Cancels any pending mouse interaction with the plot area.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.SeriesAttached(Infragistics.Controls.Charts.Series)">
            <summary>
            Returns if a series is attached to the view.
            </summary>
            <param name="series">The series in question.</param>
            <returns>True is the seris is attached.</returns>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.AttachSeries(Infragistics.Controls.Charts.Series)">
            <summary>
            Attaches a series to the view.
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.CompleteMouseCapture">
            <summary>
            Completes the mouse capture held on the plot area.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.CreateLayout">
            <summary>
            Called to create the visual layout for the view.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.FocusChart">
            <summary>
            Focuses the chart element.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.PlotAreaCaptureMouse">
            <summary>
            Makes the plot area capture the mouse.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.HideDragPath">
            <summary>
            Hides the drag path.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.ShowDragPath">
            <summary>
            Makes the drag path visible.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.SetDefaultCursor">
            <summary>
            Sets the PlotArea's cursor to null, which effectively sets it to the system default cursor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.GoToIdleState">
            <summary>
            Transitions the view to the idle state.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.SetHandCursor">
            <summary>
            Sets the hand cursor for the view.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.HideTooltip">
            <summary>
            Hides the tooltip.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.GoToDraggingVisualState">
            <summary>
            Transitions to the dragging visual state.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.GoToPanningVisualState">
            <summary>
            Transitions to the panning visual state.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.UpdateDragPath(System.Windows.Rect)">
            <summary>
            Updates the path for the drag rectangle.
            </summary>
            <param name="rect">The new rectangle to user.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.UpdateVerticalCrosshair(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Updates the positioning of the vertical crosshair.
            </summary>
            <param name="x1">The first x coordinate for the crosshair.</param>
            <param name="y1">The first y coordinate for the crosshair.</param>
            <param name="x2">The second x coordinate for the crosshair.</param>
            <param name="y2">The second y coordinate for the crosshair.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.ShowVerticalCrosshair">
            <summary>
            Makes the vertical crosshair visible.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.HideVerticalCrosshair">
            <summary>
            Hides the vertical crosshair.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.UpdateInfoBoxXTranslation(System.Double)">
            <summary>
            Moves the info box.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.UpdateHorizontalCrosshair(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Updates the position of the horizontal crosshair.
            </summary>
            <param name="x1">The first x coordinate for the crosshair.</param>
            <param name="y1">The first y coordinate for the crosshair.</param>
            <param name="x2">The second x coordinate for the crosshair.</param>
            <param name="y2">The second y coordinate for the crosshair.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.ShowHorizontalCrosshair">
            <summary>
            Makes the horizontal crosshair visible.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.HideHorizontalCrosshair">
            <summary>
            Hides the horizontal crosshair.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.HidePreviewPath">
            <summary>
            Hides the preivew path.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.UpdatePreviewPath(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Upates the preview path.
            </summary>
            <param name="viewport">The viewport rectangle.</param>
            <param name="previewRect">The preview rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.ShowPreviewPath">
            <summary>
            Makes the preview path visible.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.OnInit">
            <summary>
            Called to initialize the view.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.ZoombarsSupported">
            <summary>
            Boolean indicating whether or not zoombars are supported by this SeriesViewer.
            </summary>
            <returns>True.</returns>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.OnTemplateProvided">
            <summary>
            Called when the template is provided.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewerView.dragPath">
            <summary>
            Path used to display the user's drag rectangle. The strokePath is used to display the
            precise rectangle dragged by the user which may or may not correspond to the preview
            area or anything else.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewerView.horizontalCrosshair">
            <summary>
            Line used to display the horizontal crosshair.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewerView.verticalCrosshair">
            <summary>
            Line used to display the vertical crosshair.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.RemoveSeries(Infragistics.Controls.Charts.Series)">
            <summary>
            Called when a series should be removed.
            </summary>
            <param name="series">The series to remove.</param>
        </member>
        <member name="F:Infragistics.Controls.SeriesViewerView._tooltipInfoBoxRelatedElement">
            <summary>
            Element used to show the tooltip in a fixed horizontal position.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.PlotArea_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Listener for the grid area's mouse enter event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.PlotArea_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Listener for the grid area's mouse leave event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.PlotArea_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Listener for the grid area's left button down event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.PlotArea_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Listener for the grid area's mouse move event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.PlotArea_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Listener for the grid area's left button up event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.Chart_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Listener for the chart area's key down event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.SeriesViewerView.PlotArea_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Listener for the grid area's size changed event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewerView.SeriesPanel">
            <summary>
            Gets the panel in which series are layed out.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewerView.PlotAreaViewport">
            <summary>
            Gets the viewport of the plot area.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewerView.CurrentModifiers">
            <summary>
            Represents the keyboard modifiers that are currently held down.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewerView.VisualStateTarget">
            <summary>
            Gets the target for visual state transitions.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewerView.Model">
            <summary>
            Sets or gets the model.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewerView.PlotAreaBorder">
            <summary>
            The current Chart object's grid area border.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewerView.PlotArea">
            <summary>
            The current Chart object's plot area.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewerView.PlotAreaBackgroundPresenter">
            <summary>
            Gets the background content presenter.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewerView.Detail">
            <summary>
            The canvas containing preview path, drag path, crosshairs.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.SeriesViewerView.GridPanel">
            <summary>
            Gets the panel associated with the grid elements.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ChartCollection">
            <summary>
            Represents an observable collection of Chart objects.
            </summary>
            <remarks>
            It is not possible to clear the contents of a ChartCollection collection; the Chart
            objects must be removed one at a time.
            <para>
            Changing the name of a Chart will generate a collection changed (Replace) event.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChartCollection.#ctor">
            <summary>
            Initializes a default, empty data ChartCollection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChartCollection.ClearItems">
            <summary>
            Clears the contained items of the collection, but provides a preview of the occurrance 
            in the form of the CollectionResetting event.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.ChartCollection.CollectionResetting">
            <summary>
            Occurs just before the current chart collection contents are reset
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartCollection.Item(System.String)">
            <summary>
            Gets the first matching chart object by name.
            </summary>
            <param name="chartName"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.ChartAreaPanel">
            <summary>
            Represents a specialised panel used to layout the contents of Charts.
            </summary>
            <remarks>
            The ChartAreaPanel is used internally by the chart to handle the rather
            complicated layout of its central area, which requires collaboration between the owner
            chart and the other chart objects.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChartAreaPanel.#ctor(Infragistics.Controls.SeriesViewer)">
            <summary>
            Initializes an empty, default ChartAreaPanel
            </summary>
            <param name="chart">The owner chart object.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChartAreaPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChartAreaPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartAreaPanel.SeriesViewer">
            <summary>
            Gets the owner Chart for the current ChartAreaPanel object. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ChartContentManager._seriesList">
            <summary>
            This list maintains the order of the series, where the content dictionary does not.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChartToolTipManager.UpdateToolTip(System.Windows.Input.MouseEventArgs,System.Windows.FrameworkElement)">
            <summary>
            Updates the tooltip
            </summary>
            <param name="e">Mouse position</param>
            <param name="item">Framework Element that shows the tooltip</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataContext">
            <summary>
            Represents a DataContext for tooltips, markerItems, cursors and legend items
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.DataContext.SeriesProperty">
            <summary>
            Identifies the Series dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.DataContext.ItemProperty">
            <summary>
            Identifies the Item dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.DataContext.ItemBrushProperty">
            <summary>
            Identifies the ItemBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.DataContext.ActualItemBrushProperty">
            <summary>
            Identifies the ActualItemBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.DataContext.ItemLabelProperty">
            <summary>
            Identifies the ItemLabel dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.DataContext.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises PropertyChanged event for a specified property name.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="oldValue">Old property value</param>
            <param name="newValue">New property value</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.Series">
            <summary>
            Gets the current DataContext's series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.Item">
            <summary>
            Gets the current DataContext's item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.ItemBrush">
            <summary>
            Gets or sets the brush to use to color the item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.ActualItemBrush">
            <summary>
            Gets the calculated brush to use to color the item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataContext.ItemLabel">
            <summary>
            Gets or sets the item label for the current data context.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.DataContext.PropertyChanged">
            <summary>
            Raised when a property value changes.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.AxisItemDataContext">
            <summary>
            Represents a data context for an item on an axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisItemDataContext.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property which was changed.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisItemDataContext.Axis">
            <summary>
            Gets or sets the axis which owns this item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisItemDataContext.Item">
            <summary>
            Gets the current DataContext's item.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.AxisItemDataContext.PropertyChanged">
            <summary>
            Raised when a property value on this object changes.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.FunnelSliceDataContext">
            <summary>
            The data context that will be provided for a funnel slice.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FunnelSliceDataContext.ItemOutlineProperty">
            <summary>
            Identifies the ItemOutline dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FunnelSliceDataContext.ItemOutline">
            <summary>
            Gets or sets the Outline to use to color the item.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PieSliceDataContext">
            <summary>
            Represents a data context for a pie chart slice.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieSliceDataContext.SliceProperty">
            <summary>
            Identifies Slice dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieSliceDataContext.PercentValueProperty">
            <summary>
            Identifies the PercentValue dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieSliceDataContext.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises PropertyChanged event for a specified property name.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="oldValue">Old property value</param>
            <param name="newValue">New property value</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieSliceDataContext.Slice">
            <summary>
            Gets the current DataContext's pie slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieSliceDataContext.PercentValue">
            <summary>
            The percent value of the pie slice in context, proportional to the entire pie.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Marker">
            <summary>
            Represents a datapoint marker in a XamDataChart control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Marker.#ctor">
            <summary>
            Constructs a new Marker instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Marker.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Marker.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method invoked when the mouse pointer leaves this control.
            </summary>
            <param name="e">The MouseEventArgs in context.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.CollisionAvoidanceType">
            <summary>
            Enum defining methods of collision avoidance for data series markers.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CollisionAvoidanceType.None">
            <summary>
            Collision avoidance is disabled.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CollisionAvoidanceType.Omit">
            <summary>
            Items colliding with other items will be hidden from view.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CollisionAvoidanceType.Fade">
            <summary>
            Items colliding with other items will be partially hidden from view by reducing their opacity.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CollisionAvoidanceType.OmitAndShift">
            <summary>
            Items colliding with other items will be either hidden from view or moved to new positions.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CollisionAvoidanceType.FadeAndShift">
            <summary>
            Items colliding with other items will be either partially hidden from view by reducing their opacity, or moved to new positions, or a combination of both.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.NumericMarkerManager">
            <summary>
            Marker manager class used by data series with numeric dimensions X and Y.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericMarkerManager.#ctor(System.Func{System.Object,Infragistics.Controls.Charts.Marker},System.Func{System.Int32,System.Object},System.Action{System.Collections.Generic.IDictionary{System.Object,Infragistics.Controls.Charts.OwnedPoint}},System.Func{System.Windows.Point[]},System.Func{System.Collections.Generic.IList{System.Int32}})">
            <summary>
            NumericMarkerManager constructor.
            </summary>
            <param name="provideMarkerStrategy">The function used to provide marker objects given a data item.</param>
            <param name="provideItemStrategy">The function used to provide a data item given its index.</param>
            <param name="removeUnusedMarkers">The action used to remove unused markers.</param>
            <param name="getItemLocationsStrategy">The function used to get all marker locations.</param>
            <param name="activeMarkerIndexesStrategy">The function used to return the indexes of all active markers.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericMarkerManager.#ctor(System.Func{System.Object,Infragistics.Controls.Charts.Marker},System.Func{System.Int32,System.Object},System.Action{System.Collections.Generic.IDictionary{System.Object,Infragistics.Controls.Charts.OwnedPoint}},System.Func{System.Windows.Point[]},System.Func{System.Collections.Generic.IList{System.Int32}},System.Func{Infragistics.Controls.Charts.CollisionAvoidanceType})">
            <summary>
            NumericMarkerManager constructor.
            </summary>
            <param name="provideMarkerStrategy">The function used to provide marker objects given a data item.</param>
            <param name="provideItemStrategy">The function used to provide a data item given its index.</param>
            <param name="removeUnusedMarkers">The action used to remove unused markers.</param>
            <param name="getItemLocationsStrategy">The function used to get all marker locations.</param>
            <param name="activeMarkerIndexesStrategy">The function used to return the indexes of all active markers.</param>
            <param name="getCollisionAvoidanceStrategy">The function used to get the method of collision avoidance to be used.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericMarkerManager.WinnowMarkers(System.Collections.Generic.IDictionary{System.Object,Infragistics.Controls.Charts.OwnedPoint},System.Int32,System.Windows.Rect,System.Windows.Rect,System.Double)">
            <summary>
            Filter out markers that should not be visible.
            </summary>
            <param name="markers">A dictionary containing the locations of all markers.</param>
            <param name="maximumMarkers">The maximum number of markers which can be displayed.</param>
            <param name="windowRect">A rectangle representing the scroll window.  Rectangle coordinates are based on the range of zero to one.</param>
            <param name="viewportRect">A rectangle representing the viewport, in device coordinates.</param>
            <param name="currentResolution">The current Series Resolution.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.NumericMarkerManager.Render(System.Collections.Generic.IDictionary{System.Object,Infragistics.Controls.Charts.OwnedPoint},System.Boolean)">
            <summary>
            Renders the given markers.
            </summary>
            <param name="markers">A dictionary containing the locations of all markers.</param>
            <param name="lightweight">Whether or not to enable a lower-fidelity rendering mode with better performance.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericMarkerManager.PopulateColumnValues">
            <summary>
            Boolean indicating whether or not the ColumnValues of OwnedPoints should be populated during marker assignment.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NumericMarkerManager.GetColumnValues">
            <summary>
            A reference to a function providing column values for a given index.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.MarkerManagerBucket">
            <summary>
            Class representing several markers being consolidated into one.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.MarkerManagerBucket.GetItem(System.Boolean@)">
            <summary>
            Gets the next marker index from the bucket.
            </summary>
            <param name="wasPriority">True if the index returned is for a priority marker.</param>
            <returns>The index of the next marker in the bucket.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerManagerBucket.Items">
            <summary>
            A list of the indices of items in this bucket.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerManagerBucket.PriorityItems">
            <summary>
            A list of the indices of priority items in this bucket.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarkerManagerBucket.IsEmpty">
            <summary>
            Boolean indicating whether or not the bucket contains no items.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.DefaultFlattener">
            <summary>
            Represents the default flattener class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.DefaultFlattener.Flatten(System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Flattens a set of points
            </summary>
            <param name="points">Collection of points to flatten</param>
            <param name="resolution">Resolution</param>
            <returns>Collection of flattened points</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.DefaultFlattener.FastFlatten(System.Double[],System.Double[],System.Int32,System.Double)">
            <summary>
            Flattens a set of points
            </summary>
            <param name="x">The array of x values to flatten.</param>
            <param name="y">The array of y values to flatten.</param>
            <param name="count">The number of values being provided.</param>
            <param name="resolution">The resolution to flatten the points to.</param>
            <returns>The list of flattened points.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.DefaultFlattener.GetFlattened(System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double})">
            <summary>
            Gets the collection of flattened points.
            </summary>
            <param name="pointsList">List of points</param>
            <param name="resolution">Resolution</param>
            <param name="x">X-function</param>
            <param name="y">Y-function</param>
            <returns>Collection of flattened points</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.DefaultFlattener.GetFastFlattened(System.Double[],System.Double[],System.Int32,System.Double)">
            <summary>
            Get the collection of flattened points.
            </summary>
            <param name="x">The array of x values to flatten.</param>
            <param name="y">The array of y values to flatten.</param>
            <param name="count">The number of values being provided.</param>
            <param name="resolution">The resolution to flatten the points to.</param>
            <returns>The list of flattened points.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.RenderSurface">
            <summary>
            Represents a target for a render operation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RenderSurface.Surface">
            <summary>
            The surface on which to render.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SeriesCollection">
            <summary>
            Represents an observable collection of XamDataChart series objects.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesCollection.#ctor">
            <summary>
            Initializes a default, empty SeriesCollection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesCollection.ClearItems">
            <summary>
            Clears the contained items of the collection, but provides a preview of the occurrance 
            in the form of the CollectionResetting event.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.SeriesCollection.CollectionResetting">
            <summary>
            CollectionResetting is raised before the collection reset occurs.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SeriesCollection.Item(System.String)">
            <summary>
            Gets the first matching series object by name.
            </summary>
            <param name="seriesName"></param>
            <returns>Matching series, or null.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesToolTipManager.UpdateToolTip(System.Object)">
            <summary>
            Show the tooltip for the item in the point.
            </summary>
            <param name="item">The tooltip item</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SeriesToolTipManager.ToWorldCoordinates(System.Windows.Point)">
            <summary>
            Returns the world coordinates of the point.
            </summary>
            <param name="point">The mouse coordinates for which to fetch the item.</param>
            <returns>Point in world coordinates.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.SyncLink">
            <summary>
            SyncLink class.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.IFastItemsSourceProvider">
            <summary>
            Implementors are providers of FastItemsSource instances.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.IFastItemsSourceProvider.GetFastItemsSource(System.Collections.IEnumerable)">
            <summary>
            Gets a fast item source for the target enumerable.
            </summary>
            <param name="target">The enumerable to get the FastItemsSource for.</param>
            <returns>The FastItemsSource reference.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.IFastItemsSourceProvider.ReleaseFastItemsSource(System.Collections.IEnumerable)">
            <summary>
            Releases a FastItemsSource reference.
            </summary>
            <param name="itemsSource">The enumerable for which to release the FastItemsSource.</param>
            <returns>The FastItemsSource reference.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncLink.#ctor">
            <summary>
            Initializes a new instance of the SyncLink class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncLink.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncLink.PeekItemsSource(System.Collections.IEnumerable)">
            <summary>
            Returns the fast items source for the given items source.
            </summary>
            <param name="itemsSource">The items source to get the fast items source for.</param>
            <returns>The fast items source, if found.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncLink.SynchroniseRect(Infragistics.Controls.SeriesViewer,Infragistics.Controls.SeriesViewer,System.Windows.Rect)">
            <summary>
            Calculate a rectangle for a chart area by synchronizing according to the
            chart area's window settings.
            </summary>
            <param name="sender"></param>
            <param name="chart"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncLink.PreviewNotify(Infragistics.Controls.SeriesViewer,System.Windows.Rect)">
            <summary>
            Called internally by chart areas to request a window preview.
            </summary>
            <param name="sender"></param>
            <param name="previewRect"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncLink.WindowNotify(Infragistics.Controls.SeriesViewer,System.Windows.Rect)">
            <summary>
            Called internally by chart areas to request a window.
            </summary>
            <param name="sender"></param>
            <param name="windowRect"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncLink.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="name">The name of the property that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.SyncLink.SyncChannel">
            <summary>
            The name of the associated synchronization channel.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SyncLink.DefaultWindowRect">
            <summary>
            The default window rect is applied to chart areas as they're added to the chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SyncLink.Charts">
            <summary>
            Gets a collection of chart areas known to the current chart.
            </summary>
            <remarks>
            The chart areas property is maintained intenally and should not be modified by users.
            </remarks>
        </member>
        <member name="E:Infragistics.Controls.Charts.SyncLink.PropertyChanged">
            <summary>
            Notifies clients that a property value has changed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.SyncLink.PropertyUpdated">
            <summary>
            Notifies clients that a property value has changed.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SyncSettings">
            <summary>
            Represents the synchronization settings for a chart including which synchronization channel it is
            part of.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.SyncSettings.SyncChannelProperty">
            <summary>
            Identifies the SyncChannel dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.SyncSettings.SynchronizeVerticallyProperty">
            <summary>
            Identifies the SynchronizeVertically dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.SyncSettings.SynchronizeHorizontallyProperty">
            <summary>
            Identifies the SynchronizeHorizontally dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncSettings.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.SyncSettings.SyncChannel">
            <summary>
            Gets or sets the channel with which to synchronize.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SyncSettings.SynchronizeVertically">
            <summary>
            Gets or sets the bool used to display the window preview shadow.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SyncSettings.SynchronizeHorizontally">
            <summary>
            Gets or sets the bool used to display the window preview shadow.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.SyncSettings.PropertyChanged">
            <summary>
            Raised when a value of the property changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.SyncSettings.PropertyUpdated">
            <summary>
            Raised when the value of a property is updated.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SyncSettingsConverter">
            <summary>
            Conveniently converts a string value into some default SyncSettings.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncSettingsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns if the converts is able to convert from the specified source type.
            </summary>
            <param name="context">The type descriptor context.</param>
            <param name="sourceType">The source type to convert from.</param>
            <returns>True if the conversion is possible.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncSettingsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value from the source type to a SyncSettings instance.
            </summary>
            <param name="context">The type descriptor context.</param>
            <param name="culture">The applicable culture settings.</param>
            <param name="value">The source value.</param>
            <returns>The SyncSettings instance.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncLinkManager.GetLink(System.String)">
            <summary>
            Gets the synchonization link that matches the synchchannel name provided.
            </summary>
            <param name="name">The synchchannel name to search for.</param>
            <returns>The SyncLink found.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncLinkManager.ReleaseLink(Infragistics.Controls.Charts.SyncLink)">
            <summary>
            Releases a reference to a SyncLink.
            </summary>
            <param name="link">The SyncLink to release.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.SyncManager">
            <summary>
            SyncManager helps to manage SyncSettings of the SeriesViewer control.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.SyncManager.SyncSettingsProperty">
            <summary>
            Identifies the SyncSettings attached property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncManager.SetSyncSettings(System.Windows.DependencyObject,Infragistics.Controls.Charts.SyncSettings)">
            <summary>
            Sets the SyncSettings for a target chart.
            </summary>
            <param name="target">The target chart to set the sync settings for.</param>
            <param name="syncSettings">The SyncSettings to set for the chart.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SyncManager.GetSyncSettings(System.Windows.DependencyObject)">
            <summary>
            Gets the SyncSettings for a target chart.
            </summary>
            <param name="target">The chart to get the SyncSettings for.</param>
            <returns>The SyncSettings for the chart.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.ViewportCalculator">
            <summary>
            Represents a basic set of methods and properties to calculate the view port of the chart.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ViewportCalculator.CalculateViewportOverride(System.Windows.UIElement,System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Calculates the bounds of the viewport.
            </summary>
            <param name="target">Target element</param>
            <param name="xReference">X-reference</param>
            <param name="yReference">Y-reference</param>
            <returns>Viewport rectangle</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ViewportCalculator.LocateAlternateReference(System.Windows.UIElement,System.Windows.FrameworkElement@,System.Windows.FrameworkElement@)">
            <summary>
            Returns whether or not there is an alternate reference.
            </summary>
            <param name="target">Target element</param>
            <param name="xReference">X-reference</param>
            <param name="yReference">Y-reference</param>
            <returns>Whether or not the reference was located</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ViewportCalculator.CalculateViewport(System.Windows.UIElement,System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Returns the bounds of the viewport.
            </summary>
            <param name="target">Target element</param>
            <param name="xReference">X-reference</param>
            <param name="yReference">Y-reference</param>
            <returns>Bounds of the viewport</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualInformationManager">
            <summary>
            Helps to augment the visual components of the chart with metadata which can be used to 
            programmatically classify them.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.VisualInformationManager.IsNegativeVisualProperty">
            <summary>
            Gets or sets whether the target visual illustrates a negative change in the data.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.VisualInformationManager.IsOutlineVisualProperty">
            <summary>
            Gets or sets whether the target visual is an outline of other displayed visuals.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.VisualInformationManager.IsSolidOutlineVisualProperty">
            <summary>
            Gets or sets whether the target visual is a solid outline of other displayed visuals.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.VisualInformationManager.IsTranslucentPortionVisualProperty">
            <summary>
            Gets or sets whether the target visual is the translucent portion of a visual.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.VisualInformationManager.IsTrendLineVisualProperty">
            <summary>
            Gets or sets whether the target visual represents a chart trendline.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.VisualInformationManager.IsMultiColorLineVisualProperty">
            <summary>
            Gets or sets whether the target visual is part of a segmented multi-color line.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.VisualInformationManager.IsMainGeometryVisualProperty">
            <summary>
            Gets or sets whether the target visual is the main geometry.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.GetIsNegativeVisual(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsNegativeVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to get the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.SetIsNegativeVisual(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsNegativeVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to set the value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.GetIsOutlineVisual(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsOutlineVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to get the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.SetIsOutlineVisual(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsOutlineVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to set the value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.GetIsSolidOutlineVisual(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsSolidOutlineVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to get the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.SetIsSolidOutlineVisual(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsSolidOutlineVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to set the value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.GetIsTranslucentPortionVisual(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsTranslucentPortionVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to get the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.SetIsTranslucentPortionVisual(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsTranslucentPortionVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to set the value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.GetIsTrendLineVisual(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsTrendLineVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to get the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.SetIsTrendLineVisual(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsTrendLineVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to set the value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.GetIsMultiColorLineVisual(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsMultiColorLineVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to get the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.SetIsMultiColorLineVisual(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsMultiColorLineVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to set the value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.GetIsMainGeometryVisual(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsMainGeometryVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to get the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualInformationManager.SetIsMainGeometryVisual(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsMainGeometryVisual attached property for a given dependency object
            </summary>
            <param name="target">The dependency object to set the value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.AxisLabelsLocation">
            <summary>
            Specifies the position of the Axis Labels in the chart.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelsLocation.OutsideTop">
            <summary>
            Places the axis labels at the top, outside of the plotting area.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelsLocation.OutsideBottom">
            <summary>
            Places the axis labels at the bottom, outside of the plotting area
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelsLocation.OutsideLeft">
            <summary>
            Places the axis labels to the left, outside of the plotting area.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelsLocation.OutsideRight">
            <summary>
            Places the axis labels to the right, outside of the plotting area.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelsLocation.InsideTop">
            <summary>
            Places the axis labels inside the plotting area above the axis line.
            </summary>
            <remarks>
            CrossingAxis should be set for this setting to take effect.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelsLocation.InsideBottom">
            <summary>
            Places the axis labels inside the plotting area below the axis line.
            </summary>
            <remarks>
            CrossingAxis should be set for this setting to take effect.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelsLocation.InsideLeft">
            <summary>
            Places the axis labels inside the plotting area and to the left of the axis line.
            </summary>
            <remarks>
            CrossingAxis should be set for this setting to take effect.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisLabelsLocation.InsideRight">
            <summary>
            Places the axis labels inside the plotting area and to the right of the axis line.
            </summary>
            <remarks>
            CrossingAxis should be set for this setting to take effect.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Charts.AxisOrientation">
            <summary>
            Provides a list of possible values for the axis orientation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisOrientation.Horizontal">
            <summary>
            Represents a horizontal axis.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisOrientation.Vertical">
            <summary>
            Represents a vertical axis.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisOrientation.Angular">
            <summary>
            Represents an angular axis used by the polar series.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AxisOrientation.Radial">
            <summary>
            Represents a radial axis used by radial series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.BrushSelectionMode">
            <summary>
            Defines the behavior of selecting a brush from a brush collection.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.BrushSelectionMode.Select">
            <summary>
            alternates between brushes sequentially.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.BrushSelectionMode.Interpolate">
            <summary>
            Uses index-based interpolation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.GridMode">
            <summary>
            Enum containing modes of displaying elements in the chart grid, such as gridlines.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.GridMode.None">
            <summary>
            No chart grid.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.GridMode.BeforeSeries">
            <summary>
            Chart grid should be rendered before or in front of the data series.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.GridMode.BehindSeries">
            <summary>
            Chart grid should be rendered behind or in back of the data series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.IndicatorDisplayType">
            <summary>
            Defines how financial indicators are displayed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.IndicatorDisplayType.Line">
            <summary>
            Display indicator as a line chart.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.IndicatorDisplayType.Area">
            <summary>
            Display indicator as an area chart.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.IndicatorDisplayType.Column">
            <summary>
            Display indicator as a column chart.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.LabelsPosition">
            <summary>
            Specifies the location of labels.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.LabelsPosition.None">
            <summary>
            No labels will be displayed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.LabelsPosition.Center">
            <summary>
            Labels will be displayed in the center.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.LabelsPosition.InsideEnd">
            <summary>
            Labels will be displayed inside and by the edge of the container.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.LabelsPosition.OutsideEnd">
            <summary>
            Labels will be displayed outside the container.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.LabelsPosition.BestFit">
            <summary>
            Labels will automatically decide their location.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.MarkerType">
            <summary>
            Defines marker types.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Unset">
            <summary>
            Marker hasn't been set.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.None">
            <summary>
            No markerItems.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Automatic">
            <summary>
            Automatic marker shape.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Circle">
            <summary>
            Circle marker shape.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Triangle">
            <summary>
            Flat-top triangle marker shape.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Pyramid">
            <summary>
            Flat-base triangle marker shape.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Square">
            <summary>
            Square marker shape.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Diamond">
            <summary>
            Diamond marker shape.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Pentagon">
            <summary>
            Pentagon marker shape. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Hexagon">
            <summary>
            Hexagon marker shape. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Tetragram">
            <summary>
            Four-pointed star marker shape.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Pentagram">
            <summary>
            Five-pointed star marker shape.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.MarkerType.Hexagram">
            <summary>
            Six-pointed star marker shape.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.OthersCategoryType">
            <summary>
            Specifies how the grouping into the Others slice is calculated.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.OthersCategoryType.Number">
            <summary>
            Data value is compared directly to the value of OthersCategoryThreshold.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.OthersCategoryType.Percent">
            <summary>
            Data value is compared to OthersCategoryThreshold as a percentage of the total.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PriceDisplayType">
            <summary>
            Defines how financial chart prices are displayed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PriceDisplayType.Candlestick">
            <summary>
            Displays prices as a Japanese Candlestick.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PriceDisplayType.OHLC">
            <summary>
            Displays prices as an OHLC bar. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SplineType">
            <summary>
            Specifies the type of Spline calculation to be performed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.SplineType.Natural">
            <summary>
            Calculates the spline using a natural spline calculation formula.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.SplineType.Clamped">
            <summary>
            Calculated the spline using a clamped spline calculation formula.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.TimeAxisDisplayType">
            <summary>
            Defines how gridlines, tickmarks and labels are displayed on a time axis.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TimeAxisDisplayType.Continuous">
            <summary>
            Points occur at even intervals, even where data is not present at a given point.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.TimeAxisDisplayType.Discrete">
            <summary>
            Points occur when data is present, possibly at uneven intervals.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.WindowResponse">
            <summary>
            Enumeration for types of UI response to user panning and zooming.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.WindowResponse.Deferred">
            <summary>
            Defer the view update until after the user action is complete.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.WindowResponse.Immediate">
            <summary>
            Update the view immediately while the user action is happening.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ErrorBarSettingsBase">
            <summary>
            Represents the base class for error bar settings
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ErrorBarSettingsBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ErrorBarSettingsBase.DefaultErrorBarStyleProperty">
            <summary>
            identifies the DefaultErrorBarStyle dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ErrorBarSettingsBase.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the property changed and updated events.
            </summary>
            <param name="name">The name of the property being changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.ErrorBarSettingsBase.DefaultErrorBarStyle">
            <summary>
            Gets or sets the DefaultErrorBarStyle property.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.ErrorBarSettingsBase.PropertyChanged">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.ErrorBarSettingsBase.PropertyUpdated">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CategoryErrorBarSettings">
            <summary>
            Represents the class for the category error bar settings
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CategoryErrorBarSettings.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryErrorBarSettings.EnableErrorBarsProperty">
            <summary>
            Identifies the EnableErrorBars dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryErrorBarSettings.ErrorBarCapLengthProperty">
            <summary>
            Identifies the ErrorBarCapLength dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryErrorBarSettings.CalculatorProperty">
            <summary>
            Identifies the Calculator dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryErrorBarSettings.StrokeProperty">
            <summary>
            Identifies the Stroke dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryErrorBarSettings.StrokeThicknessProperty">
            <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.CategoryErrorBarSettings.ErrorBarStyleProperty">
            <summary>
            Identifies the ErrorBarStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryErrorBarSettings.EnableErrorBars">
            <summary>
            Determines which error bars are enabled - none, the plus ones, the minus ones or both.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryErrorBarSettings.ErrorBarCapLength">
            <summary>
            Determines the length, in pixels, of each error bar's cap.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryErrorBarSettings.Calculator">
            <summary>
            Specifies the calculator for the error bars
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryErrorBarSettings.Stroke">
            <summary>
            Determines the stroke of the error bars
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryErrorBarSettings.StrokeThickness">
            <summary>
            Determines the stroke thickness of the error bars
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CategoryErrorBarSettings.ErrorBarStyle">
            <summary>
            Gets or sets the ErrorBarStyle property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.EnableErrorBars">
            <summary>
            The types of error bars that are enabled
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.EnableErrorBars.None">
            <summary>
            No error bars are enabled
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.EnableErrorBars.Both">
            <summary>
            Both error bars are enabled
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.EnableErrorBars.Positive">
            <summary>
            Positive error bars are enabled
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.EnableErrorBars.Negative">
            <summary>
            Negative error bars are enabled
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ErrorBarsHelper">
            <summary>
            Implements some common methods for all error bars
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ScatterErrorBarSettings">
            <summary>
            Represents the class for the scatter error bar settings
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalErrorBarCapLengthPropertyName">
            <summary>
            String used to declare HorizontalErrorBarCepLength dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalStrokeThicknessPropertyName">
            <summary>
            Identifies the HorizontalStrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalErrorBarCapLengthPropertyName">
            <summary>
            String used to identify the VerticalErrorBarCapLength property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterErrorBarSettings.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.EnableErrorBarsHorizontalProperty">
            <summary>
            Identifies the ErrorErrorBarsHorizontal dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalCalculatorReferenceProperty">
            <summary>
            Identifies the HorizontalCalculatorReference dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalCalculatorProperty">
            <summary>
            Identifies the HorizontalCalculator dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalErrorBarCapLengthProperty">
            <summary>
            Identifies the HorizontalErrorBarCapLength dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalStrokeProperty">
            <summary>
            Identifies the HorizontalStroke dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalStrokeThicknessProperty">
            <summary>
            Identifies the HorizontalStrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalErrorBarStyleProperty">
            <summary>
            Identifies the HorizontalErrorBarStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.EnableErrorBarsVerticalProperty">
            <summary>
            Identifies the EnableErrorBarsVertical dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalCalculatorReferenceProperty">
            <summary>
            Identifies the VerticalCalculatorReference dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalCalculatorProperty">
            <summary>
            Identifies the VerticalCalculator dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalErrorBarCapLengthProperty">
            <summary>
            Identifies the VerticalErrorBarCapLength dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalStrokeProperty">
            <summary>
            Identifies the VerticalStroke dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalStrokeThicknessProperty">
            <summary>
            Identifies the VerticalStrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalErrorBarStyleProperty">
            <summary>
            Identifies the VerticalErrorBarStyle dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.EnableErrorBarsHorizontal">
            <summary>
            Determines which horizontal error bars are enabled - none, the plus ones, the minus ones or both.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalCalculatorReference">
            <summary>
            Specifies the reference value for any dependent horizontal calculators.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalCalculator">
            <summary>
            Specifies the calculator for the horizontal error bars.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalErrorBarCapLength">
            <summary>
            Determines the length, in pixels, of each horizontal error bar's cap.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalStroke">
            <summary>
            Determines the stroke of the horizontal error bars.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalStrokeThickness">
            <summary>
            Determines the stroke thickness of the horizontal error bars.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.HorizontalErrorBarStyle">
            <summary>
            Gets or sets the HorizontalErrorBarStyle property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.EnableErrorBarsVertical">
            <summary>
            Determines which vertical error bars are enabled - none, the plus ones, the minus ones or both.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalCalculatorReference">
            <summary>
            Specifies the reference value for any dependent vertical calculators.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalCalculator">
            <summary>
            Specifies the calculator for the vertical error bars.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalErrorBarCapLength">
            <summary>
            Determines the length, in pixels, of each vertical error bar's cap.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalStroke">
            <summary>
            Determines the stroke of the vertical error bars.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalStrokeThickness">
            <summary>
            Determines the stroke thickness of the vertical error bars.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterErrorBarSettings.VerticalErrorBarStyle">
            <summary>
            Gets or sets the VerticalErrorBarStyle property.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.AxisRangeChangedEventArgs">
            <summary>
            Provides data for Axis RangeChanged events. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AxisRangeChangedEventArgs.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialises an AxisRangeChangedEventArgs object.
            </summary>
            <param name="oldMinimumValue">The axis minimum value before the range changed.</param>
            <param name="minimumValue">The axis minimum value after the range changed.</param>
            <param name="oldMaximumValue">The axis maximum value before the range changed.</param>
            <param name="maximumValue">The axis minimum value after the range changed.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisRangeChangedEventArgs.OldMinimumValue">
            <summary>
            Gets the minimum value before the range changed. The reported minimum is the effective,
            not the set value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisRangeChangedEventArgs.MinimumValue">
            <summary>
            Gets the minimum value after the range changed. The reported minimum is the effective,
            not the set value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisRangeChangedEventArgs.OldMaximumValue">
            <summary>
            Gets the maximum value before the range changed. The reported maximum is the effective,
            not the set value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AxisRangeChangedEventArgs.MaximumValue">
            <summary>
            Gets the maximum value after the range changed. The reported maximum is the effective,
            not the set value.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.AxisRangeChangedEventHandler">
            <summary>
            Represents the method that will handle Axis RangeChanged events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataChartMouseButtonEventArgs">
            <summary>
            Provides data for XamDataChart mouse button related events. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.DataChartMouseButtonEventArgs.ToString">
            <summary>
            Provides a human readable description of the mouse button event.
            </summary>
            <returns>The description.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.DataChartMouseButtonEventArgs.GetPosition(System.Windows.UIElement)">
            <summary>
            Returns the x- and y- coordinates of the mouse pointer position, optionally evaluated
            against the origin of a supplied UIElement.
            </summary>
            <param name="relativeTo">Any UIElement derived object that is contained by the Silverlight plug-in
            and connected to the object tree. To specify the object relative to the overall Silverlight
            coordinate system, use a relativeTo value of null.</param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataChartMouseButtonEventArgs.OriginalEvent">
            <summary>
            Gets or sets the original control event that resulted in this event being raised.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataChartMouseButtonEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates the present state of the event handling for a routed 
            event as it travels the route.
            </summary>
            <remarks>
            ChartMouseButton events are not routed events; setting this property effects the underlying
            MouseButtonEvent.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataChartMouseButtonEventArgs.StylusDevice">
            <summary>
            Gets an object that reports stylus device information, such as the collection of stylus
            points associated with the input.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataChartMouseButtonEventArgs.OriginalSource">
            <summary>
            Gets a reference to the object that raised the event.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataChartMouseButtonEventArgs.Item">
            <summary>
            Gets the ItemsSource item associated with the current event.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataChartMouseButtonEventArgs.Series">
            <summary>
            Gets the series associated with the current event.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataChartMouseButtonEventArgs.Chart">
            <summary>
            Gets the Chart associated with the current event.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataChartMouseButtonEventHandler">
            <summary>
            Represents the method that will handle XamDataChart mouse button related events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataChartLegendMouseButtonEventArgs">
            <summary>
            Provides data for XamDataChart legend mouse button related events. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DataChartLegendMouseButtonEventArgs.LegendItem">
            <summary>
            The legend item that was the target of the mouse event.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataChartLegendMouseButtonEventHandler">
            <summary>
            Represents the method that will handle XamDataChart legend mouse button related events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.ChartMouseEventArgs">
            <summary>
            Provides data for XamDataChart mouse button related events. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChartMouseEventArgs.ToString">
            <summary>
            Provides a human readable description of the mouse button event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChartMouseEventArgs.GetPosition(System.Windows.UIElement)">
            <summary>
            Returns the x- and y- coordinates of the mouse pointer position, optionally evaluated
            against the origin of a supplied UIElement.
            </summary>
            <param name="relativeTo">Any UIElement derived object that is contained by the Silverlight plug-in
            and connected to the object tree. To specify the object relative to the overall Silverlight
            coordinate system, use a relativeTo value of null.</param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartMouseEventArgs.StylusDevice">
            <summary>
            Gets an object that reports stylus device information, such as the collection of stylus
            points associated with the input.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartMouseEventArgs.OriginalSource">
            <summary>
            Gets a reference to the object that raised the event.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartMouseEventArgs.Item">
            <summary>
            Gets the ItemsSource item associated with the current event.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartMouseEventArgs.Series">
            <summary>
            Gets the series associated with the current event.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartMouseEventArgs.Chart">
            <summary>
            Gets the Chart associated with the current event.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataChartMouseEventHandler">
            <summary>
            Represents the method that will handle XamDataChart mouse related events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.ChartLegendMouseEventArgs">
            <summary>
            Provides data for XamDataChart legend mouse related events. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartLegendMouseEventArgs.LegendItem">
            <summary>
            The legend item that was the target of the mouse event.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataChartLegendMouseEventHandler">
            <summary>
            Represents the method that will handle XamDataChart legend mouse related events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.ChartCursorEventArgs">
            <summary>
            Provides data for XamDataChart mouse button related events. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChartCursorEventArgs.ToString">
            <summary>
            Provides a human readable expresion of the event arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartCursorEventArgs.Item">
            <summary>
            Gets the ItemsSource item associated with the current event.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartCursorEventArgs.Series">
            <summary>
            Gets the series associated with the current event.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartCursorEventArgs.SeriesViewer">
            <summary>
            Gets the Chart associated with the current event.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChartCursorEventArgs.Chart">
            <summary>
            Gets the chart associated with the event.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataChartCursorEventHandler">
            <summary>
            Represents the method that will handle XamDataChart mouse related events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.FinancialEventArgs">
            <summary>
            Parameterizes a financial calculation event.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialEventArgs.#ctor(System.Int32,System.Int32,Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Constructs a FinancialEventArgs object.
            </summary>
            <param name="position">The beginning position that should be calculated from.</param>
            <param name="count">The number of positions that should be calculated from the start.</param>
            <param name="dataSource">The data to use for the calculation.</param>
            <param name="supportingCalculations">The supporting calculations to use in the calculation.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialEventArgs.Position">
            <summary>
            The beginning position that should be calculated from.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialEventArgs.Count">
            <summary>
            The number of positions that should be calculated from the start.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialEventArgs.DataSource">
            <summary>
            The data to use for the calculation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialEventArgs.SupportingCalculations">
            <summary>
            The supporting calculations to use in the calculation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialEventArgs.BasedOn">
            <summary>
            Used to specify which columns changing will invalidate the series and cause it to 
            be recalculated.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.FinancialEventHandler">
            <summary>
            For handling financial calculation events.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The parameters of the event.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.PropertyUpdatedEventArgs">
            <summary>
            EventArgs class for property updated events.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PropertyUpdatedEventArgs.PropertyName">
            <summary>
            Name of the property being updated.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PropertyUpdatedEventArgs.OldValue">
            <summary>
            Old or previous value of the property being updated.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PropertyUpdatedEventArgs.NewValue">
            <summary>
            New or current value of the property being updated.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PropertyUpdatedEventHandler">
            <summary>
            EventHandler delegate for property updated events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The PropertyUpdatedEventArgs in context.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.SliceClickEventArgs">
            <summary>
            Contains PieChart click event data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceClickEventArgs.Slice">
            <summary>
            Gets the current slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceClickEventArgs.IsSelected">
            <summary>
            Gets or sets whether the slice is selected.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceClickEventArgs.IsExploded">
            <summary>
            Gets or sets whether the slice is exploded.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceClickEventArgs.IsOthersSlice">
            <summary>
            Gets whether the current slice is part of the others slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceClickEventArgs.DataContext">
            <summary>
            Gets the slice data context.
            </summary>
            <value>The data context.</value>
        </member>
        <member name="T:Infragistics.Controls.Charts.SliceClickEventHandler">
            <summary>
            Event handler for SliceClick event.
            </summary>
            <param name="sender">Chart control</param>
            <param name="e">Slice parameters</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs">
            <summary>
            Provides data for XamDataChart stacked series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.Brush">
            <summary>
            Gets or sets the series brush.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.LegendItemTemplate">
            <summary>
            Gets or sets the series legend item template.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.LegendItemBadgeTemplate">
            <summary>
            Gets or sets the series legend item badge templae.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.LegendItemVisibility">
            <summary>
            Gets or sets the visibility of the series legend.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.Outline">
            <summary>
            Gets or sets the series outline brush.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.DashArray">
            <summary>
            Gets or sets the series stroke dash array.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.DashCap">
            <summary>
            Gets or sets the series dash cap.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.Index">
            <summary>
            Gets the index of the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.Thickness">
            <summary>
            Gets or sets the series outline thickness.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.Title">
            <summary>
            Gets or sets the series title.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.ToolTip">
            <summary>
            Gets or sets the series tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.MarkerBrush">
            <summary>
            Gets or sets the series marker brush.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.MarkerOutline">
            <summary>
            Gets or sets the series marker outline.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.MarkerStyle">
            <summary>
            Gets or sets the series marker style.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.MarkerTemplate">
            <summary>
            Gets or sets the series marker template.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.MarkerType">
            <summary>
            Gets or sets the series marker type.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.StartCap">
            <summary>
            Gets or sets the start cap.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCreatedEventArgs.EndCap">
            <summary>
            Gets or sets the end cap.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedSeriesCreatedEventHandler">
            <summary>
            Event handler for the SeriesCreated event.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameters</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.AbsoluteVolumeOscillatorIndicator">
            <summary>
            Represents a XamDataChart Absolute Volume Oscillator indicator series.
            </summary>
            <remarks>
            Default required members: Volume
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Charts.StrategyBasedIndicator">
            <summary>
            A base class for indicator series with simple calculations that separates the calculation
            responsibility from the other resposibilities of the financial series, this enables
            easier unit testing and decoupling of individual calculation strategies. 
            </summary>
            <remarks>
            A contract is defined between the financial series and these simple indicator calculations 
            detailing the data which the series agrees to provide the simple indicator calculations, 
            this contract is defined by <see cref="T:Infragistics.Controls.Charts.FinancialCalculationDataSource"/>. If more 
            complex interactions are needed between the indicator calculation and the series, the 
            indicators should instead derive from <see cref="T:Infragistics.Controls.Charts.FinancialIndicator"/> directly, or some 
            derivative other than <see cref="T:Infragistics.Controls.Charts.StrategyBasedIndicator"/>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Charts.FinancialIndicator">
            <summary>
            Represents the base functionality for a XamDataChart financial indicator series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.FinancialSeries">
            <summary>
            Represents the base class for all financial indicator and overlay series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.#ctor">
            <summary>
            Initialises a default FinancialSeries object.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialSeries.NegativeBrushProperty">
            <summary>
            Identifies the Fill dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialSeries.XAxisProperty">
            <summary>
            Identifies the ActualXAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialSeries.YAxisProperty">
            <summary>
            Identifies the ActualYAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialSeries.OpenMemberPathProperty">
            <summary>
            Identifies the OpenMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialSeries.HighMemberPathProperty">
            <summary>
            Identifies the HighMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialSeries.LowMemberPathProperty">
            <summary>
            Identifies the LowMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialSeries.CloseMemberPathProperty">
            <summary>
            Identifies the CloseMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialSeries.VolumeMemberPathProperty">
            <summary>
            Identifies the VolumeMemberPath dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.InvalidateAxes">
            <summary>
            Invalidates the associated axes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.WindowRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the chart's window being updated.
            </summary>
            <param name="oldWindowRect">The old window rectangle.</param>
            <param name="newWindowRect">The new window rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.ViewportRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the viewport being updated.
            </summary>
            <param name="oldViewportRect">The old viewport rectangle.</param>
            <param name="newViewportRect">The new viewport rectangle.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialSeries.columnToMapping">
            <summary>
            Maps from fast item columns to member paths.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialSeries.mappingToColumnName">
            <summary>
            Maps from member paths to column names.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.GetItemIndex(System.Windows.Point)">
            <summary>
            Gets the index of the item that resides at the provided world coordinates.
            </summary>
            <param name="world">The world coordinates of the requested item.</param>
            <returns>The requested item's index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.GetItemIndexSorted(System.Windows.Point)">
            <summary>
            Gets the item index based on world coordinates.
            </summary>
            <param name="world">The world coordinates to get the item for.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.GetViewInfo(System.Windows.Rect@,System.Windows.Rect@)">
            <summary>
            Gets the view info for the series.
            </summary>
            <param name="viewportRect">The viewport of the series.</param>
            <param name="windowRect">The window of the series.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.RenderSeriesOverride(System.Boolean)">
            <summary>
            Renders the series.
            </summary>
            <param name="animate">True if the change should be animated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.ValidateBasedOn(System.Collections.Generic.IList{System.String})">
            <summary>
            Validates the the required columns have been mapped for the required calculation.
            </summary>
            <param name="basedOn">The columns the calculation is based on.</param>
            <returns>Whether the required columns are mapped.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.GetTypicalBasedOn">
            <summary>
            Gets the columns the current Typical Price calculation are based on.
            </summary>
            <returns>The list of column names the calculation is based on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.ProvideDataSource(System.Int32,System.Int32)">
            <summary>
            Provides the data requires by the data contract between the financial series
            and the calculation strategies.
            </summary>
            <returns>The data which the calculation strategies need.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.ProvideSupportingCalculations(Infragistics.Controls.Charts.FinancialCalculationDataSource)">
            <summary>
            Provides the supporting calculation strategies so that the indicator 
            calculation strategy can perform its calculations.
            </summary>
            <returns>The supporting calculation strategies.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialSeries.RenderThumbnail(System.Windows.Rect,Infragistics.Controls.Charts.RenderSurface)">
            <summary>
            Renders the thumbnail for the OPD.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="surface">The render target.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.NegativeBrush">
            <summary>
            Gets or sets the brush to use for negative portions of the series.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.XAxis">
            <summary>
            Gets or sets the effective x-axis for the current FinancialSeries object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.YAxis">
            <summary>
            Gets or sets the effective y-axis for the current FinancialSeries object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.OpenMemberPath">
            <summary>
            Gets or sets the open mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.OpenColumn">
            <summary>
            Gets the Open data values gathered from the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.HighMemberPath">
            <summary>
            Gets or sets the high mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.HighColumn">
            <summary>
            Gets the high data values gathered from the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.LowMemberPath">
            <summary>
            Gets or sets the low mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.LowColumn">
            <summary>
            Gets the low data values gathered from the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.CloseMemberPath">
            <summary>
            Gets or sets the close mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.CloseColumn">
            <summary>
            Gets the Close data values gathered from the data source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.VolumeMemberPath">
            <summary>
            Gets or sets the volume mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.VolumeColumn">
            <summary>
            Gets the Volume data values gathered from the data source.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.FinancialSeries.Typical">
            <summary>
            Handle this event in order to perform a custom typical price calculation.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.FinancialSeries.TypicalBasedOn">
            <summary>
            Handle this event in order to specify which columns the Typical price calculation is based on.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.TypicalColumn">
            <summary>
            Typical column enumerable. The precise meaning of "typical" should be configurable
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.TR">
            <summary>
            True range enumerable
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialSeries.TL">
            <summary>
            True low enumerable
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.#ctor">
            <summary>
            Initializes a new instance of the FinancialIndicator class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialIndicator.DisplayTypeProperty">
            <summary>
            Identifies the DisplayType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialIndicator.IgnoreFirstProperty">
            <summary>
            Identifies the IgnoreFirst dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialIndicator.TrendLineTypeProperty">
            <summary>
            Identifies the TrendLineType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialIndicator.TrendLineBrushProperty">
            <summary>
            Identifies the TrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialIndicator.ActualTrendLineBrushProperty">
            <summary>
            Identifies the ActualTrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialIndicator.TrendLineThicknessProperty">
            <summary>
            Identifies the TrendLineThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialIndicator.TrendLineDashCapProperty">
            <summary>
            Identifies the TrendLineDashCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialIndicator.TrendLineDashArrayProperty">
            <summary>
            Identifies the TrendLineDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialIndicator.TrendLinePeriodProperty">
            <summary>
            Identifies the TrendLinePeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.TrendPeriodOverride">
            <summary>
            Should be overriden in derived classes to specify a value 
            to use for the trendlineperiod regardless of what is set on the 
            series.
            </summary>
            <returns>The to use for the period.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialIndicator.TrendLineZIndexProperty">
            <summary>
            Identifies the TrendLineZIndex dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.IndicatorOverride(System.Int32,System.Int32)">
            <summary>
            Overriden in derived classes to calculate the value of the indicator based on the input columns.
            </summary>
            <param name="position">The starting position to calculate from.</param>
            <param name="count">The number of positions to calculate.</param>
            <returns>Whether updates are required.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.BasedOn(System.Int32,System.Int32)">
            <summary>
            Overriden in derived classes to provide a list of column names on which the calculation depends.
            </summary>
            <param name="position">The starting position of the calculation.</param>
            <param name="count">The number of positions required to be calculated.</param>
            <returns>The list of columns on which the calculation depends.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the series to display the item for the specified data item.
            </summary>
            <remarks>
            The series is scrolled by the minimum amount required to place the specified data item within
            the central 80% of the visible axis.
            </remarks>
            <param name="item">The data item (item) to scroll to.</param>
            <returns>True if the specified item could be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.UpdateIndexedProperties">
            <summary>
            Updates properties that are based on the index of the series in the series collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialIndicator.FullIndicatorRefresh">
            <summary>
            Refreshes all the indicator values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.DisplayType">
            <summary>
            Gets or sets the display for the current FinancialIndicator object.
            <para/>
            This is a dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.IgnoreFirst">
            <summary>
            Gets or sets the number of values to hide at the beginning of the indicator.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.TrendLineType">
            <summary>
            Gets or sets the trend type for the current indicator series.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.TrendLineBrush">
            <summary>
            Gets or sets the brush to use to draw the trend line.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.ActualTrendLineBrush">
            <summary>
            Gets the effective TrendLineBrush for this indicator.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.TrendLineThickness">
            <summary>
            Gets or sets the thickness of the current indicator object's trend line.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.TrendLineDashCap">
            <summary>
            Gets or sets the PenLineCap enumeration value that specifies how the current
            indicator object's trend line dash ends are drawn. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.TrendLineDashArray">
            <summary>
            Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
            is used to draw the trend line for the current indicator object. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.TrendLinePeriod">
            <summary>
            Gets or sets the trend line period for the current series.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The typical, and initial, value for trend line period is 7.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.TrendLineZIndex">
            <summary>
            Gets or sets the trend line z index for the current series.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The trend line renders over the series and markers by default, lower this value to shift it to the background.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.IndicatorColumn">
            <summary>
            The calculated indicator values
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialIndicator.IndicatorRange">
            <summary>
            The Y range defined by the Indicator values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.#ctor">
            <summary>
            Constructs the SimpleFinancial indicator, registering the appropriate 
            default style key, and creating the appropriate calculation strategy.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.PeriodOverride">
            <summary>
            Should be overriden in derived classes that are providing a period
            to the calculation strategy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.ShortPeriodOverride">
            <summary>
            Should be overriden in derived classes that are providing a short period
            to the calculation strategy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.LongPeriodOverride">
            <summary>
            Should be overriden in derived classes that are providing a long period
            to the calculation strategy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.CreatePeriodProperty(System.Int32,System.Type)">
            <summary>
            Helper method for defining the various period dependency properties that
            derivatives of this class need.
            </summary>
            <param name="defaultValue">The default value for the period property to create.</param>
            <param name="ownerType">The type that will own the period property.</param>
            <returns>The dependency property identifier.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.CreateLongPeriodProperty(System.Int32,System.Type)">
            <summary>
            Helper method for defining the various long period dependency properties that
            derivatives of this class need.
            </summary>
            <param name="defaultValue">The default value for the period property to create.</param>
            <param name="ownerType">The type that will own the period property.</param>
            <returns>The dependency property identifier.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.CreateShortPeriodProperty(System.Int32,System.Type)">
            <summary>
            Helper method for defining the various short period dependency properties that
            derivatives of this class need.
            </summary>
            <param name="defaultValue">The default value for the period property to create.</param>
            <param name="ownerType">The type that will own the period property.</param>
            <returns>The dependency property identifier.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.BasedOn(System.Int32,System.Int32)">
            <summary>
            Returns the list of property names whose changing should result in the 
            indicator being recalculated.
            </summary>
            <param name="position">The position that will be recalculated from.</param>
            <param name="count">The number of positions that will be recalculated.</param>
            <returns>The list of property names.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.IndicatorOverride(System.Int32,System.Int32)">
            <summary>
            Provides the indicator calculation logic for the Simple financial indicators
            </summary>
            <param name="position"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.UpdateRange(Infragistics.Controls.Charts.FinancialCalculationDataSource)">
            <summary>
            Updates the range for the Axes based on the calculated indicator values.
            </summary>
            <param name="dataSource">The data used for calculation and the calculated values.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.SanitizePeriod(System.Int32)">
            <summary>
            Makes sure the preriod has a valid value.
            </summary>
            <param name="periodValue">Input period value.</param>
            <returns>Sanitized period value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.ProvideDataSource(System.Int32,System.Int32)">
            <summary>
            Overriden in derived classed to provide the FinancialCalculationDataSource to perform
            financial calculations on behalf of the series.
            </summary>
            <param name="position">The position the calculation must begin at.</param>
            <param name="count">The number of items to be calculated.</param>
            <returns>The data source for the calculation.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.MultiplierOverride">
            <summary>
            Should be overriden in derived classes if the indicator supports some sort
            of scaling factor to be passed to the calculation strategy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.CreateMultiplierProperty(System.Double,System.Type)">
            <summary>
            Creates a dependency property for storing the scaling factor.
            </summary>
            <param name="defaultValue">The default value for the scaling factor.</param>
            <param name="ownerType">The owner of the dependency property</param>
            <returns>The created dependency property identifier.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StrategyBasedIndicator.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.StrategyBasedIndicator.ActualCalculationStrategy">
            <summary>
            The effective calculation strategy to use for the calculation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StrategyBasedIndicator.CalculationStrategy">
            <summary>
            Must be overriden in derived classes to specify which calculation strategy
            should be used for the calculation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StrategyBasedIndicator.StyleKeyType">
            <summary>
            Must be overriden in derived classes to specify which type to use as a key
            to find the default style for the indicator.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AbsoluteVolumeOscillatorIndicator.ShortPeriodProperty">
            <summary>
            Identifies the ShortPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AbsoluteVolumeOscillatorIndicator.ShortPeriodOverride">
            <summary>
            Specifies the short period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.AbsoluteVolumeOscillatorIndicator.LongPeriodProperty">
            <summary>
            Identifies the LongPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AbsoluteVolumeOscillatorIndicator.LongPeriodOverride">
            <summary>
            Specifies the long period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.AbsoluteVolumeOscillatorIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AbsoluteVolumeOscillatorIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AbsoluteVolumeOscillatorIndicator.ShortPeriod">
            <summary>
            Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for short AVO periods is 10.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AbsoluteVolumeOscillatorIndicator.LongPeriod">
            <summary>
            Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for long AVO periods is 30.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.AbsoluteVolumeOscillatorIndicatorStrategy">
            <summary>
            Represents a strategy for calculating an Absolute Volume Oscillator indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.AbsoluteVolumeOscillatorIndicator"/>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Charts.IndicatorCalculationStrategy">
            <summary>
            Represents a decoupled strategy for calculating a financial indicator from data
            provided by a financial series. 
            </summary>
            <remarks>
            The data which the strategy will use for its calculation is
            a simplified subset of the data that the series makes available and is defined by 
            the contract <see cref="T:Infragistics.Controls.Charts.FinancialCalculationDataSource"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.IndicatorCalculationStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation associated with this calculation strategy.
            </summary>
            <param name="dataSource">The data required by the contract between these 
            strategies and the financial series.</param>
            <param name="supportingCalculations">The calculation strategies required by the 
            contract between these strategies and the finiancial series.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.IndicatorCalculationStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            The calculation strategy is required to express which columns its values are based on
            so that the series knows when to ask for recalculation.
            </summary>
            <param name="dataSource">The data source we will be calculating for.</param>
            <param name="supportingCalculations">The supporting calculations to be used
            in the calculation.</param>
            <returns>The list of column names that this calculation is based on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.AbsoluteVolumeOscillatorIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.AbsoluteVolumeOscillatorIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.AccumulationDistributionIndicator">
            <summary>
            Represents a XamDataChart Accumulation/Distribution indicator series.
            </summary>
            <remarks>
            Default required members: Close, Low, High, Volume
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.AccumulationDistributionIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AccumulationDistributionIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.AccumulationDistributionIndicatorStrategy">
            <summary>
            Represents a strategy for calculating an Accumulation/Distribution indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.AccumulationDistributionIndicator"/>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Charts.StreamingIndicatorCalculationStrategy">
            <summary>
            Implementors of IStreamingIndicatorCalculationStrategy must be able to provide
            an enumeration of calculated values rather that filling the IndicatorColumn directly.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StreamingIndicatorCalculationStrategy.ProvideStream(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Provides a stream of calculated indicator values and does not fill
            the IndicatorColumn in the datasource.
            </summary>
            <param name="dataSource">The data required by the contract between these 
            strategies and the financial series.</param>
            <param name="supportingCalculations">The calculation strategies required by the 
            contract between these strategies and the finiancial series.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.AccumulationDistributionIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.AccumulationDistributionIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.AccumulationDistributionIndicatorStrategy.ProvideStream(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Provides a stream of calculated indicator values and does not fill
            the IndicatorColumn in the datasource.
            </summary>
            <param name="dataSource">The data required by the contract between these 
            strategies and the financial series.</param>
            <param name="supportingCalculations">The calculation strategies required by the 
            contract between these strategies and the finiancial series.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.AverageDirectionalIndexIndicator">
            <summary>
            Represents a XamDataChart Average Directional indicator series.
            </summary>
            <remarks>
            Default required members: High, Low, Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.AverageDirectionalIndexIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AverageDirectionalIndexIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.AverageDirectionalIndexIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AverageDirectionalIndexIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AverageDirectionalIndexIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current AverageDirectionalIndexIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for AverageDirectionalIndexIndicator periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.AverageDirectionalIndexIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a AverageDirectionalIndexIndicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.AverageDirectionalIndexIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.AverageDirectionalIndexIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.AverageDirectionalIndexIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.AverageTrueRangeIndicator">
            <summary>
            Represents a XamDataChart Average True Range indicator series.
            </summary>
            <remarks>
            Default required members: High, Low, Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.AverageTrueRangeIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AverageTrueRangeIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.AverageTrueRangeIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AverageTrueRangeIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AverageTrueRangeIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current AverageTrueRangeSeries object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for AverageTrueRange periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.AverageTrueRangeIndicatorStrategy">
            <summary>
            Represents a strategy for calculating an Average True Range indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.AverageTrueRangeIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.AverageTrueRangeIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.AverageTrueRangeIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.BollingerBandsOverlay">
            <summary>
            Represents a XamDataChart Bollinger Bands financial overlay series.
            </summary>
            <remarks>
            Default required members: High, Low, Close
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Charts.FinancialOverlay">
            <summary>
            Represents the base functionality for a XamDataChart financial overlay series.
            </summary>
            <remarks>
            The difference between a FinancialIndicator and a FinancialOverlay is small.
            Overlays are usually drawn against the same axes as the price, but they don't
            have to be. Overlays mostly display multiple values, but not all of them, and so
            so some indicators.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialOverlay.#ctor">
            <summary>
            FinancialOverlay constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialOverlay.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialOverlay.IgnoreFirstProperty">
            <summary>
            Identifies the IgnoreFirst dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialOverlay.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialOverlay.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialOverlay.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the series to display the item for the specified data item.
            </summary>
            <remarks>
            The series is scrolled by the minimum amount required to place the specified data item within
            the central 80% of the visible axis.
            </remarks>
            <param name="item">The data item (item) to scroll to.</param>
            <returns>True if the specified item could be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialOverlay.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialOverlay.ValidateOverlay">
            <summary>
            Validates this overlay.
            </summary>
            <returns>True if the overlay is valid, otherwise False.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialOverlay.IgnoreFirst">
            <summary>
            Gets or sets the number of values to hide at the beginning of the indicator.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialOverlay.OverlayValid">
            <summary>
            Boolean property indicating whether or not this overlay is valid.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BollingerBandsOverlay.#ctor">
            <summary>
            Initializes a new instance of the BollingerBandsOverlay class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.BollingerBandsOverlay.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.BollingerBandsOverlay.MultiplierProperty">
            <summary>
            Identifies the Multiplier dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BollingerBandsOverlay.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BollingerBandsOverlay.ValidateOverlay">
            <summary>
            Ensures the data for the overlay is calculated and valid before rendering.
            </summary>
            <returns>If rerendering is required.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BollingerBandsOverlay.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BollingerBandsOverlay.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.BollingerBandsOverlay.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BollingerBandsOverlay.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BollingerBandsOverlay.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.BollingerBandsOverlay.Period">
            <summary>
            Gets or sets the moving average period for the current BollingerBandOverlay object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for Bollinger band periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BollingerBandsOverlay.Multiplier">
            <summary>
            Gets or sets the moving average period for the current BollingerBandOverlay object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for Bollinger band multipliers is 2.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialBucketCalculator.FirstBucket">
            <summary>
            Gets or sets the first visible bucket of the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialBucketCalculator.LastBucket">
            <summary>
            Gets or sets the last visible bucket of the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialBucketCalculator.BucketSize">
            <summary>
            Gets or sets the bucket size of the series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.BollingerBandWidthIndicator">
            <summary>
            Represents a XamDataChart Bollinger Bandwidth indicator series.
            </summary>
            <remarks>
            Represents the normalized width of the bollinger bands for each provided value.
            For more info see: <see cref="T:Infragistics.Controls.Charts.BollingerBandsOverlay"/>
            <para>
            Default required members: High, Low, Close
            </para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.BollingerBandWidthIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BollingerBandWidthIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.BollingerBandWidthIndicator.MultiplierProperty">
            <summary>
            Identifies the ScalingFactor dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BollingerBandWidthIndicator.MultiplierOverride">
            <summary>
            Specifies the scaling factor to be used for the calculation.
            </summary>
            <returns>The scaling factor to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.BollingerBandWidthIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BollingerBandWidthIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BollingerBandWidthIndicator.Period">
            <summary>
            Gets or sets the moving average period for the Bollinger Band Width Indicator.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for CCI periods is 20.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BollingerBandWidthIndicator.Multiplier">
            <summary>
            Gets or sets the multiplier for the Bollinger Band width.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for Bollinger Band width multiplier is 2.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.BollingerBandWidthIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Bollinger Band Width indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.BollingerBandWidthIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.BollingerBandWidthIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.BollingerBandWidthIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.ChaikinOscillatorIndicator">
            <summary>
            Represents the XamDataChart Chaikin Oscillator indicator series.
            </summary>
            <remarks>
            Default required members: Close, Low, High, Volume
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.ChaikinOscillatorIndicator.ShortPeriodProperty">
            <summary>
            Identifies the ShortPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChaikinOscillatorIndicator.ShortPeriodOverride">
            <summary>
            Specifies the short period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.ChaikinOscillatorIndicator.LongPeriodProperty">
            <summary>
            Identifies the LongPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChaikinOscillatorIndicator.LongPeriodOverride">
            <summary>
            Specifies the long period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChaikinOscillatorIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChaikinOscillatorIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChaikinOscillatorIndicator.ShortPeriod">
            <summary>
            Gets or sets the short moving average period for the current ChaikinOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for short CHO periods is 3.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChaikinOscillatorIndicator.LongPeriod">
            <summary>
            Gets or sets the long moving average period for the current ChaikinOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for long CHO periods is 10.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.ChaikinOscillatorIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Chaikin Oscillator indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.ChaikinOscillatorIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.ChaikinOscillatorIndicatorStrategy.#ctor">
            <summary>
            Constructs a ChaikinOscillatorIndicatorStrategy
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.ChaikinOscillatorIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.ChaikinOscillatorIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.ChaikinVolatilityIndicator">
            <summary>
            Represents a XamDataChart Chaikin Volatility indicator series.
            </summary>
            <remarks>
            The ChaikinVolatility indicator attempts to show volatility by displaying the spread between
            the high and low values.
            <para>
            Default required members: High, Low
            </para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.ChaikinVolatilityIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ChaikinVolatilityIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChaikinVolatilityIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChaikinVolatilityIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ChaikinVolatilityIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current ChaikinVolatilityIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for ChaikinVolatilityIndicator periods is 10.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.ChaikinVolatilityIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Chaikin Volatility indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.ChaikinVolatilityIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.ChaikinVolatilityIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.ChaikinVolatilityIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.CommodityChannelIndexIndicator">
            <summary>
            Represents a XamDataChart Commodity Channel Index indicator series.
            </summary>
            <remarks>
            Default required members: High, Low, Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.CommodityChannelIndexIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CommodityChannelIndexIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.CommodityChannelIndexIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CommodityChannelIndexIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CommodityChannelIndexIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current CCISeries object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for CCI periods is 20.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.CommodityChannelIndexIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Commodity Channel Index indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.CommodityChannelIndexIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.CommodityChannelIndexIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.CommodityChannelIndexIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.CustomIndicator">
            <summary>
            Represents a XamDataChart Custom Indicator series.
            <para>
            The indicator value is calculated in the user specified Indicator event handler. 
            </para>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CustomIndicator.BasedOn(System.Int32,System.Int32)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CustomIndicator.IndicatorOverride(System.Int32,System.Int32)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="position">The position to calculate from.</param>
            <param name="count">The number of positions to calculate for.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.CustomIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.CustomIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.CustomIndicator.Indicator">
            <summary>
            Handle this event in order to perform a custom indicator calculation.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.CustomIndicator.BasedOnColumns">
            <summary>
            Handle this event in order to indicate which columns this custom indicator
            is based on.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CustomIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a custom indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.CustomIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CustomIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CustomIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.DetrendedPriceOscillatorIndicator">
            <summary>
            Represents a XamDataChart Detrended Price Oscillator indicator series.
            </summary>
            <remarks>
            Default required members: Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.DetrendedPriceOscillatorIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.DetrendedPriceOscillatorIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.DetrendedPriceOscillatorIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DetrendedPriceOscillatorIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.DetrendedPriceOscillatorIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current DetrendedPriceOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for DPO periods is 20.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.DetrendedPriceOscillatorIndicatorStrategy">
            <summary>
            Represents a strategy for calculating a Detrended Price Oscillator indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.DetrendedPriceOscillatorIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.DetrendedPriceOscillatorIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.DetrendedPriceOscillatorIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.EaseOfMovementIndicator">
            <summary>
            Represents a XamDataChart Ease of Movement indicator series.
            </summary>
            <remarks>
            The ease of movement indicator by Richard W. Arms, Jr relates the price change of an asset to
            its volume. Normally smoothed with a moving average.
            <para>
            Default required members: Low, High, Volume
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.EaseOfMovementIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.EaseOfMovementIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.EaseOfMovementIndicatorStrategy">
            <summary>
            Represents a strategy for calculating an Ease of Movement indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.EaseOfMovementIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.EaseOfMovementIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.EaseOfMovementIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.FastStochasticOscillatorIndicator">
            <summary>
            Represents a XamDataChart Fast Stochastic Oscillator indicator series.
            </summary>
            <remarks>
            Default required members: High, Low, Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.FastStochasticOscillatorIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FastStochasticOscillatorIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.FastStochasticOscillatorIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FastStochasticOscillatorIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FastStochasticOscillatorIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current FastStochasticOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for FastStochasticOscillatorIndicator periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.FastStochasticOscillatorIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a FastStochasticOscillatorIndicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.FastStochasticOscillatorIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.FastStochasticOscillatorIndicatorStrategy.#ctor">
            <summary>
            Constructs a FastStochasticOscillatorIndicatorStrategy.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.FastStochasticOscillatorIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.FastStochasticOscillatorIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.FinancialPriceSeries">
            <summary>
            Represents a XamDataChart financial price series that renders as Candlestick or OHLC representations.
            </summary>
            <remarks>
            Default required members: Open, Low, High, Close
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialPriceSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialPriceSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialPriceSeries.#ctor">
            <summary>
            Initializes a new instance of the FinancialIndicator class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineTypeProperty">
            <summary>
            Identifies the TrendLineType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineBrushProperty">
            <summary>
            Identifies the TrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialPriceSeries.ActualTrendLineBrushProperty">
            <summary>
            Identifies the ActualTrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineThicknessProperty">
            <summary>
            Identifies the TrendLineThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineDashCapProperty">
            <summary>
            Identifies the TrendLineDashCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineDashArrayProperty">
            <summary>
            Identifies the TrendLineDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLinePeriodProperty">
            <summary>
            Identifies the TrendLinePeriod dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineZIndexProperty">
            <summary>
            Identifies the TrendLineZIndex dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialPriceSeries.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.FinancialPriceSeries.DisplayTypeProperty">
            <summary>
            Identifies the DisplayType dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialPriceSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialPriceSeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialPriceSeries.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the series to display the item for the specified data item.
            </summary>
            <remarks>
            The categorySeries is scrolled by the minimum amount required to place the specified data item within
            the central 80% of the visible axis.
            </remarks>
            <param name="item">The data item (item) to scroll to.</param>
            <returns>True if the specified item could be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialPriceSeries.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialPriceSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialPriceSeries.Item(System.Object,System.Windows.Point)">
            <summary>
            Returns the item that is found at the given point.
            </summary>
            <param name="sender">The origin of the mouse interaction.</param>
            <param name="point">The point to search for the item near.</param>
            <returns>The found item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FinancialPriceSeries.UpdateIndexedProperties">
            <summary>
            Updates properties that are based on the index of the series in the series collection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineType">
            <summary>
            Gets or sets the trend type for the current financial series.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineBrush">
            <summary>
            Gets or sets the brush to use to draw the trend line.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialPriceSeries.ActualTrendLineBrush">
            <summary>
            Gets the effective TrendLineBrush for this FinancialPriceSeries.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineThickness">
            <summary>
            Gets or sets the thickness of the current FinancialPriceSeries object's trend line.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineDashCap">
            <summary>
            Gets or sets the PenLineCap enumeration value that specifies how the current
            FinancialPriceSeries object's trend line dash ends are drawn. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineDashArray">
            <summary>
            Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
            is used to draw the trend line for the current FinancialPriceSeries object. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLinePeriod">
            <summary>
            Gets or sets the trend line period for the current series.
            <para>
            This is a dependency property.
            </para>        
            </summary>
            <remarks>
            The typical, and initial, value for trend line period is 7.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialPriceSeries.TrendLineZIndex">
            <summary>
            Gets or sets the trend line Z index for the current series.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The trend line renders over the series and markers by default, lower this value to shift it to the background.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialPriceSeries.DisplayType">
            <summary>
            Gets or sets the display type for the current FinancialPriceSeries object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ForceIndexIndicator">
            <summary>
            Represents a XamDataChart Force Index indicator series.
            </summary>
            <remarks>
            Default required members: Close, Volume
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.ForceIndexIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ForceIndexIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.ForceIndexIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ForceIndexIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ForceIndexIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current AverageTrueRangeSeries object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for ForceIndiex periods is 0.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.ForceIndexIndicatorStrategy">
            <summary>
            Represents a strategy for calculating an Force Index indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.ForceIndexIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.ForceIndexIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.ForceIndexIndicatorStrategy.FI(Infragistics.Controls.Charts.FinancialCalculationDataSource)">
            <summary>
            Calculates the force index values for the target series.
            </summary>
            <param name="dataSource">The data to use for the calculation.</param>
            <returns>A list of force index values.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.ForceIndexIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator">
            <summary>
            Represents a XamDataChart Full Stochastic Oscillator indicator series.
            </summary>
            <remarks>
            Default required members: High, Low, Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.SmoothingPeriodProperty">
            <summary>
            Identifies the SmoothingPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.ShortPeriodOverride">
            <summary>
            Specifies the short period to use for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.TriggerPeriodProperty">
            <summary>
            Identifies the TriggerPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.LongPeriodOverride">
            <summary>
            Specifies the long period to use for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.TrendPeriodOverride">
            <summary>
            Specifies the trend period to use for the trend line, overriding 
            the TrendLinePeriod for the series.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current FullStochasticOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for FullStochasticOscillatorIndicator periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.SmoothingPeriod">
            <summary>
            Gets or sets the moving average SmoothingPeriod for the current FullStochasticOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for FullStochasticOscillatorIndicator SmoothingPeriod is 3.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator.TriggerPeriod">
            <summary>
            Gets or sets the moving average TriggerPeriod for the current FullStochasticOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for FullStochasticOscillatorIndicator TriggerPeriod is 3.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.FullStochasticOscillatorIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a FullStochasticOscillatorIndicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.FullStochasticOscillatorIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.FullStochasticOscillatorIndicatorStrategy.#ctor">
            <summary>
            Constructs a FullStochasticOscillatorIndicatorStrategy
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.FullStochasticOscillatorIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.FullStochasticOscillatorIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.PercentKCalculationStrategy">
            <summary>
            Represents the strategy for calculating a list of %K values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.PercentKCalculationStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.PercentKCalculationStrategy.ProvideStream(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Provides a stream of calculated indicator values and does not fill
            the IndicatorColumn in the datasource.
            </summary>
            <param name="dataSource">The data required by the contract between these 
            strategies and the financial series.</param>
            <param name="supportingCalculations">The calculation strategies required by the 
            contract between these strategies and the finiancial series.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.PercentKCalculationStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.FinancialCalculationDataSource">
            <summary>
            Represents the data contract between a financial series and the 
            decoupled calculation responsibilities which implement its mathmatical logic.
            </summary>
            <remarks>
            The FinancialCalculationDataSource contract represents the subset
            of data which needs to be provided in order to test or run a calculation,
            and its intentionally a subset of the information available to the series, 
            in order to make calculation strategies more easily testable and usable in isolation to
            the financial series container.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.OpenColumn">
            <summary>
            A read only collection of the open values for the financial series
            that is requesting an indicator calculation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.CloseColumn">
            <summary>
            A read only collection of the close values for the financial series
            that is requesting an indicator calculation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.HighColumn">
            <summary>
            A read only collection of the high values for the financial series
            that is requesting an indicator calculation
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.LowColumn">
            <summary>
            A read only collection of the low values for that financial series
            that is requesting an indicator calculation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.VolumeColumn">
            <summary>
            A read only collection of the volume values for the financial series
            that is requesting an indicator calculation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.IndicatorColumn">
            <summary>
            The output values for the indicator which the strategy calculates.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.TypicalColumn">
            <summary>
            An enumerable list of typical prices provided by the series to use
            in calculations.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.TrueRange">
            <summary>
            And enumerable list of true range values provided by the series to use
            in calculations.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.TrueLow">
            <summary>
            An enumerable list of true low values provided by the series to use
            in calculations.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.Period">
            <summary>
            The period to use when calculating, if applicable.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.ShortPeriod">
            <summary>
            The short period to use when calculating, if applicable.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.LongPeriod">
            <summary>
            The long period to use when calculating, if applicable.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.Count">
            <summary>
            The count of the values in the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.CalculateFrom">
            <summary>
            The starting index from which to calculate
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.CalculateCount">
            <summary>
            The number of items from the starting index from which to calculate
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.Multiplier">
            <summary>
            If the calculation supports some sort of scaling factor, 
            this value will be used.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.MinimumValue">
            <summary>
            If the calculation determines the range of indicator values,
            it will set the minimum and maximux properties.
            </summary>
            <remarks>
            This will contain the previous minimum value when the indicator
            calculation is called again, in case this makes the update of the
            value speedier.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.MaximumValue">
            <summary>
            If the calculation determines the range of indicator values,
            it will set the minimum and maximux properties.
            </summary>
            <remarks>
            This will contain the previous minimum value when the indicator
            calculation is called again, in case this makes the update of the
            value speedier.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationDataSource.SpecifiesRange">
            <summary>
            The calculation strategy should set this to true if it 
            specifes the minimum and maximum value properties.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations">
            <summary>
            Represents a contract between the financial series and the calculation strategies
            detailing the supporting calculation strategies that the financial series will 
            provide in order for the indicator calculations to be performed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations.EMA">
            <summary>
            The strategy provided to calculate an exponential moving average for a collection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations.SMA">
            <summary>
            The strategy provided to calculate a simple moving average for a collection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations.STDEV">
            <summary>
            The strategy provided to calculate a standard deviation for a collection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations.MovingSum">
            <summary>
            The strategy provided to calculate a moving sum for a collection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations.ShortVolumeOscillatorAverage">
            <summary>
            The strategy provided to calculate the short period moving average for volume oscillator indicators.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations.LongVolumeOscillatorAverage">
            <summary>
            The strategy provided to calculate the long period moving average for volume oscillator indicators.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations.ShortPriceOscillatorAverage">
            <summary>
            The strategy provided to calculate the short period moving average for price oscillator indicators.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations.LongPriceOscillatorAverage">
            <summary>
            The strategy provided to calculate the long period moving average for price oscillator indicators.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations.ToEnumerableRange">
            <summary>
            The strategy provided to convert a lamda expression taking the index into the data to convert into
            an enumeration over the input data using a configurable range.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations.ToEnumerable">
            <summary>
            The strategy provided to convert a lamda expression taking the index into the data to convert into
            an enumeration over the input data using a configurable length.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations.MakeSafe">
            <summary>
            The strategy provided to make doubles safe for plotting, by default will just make zero if the value
            is invalid.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SupportingCalculation`1">
            <summary>
            Represents a supporting calculation strategy.
            </summary>
            <typeparam name="TCalculationStrategy">The type of delegate that performs the strategy.</typeparam>
        </member>
        <member name="M:Infragistics.Controls.Charts.SupportingCalculation`1.#ctor(`0)">
            <summary>
            Constructs a SupportingCalculation
            </summary>
            <param name="strategy">The strategy to use.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SupportingCalculation`1.#ctor(`0,System.Collections.Generic.IList{System.String})">
            <summary>
            Constructs a SupportingCalculation
            </summary>
            <param name="strategy">The strategy to use.</param>
            <param name="basedOn">The properties that the calculation is based on.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.SupportingCalculation`1.Strategy">
            <summary>
            The strategy for the calculation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SupportingCalculation`1.BasedOn">
            <summary>
            The properties the calculation is based on.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SupportingCalculationStrategy">
            <summary>
            A strategy for supporting calculations.
            </summary>
            <param name="source">The source of the data.</param>
            <param name="period">The period for the calculation.</param>
            <returns>The calculated data.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.ColumnSupportingCalculation">
            <summary>
            Represents a calculation strategy that takes in a column of values
            and returns a resulting column of values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnSupportingCalculation.#ctor(Infragistics.Controls.Charts.SupportingCalculationStrategy)">
            <summary>
            Constructs a ColumnSupportingCalculation
            </summary>
            <param name="strategy">The strategy to use.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnSupportingCalculation.#ctor(Infragistics.Controls.Charts.SupportingCalculationStrategy,System.Collections.Generic.IList{System.String})">
            <summary>
            Constructs a ColumnSupportingCalculation
            </summary>
            <param name="strategy">The strategy to use.</param>
            <param name="basedOn">The properties that the calculation is based on.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.ProvideColumnValuesStrategy">
            <summary>
            A strategy to provide columns for the indicator.
            </summary>
            <param name="dataSource">The datasource to use.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.DataSourceSupportingCalculation">
            <summary>
            Represents a calculation strategy that uses the calculation data source
            to product a column of values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.DataSourceSupportingCalculation.#ctor(Infragistics.Controls.Charts.ProvideColumnValuesStrategy)">
            <summary>
            Constructs a DataSourceSupportingCalculation
            </summary>
            <param name="strategy">The strategy to use.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.DataSourceSupportingCalculation.#ctor(Infragistics.Controls.Charts.ProvideColumnValuesStrategy,System.Collections.Generic.IList{System.String})">
            <summary>
            Constructs a DataSourceSupportingCalculation
            </summary>
            <param name="strategy">The strategy to use.</param>
            <param name="basedOn">The properties that the calculation is based on.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculatedColumn">
            <summary>
            Represents a column that is calculated based on the values of other columns.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculatedColumn.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.String[])">
            <summary>
            Constructs a new calculated column.
            </summary>
            <param name="valuesProvider">A list that provides the values of the column.</param>
            <param name="basedOn">The columns on which this calculated column is based.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculatedColumn.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IList{System.String})">
            <summary>
            Constructs a new calculated column instance.
            </summary>
            <param name="valuesProvider">A list that provides the values for the column.</param>
            <param name="basedOn">The columns on which this calculated column is based.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculatedColumn.GetEnumerator">
            <summary>
            Provides an enumerator for this calculated column.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculatedColumn.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Provides an enumerator for this calculated column.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.CalculatedColumn.BasedOn">
            <summary>
            The columns on which this calculated column is based.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.IndicatorRenderer.RasterizeLine(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Boolean,System.Windows.Rect,System.Windows.Rect,System.Windows.Shapes.Path,System.Windows.Shapes.Path,System.Windows.Shapes.Path,System.Windows.Shapes.Path,System.Windows.Shapes.Path,System.Windows.Shapes.Path,System.Double,System.Double)">
            <summary>
            Renders into a potentially chunky polyline
            </summary>
            <param name="count">Number of points</param>
            <param name="x0">Bottom points x coordinate indexed left to right</param>
            <param name="y0">Bottom points y coordinate indexed left to right</param>
            <param name="x1">Top points x coordinate indexed left to right</param>
            <param name="y1">Top points y coordinate indexed left to right</param>
            <param name="colorByGradient">Whether to color by gradient.</param>
            <param name="windowRect">Chart's window</param>
            <param name="viewportRect">Chart's viewport</param>
            <param name="positivePath0">First positive path</param>
            <param name="positivePath01">Second positive path</param>
            <param name="positivePath1">Third positive path</param>
            <param name="negativePath0">First negative path</param>
            <param name="negativePath01">Second negative path</param>
            <param name="negativePath1">Third negative path</param>
            <param name="bucketSize">Bucket size</param>
            <param name="resolution">Resolution</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.IndicatorRenderer.RasterizeArea(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Boolean,System.Windows.Rect,System.Windows.Rect,System.Windows.Shapes.Path,System.Windows.Shapes.Path,System.Windows.Shapes.Path,System.Windows.Shapes.Path,System.Windows.Shapes.Path,System.Windows.Shapes.Path,System.Double,System.Double,System.Double)">
            <summary>
            Renders a polygon
            </summary>
            <param name="count">Number of points</param>
            <param name="x0">Bottom points x coordinate indexed left to right</param>
            <param name="y0">Bottom points y coordinate indexed left to right</param>
            <param name="x1">Top points x coordinate indexed left to right</param>
            <param name="y1">Top points y coordinate indexed left to right</param>
            <param name="colorByGradient">Whether to color by gradient.</param>
            <param name="windowRect">Chart's window</param>
            <param name="viewportRect">Chart's viewport</param>
            <param name="positivePath0">First positive path</param>
            <param name="positivePath01">Second positive path</param>
            <param name="positivePath1">Third positive path</param>
            <param name="negativePath0">First negative path</param>
            <param name="negativePath01">Second negative path</param>
            <param name="negativePath1">Third negative path</param>
            <param name="worldZero">Zero line</param>
            <param name="bucketSize">Bucket size</param>
            <param name="resolution">Resolution</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.IndicatorRenderer.RasterizeColumns(System.Int32,System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Func{System.Int32,System.Double},System.Boolean,System.Double,Infragistics.Controls.Charts.Util.Pool{System.Windows.Media.LineGeometry},System.Windows.Shapes.Path,System.Windows.Shapes.Path)">
            <summary>
            Generated the visuals for a set of columns based on the data.
            </summary>
            <param name="count">Number of points</param>
            <param name="x0">Bottom points x coordinate indexed left to right</param>
            <param name="y0">Bottom points y coordinate indexed left to right</param>
            <param name="x1">Top points x coordinate indexed left to right</param>
            <param name="y1">Top points y coordinate indexed left to right</param>
            <param name="colorByGradient">Whether to color by gradient</param>
            <param name="worldZero">Zero line</param>
            <param name="Columns">Column pool</param>
            <param name="positiveColumns">Positive columns path</param>
            <param name="negativeColumns">Negative columns path</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.ItemwiseIndicatorCalculationStrategy">
            <summary>
            Represents a decoupled strategy for calculating a financial indicator from data
            provided by a financial series. Will be called seperately for each item.
            </summary>
            <remarks>
            The data which the strategy will use for its calculation is
            a simplified subset of the data that the series makes available and is defined by 
            the contract <see cref="T:Infragistics.Controls.Charts.FinancialCalculationDataSource"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.ItemwiseIndicatorCalculationStrategy.CalculateIndicatorItem(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations,System.Int32)">
            <summary>
            Performs the calculation associated with this calculation strategy for one item.
            </summary>
            <param name="dataSource">The data required by the contract between these 
            strategies and the financial series.</param>
            <param name="supportingCalculations">The calculation strategies required by the 
            contract between these strategies and the finiancial series.</param>
            <param name="currentIndex">The index in the indicator collection to calculate.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ItemwiseIndicatorCalculationStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            The calculation strategy is required to express which columns its values are based on
            so that the series knows when to ask for recalculation.
            </summary>
            <param name="dataSource">The data source we will be calculating for.</param>
            <param name="supportingCalculations">The supporting calculations to be used
            in the calculation.</param>
            <returns>The list of column names that this calculation is based on.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.ItemwiseStrategyBasedIndicator">
            <summary>
            Financial indicator base class for doing calculating an itemwize indicator.
            </summary>
            <remarks>
            An itemwise indicator's individual values don't depend on any other values in the 
            collection so can always be independantly recalculated. Also, because of this, the 
            base class handles all the looping logic and inheritors only need to provide the 
            actual calculation.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.ItemwiseStrategyBasedIndicator.#ctor">
            <summary>
            Constructs the ItemwiseStrategyBasedIndicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ItemwiseStrategyBasedIndicator.CalculationStrategy">
            <summary>
            Specifies the strategy to use for the calculation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ItemwiseStrategyCalculationStrategy">
            <summary>
            Indicator calculation strategy that handles applying an itemwise strategy
            to the indicator values that are requested to be calculated.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ItemwiseStrategyCalculationStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ItemwiseStrategyCalculationStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.ItemwiseStrategyCalculationStrategy.ItemwiseStrategy">
            <summary>
            The strategy that will be applied itemwize across the calculation.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.MarketFacilitationIndexIndicator">
            <summary>
            Represents a XamDataChart Market Facilitation Index indicator series.
            </summary>
            <remarks>
            The Market Facilitation Index (MFI) indicator is represented by
            the difference of the high and the low for a bar divided by the volume.
            <para>
            Default required members: High, Low, Volume
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarketFacilitationIndexIndicator.ItemwiseStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MarketFacilitationIndexIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.MarketFacilitationIndexIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Market Facilitation Index indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.MarketFacilitationIndexIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.MarketFacilitationIndexIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.MarketFacilitationIndexIndicatorStrategy.CalculateIndicatorItem(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations,System.Int32)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <param name="currentIndex">The index in the indicator collection to calculate.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.MassIndexIndicator">
            <summary>
            Represents a XamDataChart Mass Index indicator series.
            </summary>
            <remarks>
            Default required members: High, Low
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.MassIndexIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MassIndexIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.MassIndexIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Mass Index indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.MassIndexIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.MassIndexIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.MassIndexIndicatorStrategy.HighLowRange(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns a list of range values between the high values and the low values.
            </summary>
            <param name="highColumn">The column from which to take the high values.</param>
            <param name="lowColumn">The column from which to take the low values.</param>
            <returns>The list of range values.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.MassIndexIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.MedianPriceIndicator">
            <summary>
            Represents a XamDataChart Median Price indicator series.
            </summary>
            <remarks>
            Default required members: High, Low
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.MedianPriceIndicator.ItemwiseStrategy">
            <summary>
            Returns the itemwise calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MedianPriceIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.MedianPriceIndicatorStrategy">
            <summary>
            Represents a strategy for calculating an Median Price indicator.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.MedianPriceIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.MedianPriceIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.MedianPriceIndicatorStrategy.CalculateIndicatorItem(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations,System.Int32)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <param name="currentIndex">The index in the indicator collection to calculate.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.MoneyFlowIndexIndicator">
            <summary>
            Represents a XamDataChart Money Flow Index indicator series.
            </summary>
            <remarks> 
            <para>
            Default required members: Close, Low, High, Volume
            </para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.MoneyFlowIndexIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.MoneyFlowIndexIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.MoneyFlowIndexIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MoneyFlowIndexIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MoneyFlowIndexIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current MoneyFlowIndexIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for MoneyFlowIndexIndicator periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.MoneyFlowIndexIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Money Flow Index indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.MoneyFlowIndexIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.MoneyFlowIndexIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.MoneyFlowIndexIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator">
            <summary>
            Represents a XamDataChart Moving Average Convergence/Divergence (MACD) indicator series.
            </summary>
            <remarks>
            <para>
            Default required members: High, Low, Close
            </para>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator.ShortPeriodProperty">
            <summary>
            Identifies the ShortPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator.ShortPeriodOverride">
            <summary>
            Specifies the short period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator.LongPeriodProperty">
            <summary>
            Identifies the LongPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator.LongPeriodOverride">
            <summary>
            Specifies the long period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator.SignalPeriodProperty">
            <summary>
            Identifies the SignalPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator.TrendPeriodOverride">
            <summary>
            Specifies the trend period to use for the trend line, overriding 
            the TrendLinePeriod for the series.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator.ShortPeriod">
            <summary>
            Gets or sets the short moving average period for the current MovingAverageConvergenceDivergenceIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for short MACD periods is 10.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator.LongPeriod">
            <summary>
            Gets or sets the long moving average period for the current MovingAverageConvergenceDivergenceIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for long MACD periods is 30.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator.SignalPeriod">
            <summary>
            Gets or sets the long moving average period for the current MovingAverageConvergenceDivergenceIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for long PVO periods is 30.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.MovingAverageConvergenceDivergenceIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a MovingAverageConvergenceDivergenceIndicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.MovingAverageConvergenceDivergenceIndicator"/>
            </remarks>    
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.MovingAverageConvergenceDivergenceIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.MovingAverageConvergenceDivergenceIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.NegativeVolumeIndexIndicator">
            <summary>
            Represents a XamDataChart Negative Volume Index indicator (NVI) series.
            </summary>
            <remarks>
            Default required members: Close, Volume
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.NegativeVolumeIndexIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.NegativeVolumeIndexIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.NegativeVolumeIndexIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Negative Volume Index indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.NegativeVolumeIndexIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.NegativeVolumeIndexIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.NegativeVolumeIndexIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.OnBalanceVolumeIndicator">
            <summary>
            Represents a XamDataChart On Balance Bolume indicator series.
            </summary>
            <remarks>
            <para>
            Default required members: Close, Volume
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.OnBalanceVolumeIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.OnBalanceVolumeIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.OnBalanceVolumeIndicatorStrategy">
            <summary>
            Represents the strategy for calculating an On Balance Volume indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.OnBalanceVolumeIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.OnBalanceVolumeIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.OnBalanceVolumeIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.PercentagePriceOscillatorIndicator">
            <summary>
            Represents a XamDataChart percentage price oscillator series.
            </summary>
            <remarks>
            Default required members: High, Low, Volume
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.PercentagePriceOscillatorIndicator.ShortPeriodProperty">
            <summary>
            Identifies the ShortPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PercentagePriceOscillatorIndicator.ShortPeriodOverride">
            <summary>
            Specifies the short period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.PercentagePriceOscillatorIndicator.LongPeriodProperty">
            <summary>
            Identifies the LongPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PercentagePriceOscillatorIndicator.LongPeriodOverride">
            <summary>
            Specifies the long period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.PercentagePriceOscillatorIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PercentagePriceOscillatorIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PercentagePriceOscillatorIndicator.ShortPeriod">
            <summary>
            Gets or sets the short moving average period for the current PercentagePriceOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for short PPO periods is 10.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PercentagePriceOscillatorIndicator.LongPeriod">
            <summary>
            Gets or sets the long moving average period for the current PercentagePriceOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for long PVO periods is 30.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.PercentagePriceOscillatorIndicatorStrategy">
            <summary>
            Represents a strategy for calculating an Percentage Price Oscillator indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.PercentagePriceOscillatorIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.PercentagePriceOscillatorIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.PercentagePriceOscillatorIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.PercentageVolumeOscillatorIndicator">
            <summary>
            Represents a XamDataChart Percentage Volume Oscillator (PVO) series.
            </summary>
            <remarks>
            Default required members: Volume
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.PercentageVolumeOscillatorIndicator.ShortPeriodProperty">
            <summary>
            Identifies the ShortPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PercentageVolumeOscillatorIndicator.ShortPeriodOverride">
            <summary>
            Specifies the short period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.PercentageVolumeOscillatorIndicator.LongPeriodProperty">
            <summary>
            Identifies the LongPeriod dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PercentageVolumeOscillatorIndicator.LongPeriodOverride">
            <summary>
            Specifies the long period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.PercentageVolumeOscillatorIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PercentageVolumeOscillatorIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PercentageVolumeOscillatorIndicator.ShortPeriod">
            <summary>
            Gets or sets the short moving average period for the current PercentageVolumeOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for short PVO periods is 10.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PercentageVolumeOscillatorIndicator.LongPeriod">
            <summary>
            Gets or sets the short moving average period for the current PercentageVolumeOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for long PVO periods is 30.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.PercentageVolumeOscillatorIndicatorStrategy">
            <summary>
            Represents a strategy for calculating an Absolute Volume Oscillator indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.AbsoluteVolumeOscillatorIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.PercentageVolumeOscillatorIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.PercentageVolumeOscillatorIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.PositiveVolumeIndexIndicator">
            <summary>
            Represents a XamDataChart Positive Volume Index (PVI) indicator series.
            </summary>
            <remarks>
            Default required members: Close, Volume
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.PositiveVolumeIndexIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PositiveVolumeIndexIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.PositiveVolumeIndexIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Positive Volume Index indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.PositiveVolumeIndexIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.PositiveVolumeIndexIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.PositiveVolumeIndexIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.PriceChannelOverlay">
            <summary>
            Represents a XamDataChart Financial Price Channel Overlay series.
            </summary>
            <remarks>
            Default required members: High, Low
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.PriceChannelOverlay.#ctor">
            <summary>
            Initializes a new instance of the PriceChannelOverlay class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PriceChannelOverlay.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PriceChannelOverlay.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PriceChannelOverlay.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PriceChannelOverlay.ValidateOverlay">
            <summary>
            Ensures the data for the overlay is calculated and valid before rendering.
            </summary>
            <returns>If rerendering is required.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PriceChannelOverlay.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PriceChannelOverlay.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PriceChannelOverlay.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.PriceChannelOverlay.Period">
            <summary>
            Gets or sets the moving average period for the current PriceChannelOverlay object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for Bollinger band periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PriceVolumeTrendIndicator">
            <summary>
            Represents a XamDataChart Price Volume Trend Indicator series.
            </summary>
            <remarks>
            Default required members: Volume, Close
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.PriceVolumeTrendIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PriceVolumeTrendIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.PriceVolumeTrendIndicatorStrategy">
            <summary>
            Represents the strategy for calculating an Price Volume Trend indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.PriceVolumeTrendIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.PriceVolumeTrendIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.PriceVolumeTrendIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.RateOfChangeAndMomentumIndicator">
            <summary>
            Represents a XamDataChart Rate of Change and Momentum indicator series.
            </summary>
            <remarks>
            Default required members: Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.RateOfChangeAndMomentumIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RateOfChangeAndMomentumIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.RateOfChangeAndMomentumIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RateOfChangeAndMomentumIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RateOfChangeAndMomentumIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current AverageTrueRangeSeries object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for AverageTrueRange periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.RateOfChangeAndMomentumIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Rate of Change and Momentum indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.RateOfChangeAndMomentumIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.RateOfChangeAndMomentumIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.RateOfChangeAndMomentumIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.RelativeStrengthIndexIndicator">
            <summary>
            Represents a XamDataChart Relative Strength Index indicator series.
            </summary>
            <remarks>
            Default required members: Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.RelativeStrengthIndexIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RelativeStrengthIndexIndicator.PeriodOverride">
            <summary>
            Specifies the period to use for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.RelativeStrengthIndexIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RelativeStrengthIndexIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RelativeStrengthIndexIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current RelativeStrengthIndexIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for RSI periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.RelativeStrengthIndexIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Relative String Index indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.RelativeStrengthIndexIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.RelativeStrengthIndexIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.RelativeStrengthIndexIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.RelativeStrengthIndexIndicatorStrategy.ProvideStream(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Provides a stream of calculated indicator values and does not fill
            the IndicatorColumn in the datasource.
            </summary>
            <param name="dataSource">The data required by the contract between these 
            strategies and the financial series.</param>
            <param name="supportingCalculations">The calculation strategies required by the 
            contract between these strategies and the finiancial series.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.SlowStochasticOscillatorIndicator">
            <summary>
            Represents a XamDataChart Slow Stochastic Oscillator indicator series.
            </summary>
            <remarks>
            Default required members: High, Low, Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.SlowStochasticOscillatorIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SlowStochasticOscillatorIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.SlowStochasticOscillatorIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SlowStochasticOscillatorIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SlowStochasticOscillatorIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current SlowStochasticOscillatorIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for SlowStochasticOscillatorIndicator periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.SlowStochasticOscillatorIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a SlowStochasticOscillatorIndicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.SlowStochasticOscillatorIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.SlowStochasticOscillatorIndicatorStrategy.#ctor">
            <summary>
            Constructs a SlowStochasticOscillatorIndicatorStrategy.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.SlowStochasticOscillatorIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.SlowStochasticOscillatorIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.StandardDeviationIndicator">
            <summary>
            Represents a XamDataChart Standard Deviation indicator series.
            </summary>
            <remarks>
            Default required members: High, Low, Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.StandardDeviationIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StandardDeviationIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.StandardDeviationIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StandardDeviationIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StandardDeviationIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current StandardDeviationIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for STDEV periods is 20.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.StandardDeviationIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Standard Deviation indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.StandardDeviationIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.StandardDeviationIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.StandardDeviationIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.StochRSIIndicator">
            <summary>
            Represents a XamDataChart StochRSI indicator series.
            </summary>
            <remarks>
            Default required members: Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.StochRSIIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StochRSIIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.StochRSIIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StochRSIIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StochRSIIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current StochRSIIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for StochRSI periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.StochRSIIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a StochRSI indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.StochRSIIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.StochRSIIndicatorStrategy.#ctor">
            <summary>
            Constructs a StochRSI Indicator strategy.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.StochRSIIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.StochRSIIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.TRIXIndicator">
            <summary>
            Represents a XamDataChart TRIX indicator series.
            </summary>
            <remarks>
            Default required members: Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.TRIXIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.TRIXIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.TRIXIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TRIXIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TRIXIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current TRIXIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for TRIX periods is 15.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.TRIXIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a TRIX indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.TRIXIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.TRIXIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.TRIXIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.TypicalPriceIndicator">
            <summary>
            Represents a XamDataChart Typical Price indicator series.
            </summary>
            <remarks>
            The typical price indicator is represented as a arithmetic average 
            of the High, Low, and Close for a day.
            <para>
            Default required members: High, Low, Close
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.TypicalPriceIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.TypicalPriceIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.TypicalPriceIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a typical price indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.TypicalPriceIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.TypicalPriceIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.TypicalPriceIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.UltimateOscillatorIndicator">
            <summary>
            Represents a XamDataChart Ultimate Oscillator indicator series.
            </summary>
            <remarks>
            Default required members: High, Low, Close
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.UltimateOscillatorIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.UltimateOscillatorIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.UltimateOscillatorIndicatorCalculationStrategy">
            <summary>
            Represents the strategy for calculating a Ultimate Oscillator indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.UltimateOscillatorIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.UltimateOscillatorIndicatorCalculationStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.UltimateOscillatorIndicatorCalculationStrategy.BuyingPressure(Infragistics.Controls.Charts.FinancialCalculationDataSource)">
            <summary>
            Calculates a sequence representing the buying pressure of the provided data.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <returns>A sequence representing each buying pressure value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.UltimateOscillatorIndicatorCalculationStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.WeightedCloseIndicator">
            <summary>
            Represents a XamDataChart Weigted Close indicator series.
            </summary>
            <remarks>
            The weighted close indicator shows an average of the high low and close
            for a day but with the closing price counted twice in the average.
            <para>
            Default required members: High, Low, Close
            </para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.WeightedCloseIndicator.ItemwiseStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.WeightedCloseIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.WeightedCloseIndicatorStrategy">
            <summary>
            Represents a strategy for calculating an Weighted Close indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.WeightedCloseIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.WeightedCloseIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.WeightedCloseIndicatorStrategy.CalculateIndicatorItem(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations,System.Int32)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <param name="currentIndex">The index in the indicator collection to calculate.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.WilliamsPercentRIndicator">
            <summary>
            Represents a XamDataChart Williams %R indicator series.
            </summary>
            <remarks>
            Default required members: High, Low, Close
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.WilliamsPercentRIndicator.PeriodProperty">
            <summary>
            Identifies the Period dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.WilliamsPercentRIndicator.PeriodOverride">
            <summary>
            Specifies the period value to be used for the calculation.
            </summary>
            <returns>The period to use.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.WilliamsPercentRIndicator.CalculationStrategy">
            <summary>
            Returns the calculation strategy to use for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.WilliamsPercentRIndicator.StyleKeyType">
            <summary>
            Returns the default style key that should be used for this indicator.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.WilliamsPercentRIndicator.Period">
            <summary>
            Gets or sets the moving average period for the current StandardDeviationIndicator object.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for Williams %R periods is 14.
            </remarks>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.CalculationStrategies.WilliamsPercentRIndicatorStrategy">
            <summary>
            Represents the strategy for calculating a Williams %R indicator series.
            </summary>
            <remarks>
            For definition of indicator see: <see cref="T:Infragistics.Controls.Charts.WilliamsPercentRIndicator"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.WilliamsPercentRIndicatorStrategy.BasedOn(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Exposes which columns this strategy uses in its calculation so that the
            consumers will know when they should ask the strategy to recalculate.
            </summary>
            <param name="dataSource">The data source to be used in the calculation</param>
            <param name="supportingCalculations">The other calculations that this indicator may depend on.</param>
            <returns>The list of column names that this strategy depends on.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.CalculationStrategies.WilliamsPercentRIndicatorStrategy.CalculateIndicator(Infragistics.Controls.Charts.FinancialCalculationDataSource,Infragistics.Controls.Charts.FinancialCalculationSupportingCalculations)">
            <summary>
            Performs the calculation for the indicator.
            </summary>
            <param name="dataSource">The data provided to perform the calculation.</param>
            <param name="supportingCalculations">The supporting calculation strategies provided to perform the calculation.</param>
            <returns>True if the calculation could be completed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.FunnelDataContext">
            <summary>
            Represents contextual data for the funnel chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FunnelDataContext.Item">
            <summary>
            The data item that is in context.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FunnelDataContext.Index">
            <summary>
            The index of the data item that is in context.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.FunnelFrame">
            <summary>
            Represents a visual frame for the funnel chart.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.FunnelSliceDisplay">
            <summary>
            Defines how the heights of the funnel slices should be determined.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FunnelSliceDisplay.Uniform">
            <summary>
            The slice heights should be uniform.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.FunnelSliceDisplay.Weighted">
            <summary>
            The slice heights should be weighted by value.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.IItemProvider">
            <summary>
            A source for data items.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.IItemProvider.GetItem(System.Int32)">
            <summary>
            Gets the data item at the specified index from the data item source.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <returns>The specified item.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.IItemProvider.Count">
            <summary>
            Gets the number of items in the source.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.IOuterLabelWidthDecider">
            <summary>
            Represents the object that has the reponsibility to decide the width required for the labels.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.IOuterLabelWidthDecider.DecideWidth(Infragistics.Controls.Charts.Util.ObjectColumn)">
            <summary>
            Determines the required with to render the specified labels.
            </summary>
            <param name="labelinfos">The labels that need to be rendered.</param>
            <returns>The width required to render the labels.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.OuterLabelAlignment">
            <summary>
            Specifies the positioning of the outer labels for the funnel chart.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.OuterLabelAlignment.Left">
            <summary>
            The labels will be displayed to the left of the chart.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.OuterLabelAlignment.Right">
            <summary>
            The labels will be displayed to the right of the chart.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SliceInfo">
            <summary>
            Represents information about a funnel slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceInfo.OuterLabel">
            <summary>
            Sets or Gets the outer label of a funnel slice
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SliceAppearance">
            <summary>
            Stores information about how a funnel slice should be rendered.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.Offset">
            <summary>
            Gets or sets the offset to render the slice at.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.UpperLeft">
            <summary>
            Gets or sets the position of the upper left point.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.BezierPoints">
            <summary>
            Gets or sets the left hand side rasterization of the bezier curve.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.RightBezierPoints">
            <summary>
            Gets or sets the right hand side rasterization of the bezier curve.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.Points">
            <summary>
            Gets or sets the aggregated points of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.UpperRight">
            <summary>
            Gets or sets the upper right point of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.LowerRight">
            <summary>
            Gets or sets the lower right point of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.LowerLeft">
            <summary>
            Gets or sets the lower left point of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.Style">
            <summary>
            Gets or sets the style of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.Fill">
            <summary>
            Gets or sets the fill of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.Outline">
            <summary>
            Gets or sets the outline of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.InnerLabel">
            <summary>
            Gets or sets the inner label of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.InnerLabelPosition">
            <summary>
            Gets or sets the position of the inner label of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.HasInnerLabel">
            <summary>
            Gets or sets whether the slice has an inner label.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.InnerLabelTemplate">
            <summary>
            Gets or sets the template to use for the inner label.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.Item">
            <summary>
            Gets or sets the item that is associated with the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.SliceAppearance.Index">
            <summary>
            Gets or sets the index that is associated with the slice.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SliceSelectionManager">
            <summary>
            Manages the selection of slices.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SliceSelectionManager.ToggleSelection(System.Int32,System.Object)">
            <summary>
            Toggles the selection of a slice at a given index.
            </summary>
            <param name="index">The index of the slice whose selection should be toggled.</param>
            <param name="item">The item at the specified index.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SliceSelectionManager.IsSelected(System.Int32)">
            <summary>
            Determines if the slice at a given index is selected.
            </summary>
            <param name="index">The index to use.</param>
            <returns>Whether the slice at the specified index is selected.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SliceSelectionManager.Any">
            <summary>
            Returns true if any of the slices are selected.
            </summary>
            <returns>True, if any of the slices are selected.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SliceSelectionManager.IsUnselected(System.Int32)">
            <summary>
            Determines if the slice at a given index is unselected.
            </summary>
            <param name="index">The index to use.</param>
            <returns>Whether the slice at the specified index is selected.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SliceSelectionManager.DataUpdated(Infragistics.Controls.Charts.Messaging.DataUpdatedMessage,Infragistics.Controls.Charts.Util.DoubleColumn)">
            <summary>
            Should be called to notify the manager that the data indexing has changed.
            </summary>
            <param name="m"></param>
            <param name="data"></param>
        </member>
        <member name="T:Infragistics.Controls.Charts.XamFunnelController">
            <summary>
            Represents the main logic of the funnel chart. Determines what should be rendered but not the how.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.DoubleAnimator_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Represents an animation tick.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.MessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Main message entry point.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.SizeValid">
            <summary>
            Determines if the size is valid, to allow for rendering.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.IsValid">
            <summary>
            Determines if the internal state is valid, to allow for rendering.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.RefreshVisuals">
            <summary>
            Refresh the visual components of the chart if necessary.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.Plot(System.Boolean,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Plots the current frame, and triggers animation if necessary.
            </summary>
            <param name="plotSlices">Indicates if the slices should be rendered.</param>
            <param name="plotOuterLabels">Indicates if the outer labels should be rendered.</param>
            <param name="plotInnerLabels">Indicates if the inner labels should be rendered.</param>
            <param name="plotAreaWidth">Indicates the available width in which to render.</param>
            <param name="outerLabelWidth">Indicates width in which the outer labels should be rendered.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.PlotFrame(Infragistics.Controls.Charts.FunnelFrame,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Plots the current frame.
            </summary>
            <param name="frame">The frame to update with the current render.</param>
            <param name="plotSlices">Indicates if the slices should be plotted.</param>
            <param name="plotOuterLabels">Indicates if the outer labels should be plotted.</param>
            <param name="plotInnerLabels">Indicates if the inner labels should be plotted.</param>
            <param name="plotAreaWidth">Indicates the width in which to render the slices.</param>
            <param name="outerLabelWidth">Indicates the width in which to render the outer labels.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.AddBezierPoints(Infragistics.Controls.Charts.SliceAppearance,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines the bezier points to add for a slice.
            </summary>
            <param name="sliceAppearance">The appearance parameters for the slice.</param>
            <param name="currentTop">The top of the current slice.</param>
            <param name="currentBottom">The bottom of the current slice.</param>
            <param name="plotAreaCenter">The center of the plot area.</param>
            <param name="offsetx">The x offset of the top left of the slice area.</param>
            <param name="offsety">The y offset of the top left of the slice area.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.PointDiffers(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines if two points differ.
            </summary>
            <param name="p1">The first point to compare</param>
            <param name="p2">The second point to compare</param>
            <returns>True if the points differ.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.InitializeBezier(System.Double,System.Double)">
            <summary>
            Initializes the parameters of the bezier curve that defines the edge of the funnel.
            </summary>
            <param name="plotAreaWidth">The width of the slice plot area.</param>
            <param name="plotAreaCenter">The center of the slice plot area.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetOuterLabel(System.Int32)">
            <summary>
            Gets the outer label at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetInnerLabel(System.Int32)">
            <summary>
            Gets the inner label at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetSliceStyle(System.Int32)">
            <summary>
            Gets the style for the slice at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetSliceOutline(System.Int32)">
            <summary>
            Gets the outline brush for the slice at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetSliceFill(System.Int32)">
            <summary>
            Gets the fill brush for the slice at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetWidthAt(System.Double,System.Double)">
            <summary>
            Gets the width of the funnel at the specified height.
            </summary>
            <param name="plotAreaWidth">The width of the entire slice area.</param>
            <param name="currentTop">The y value to get the width for.</param>
            <returns>The width at the specified height.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetSortedIndices">
            <summary>
            Gets the sorted indexes for the slices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.DisplayFrame(Infragistics.Controls.Charts.FunnelFrame)">
            <summary>
            Sends a frame to be rendered.
            </summary>
            <param name="frame">The frame to be rendered.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.UpdatePanelWidth(System.String,System.Double)">
            <summary>
            Sends that a panel should be resized in the view.
            </summary>
            <param name="panelName"></param>
            <param name="width"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.ShouldAnimate">
            <summary>
            Determines if animation should be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.SendClearMessage(System.String)">
            <summary>
            Sends that the view should clear the contents of a content area.
            </summary>
            <param name="areaID">The content area to clear the contents of.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetOuterLabels">
            <summary>
            Returns the outer labels for the chart.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.DataUpdatedMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            The data model has been updated.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.PropertyChangedMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when a property on the model has changed.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.ViewPropertyChangedMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when a property changes in the view, that we need to know about.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.ViewportChangedMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the viewport changed in the view.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.MouseButtonMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when a mouse button interaction occurs.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.OnSliceClicked(System.Int32)">
            <summary>
            Called when a slice is clicked.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.MouseMoveMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the mouse moves over the chart.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.MouseLeaveMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Is called when the mouse leaves the controls view.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.UpdateToolTip(System.Windows.Point)">
            <summary>
            Updates the tooltip to have new position and content.
            </summary>
            <param name="position">The new position for the tooltip.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetTooltipPosition(System.Windows.Point,System.Object)">
            <summary>
            Gets the correct position to display the tooltip.
            </summary>
            <param name="position"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetHoveredSliceIndex(System.Windows.Point)">
            <summary>
            Gets the index of the slice that is currently being hovered.
            </summary>
            <param name="point">The mouse position.</param>
            <returns>The hovered slice index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetPlotAreaWidth">
            <summary>
            Gets the width of the plot area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetSliceByYValue(System.Double)">
            <summary>
            Gets the slice that appears at the given y value.
            </summary>
            <param name="yVal">The y value to get the slice for.</param>
            <returns>The slice at the given y value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.GetCurrentFrame">
            <summary>
            Gets the current displayed frame for mouse interaction purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelController.UserSelectedItemsChangedMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the user indicates which slices should be selected.
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelController.DoubleAnimator">
            <summary>
            Handles the animation concerns of the funnel chart.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.FunnelSliceClickedEventArgs">
            <summary>
            Information about the clicked slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FunnelSliceClickedEventArgs.Index">
            <summary>
            The index of the clicked slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.FunnelSliceClickedEventArgs.Item">
            <summary>
            The data item for the clicked slice.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.FunnelSliceClickedEventHandler">
            <summary>
            Event handler for when a funnel slice is clicked.
            </summary>
            <param name="sender">The owner of the slice clicked.</param>
            <param name="args">Information about the clicked slice.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.XamFunnelChart">
            <summary>
            Represents a funnel chart.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.#ctor">
            <summary>
            Creates a funnel chart instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.SendDefaults">
            <summary>
            Send the default values of some properties that have non default() values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.SendItemProvider">
            <summary>
            Send our item provider implementation to the controller.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.OnServiceProviderChanged(Infragistics.Controls.Charts.Messaging.ServiceProvider,Infragistics.Controls.Charts.Messaging.ServiceProvider)">
            <summary>
            Called when the service provider changes.
            </summary>
            <param name="oldValue">The old service provider.</param>
            <param name="newValue">The new service provider.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.MessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when a message is received from the controller.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.FastItemsSourceProperty">
            <summary>
            Identifies the FastItemsSource dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.DataUpdated(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.ValueMemberPathProperty">
            <summary>
            Identifies the ValueMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.BrushesProperty">
            <summary>
            Identifies the Brushes dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.OutlinesProperty">
            <summary>
            Identifies the Outlines dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.BottomEdgeWidthProperty">
            <summary>
            Identifies the BottomEdgeWidth dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.InnerLabelMemberPathProperty">
            <summary>
            Identifies the InnerLabelMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.OuterLabelMemberPathProperty">
            <summary>
            Identifies the OuterLabelMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.InnerLabelVisibilityProperty">
            <summary>
            Identifies the InnerLabelVisibility dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.OuterLabelVisibilityProperty">
            <summary>
            Identifies the OuterLabelVisibility dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.OuterLabelAlignmentProperty">
            <summary>
            Identifies the OuterLabelAlignment dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.FunnelSliceDisplayProperty">
            <summary>
            Identifies the FunnelSliceDisplay dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.InnerLabelTemplateProperty">
            <summary>
            Identifies the InnerLabelTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.OuterLabelTemplateProperty">
            <summary>
            Identifies the OuterLabelTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.TransitionDurationProperty">
            <summary>
            Identifies the TransitionDuration dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.IsInvertedProperty">
            <summary>
            Identifies the IsInverted dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.UpperBezierControlPointProperty">
            <summary>
            Identifies the UpperBezierControlPoint dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.LowerBezierControlPointProperty">
            <summary>
            Identifies the LowerBezierControlPoint dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.UseBezierCurveProperty">
            <summary>
            Identifies the UseBezierCurve dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.AllowSliceSelectionProperty">
            <summary>
            Identifies the AllowSliceSelection dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.UseUnselectedStyleProperty">
            <summary>
            Identifies the UseUnselectedStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.SelectedSliceStyleProperty">
            <summary>
            Identifies the SelectedSliceStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.UnselectedSliceStyleProperty">
            <summary>
            Identifies the UnselectedSliceStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.ToolTipProperty">
            <summary>
            Identifies the ToolTip dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.LegendProperty">
            <summary>
            Identifies the Legend dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.LegendItemTemplateProperty">
            <summary>
            Identifies the LegendItemTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.LegendItemBadgeTemplateProperty">
            <summary>
            Identifies the LegendItemBadgeTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.UseOuterLabelsForLegendProperty">
            <summary>
            Identifies the UseOuterLabelsForLegend dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelChart.ToolTipInfoBoxStyleProperty">
            <summary>
            Identifies the ToolTipInfoBoxStyle dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Called when a property value changes.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.HandleBrushChanges(System.String,System.Object,System.Object)">
            <summary>
            Coerce brush changes into the appropriate format for the controller.
            </summary>
            <param name="propertyName">The property that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <returns>If the property change was handled.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.HandleItemsSourceChanges(System.String,System.Object,System.Object)">
            <summary>
            Handle changes to the various items source properties.
            </summary>
            <param name="propertyName">The property name that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <returns>True if the property change was handled.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.HandleValueMemberPathChange(System.String,System.Object,System.Object)">
            <summary>
            Handles changes to the member paths.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.HandleVisibilityChanges(System.String,System.Object,System.Object)">
            <summary>
            Coerce visibility changes into the appropariate format for the controller.
            </summary>
            <param name="propertyName">The property that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.HandleTimespans(System.String,System.Object,System.Object)">
            <summary>
            Coerce timespans into the appropriate format for the controller.
            </summary>
            <param name="propertyName">The property that changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
            <returns>True if the property change was handled.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.SliceClickedMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the controller indicates that a slice was clicked.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.SelectedItemsChangedMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the controller indicates that the selected items have been updated.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.SelectedItems_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called if the user has updated the selected items.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The parameters of the event.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.MergeItems(System.Collections.Generic.IList{System.Object},System.Collections.Generic.Dictionary{System.Object,System.Object},System.Collections.Generic.IList{System.Object},System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Merge the selected items lists.
            </summary>
            <param name="listA"></param>
            <param name="dictA"></param>
            <param name="listB"></param>
            <param name="dictB"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelChart.Infragistics#Controls#Charts#IItemProvider#GetItem(System.Int32)">
            <summary>
            Provides the item for the specified index.
            </summary>
            <param name="index">The index for which to provide the item.</param>
            <returns>The indicated item.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.MessageHandler">
            <summary>
            Handles communication message distribution.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.ServiceProvider">
            <summary>
            Provides the necessary services for the funnel chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.ConfigurationMessages">
            <summary>
            Communication channel to the controller.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.Connector">
            <summary>
            Connects this up do the controller and the view.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.ItemsSource">
            <summary>
            Gets or sets the ItemsSource for the funnel chart.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.FastItemsSource">
            <summary>
            Gets or sets the FastItemsSource for the funnel chart.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <para>
            The FastItemsSource is a proxy which handles caching, conversion and
            weak event listeners.
            </para>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.ValueMemberPath">
            <summary>
            Gets or sets the value member path for the funnel chart.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.ValueColumn">
            <summary>
            Gets the FastItemColumn representing the mapped values in the items source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.Brushes">
            <summary>
            Gets or sets the Brushes property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The brushes property defines the palette from which automatically assigned brushes are selected.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.Outlines">
            <summary>
            Gets or sets the Outlines property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The Outlines property defines the palette from which automatically assigned Outlines are selected.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.BottomEdgeWidth">
            <summary>
            Gets or sets the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.InnerLabelMemberPath">
            <summary>
            Gets or sets the InnerLabel mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.InnerLabelColumn">
            <summary>
            Gets the FastItemColumn representing the mapped InnerLabels in the items source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.OuterLabelMemberPath">
            <summary>
            Gets or sets the OuterLabel mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.OuterLabelColumn">
            <summary>
            Gets the FastItemColumn representing the mapped OuterLabels in the items source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.InnerLabelVisibility">
            <summary>
            Gets or sets whether the inner labels are visible.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.OuterLabelVisibility">
            <summary>
            Gets or sets whether the outer labels are visible.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.OuterLabelAlignment">
            <summary>
            Gets or sets which side of the chart the outer labels should appear.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.FunnelSliceDisplay">
            <summary>
            Gets or sets the how the heights of the funnel slices should be configured.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.InnerLabelTemplate">
            <summary>
            Gets or sets the DataTemplate to use when displaying the inner labels.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.OuterLabelTemplate">
            <summary>
            Gets or sets the DataTemplate to use when displaying the outer labels.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.TransitionDuration">
            <summary>
            Gets or sets how long the animations should take to run.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.IsInverted">
            <summary>
            Gets or sets if the funnel should be rendered inverted.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.UpperBezierControlPoint">
            <summary>
            Gets or sets the upper control point if a bezier curve is used to define the funnel.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.LowerBezierControlPoint">
            <summary>
            Gets or sets the lower control point if a bezier curve is used to define the funnel.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.UseBezierCurve">
            <summary>
            Gets or sets whether to use a bezier curve to define the funnel.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.AllowSliceSelection">
            <summary>
            Gets or sets whether to allow slices to be selected.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.UseUnselectedStyle">
            <summary>
            Gets or sets whether to use the unselected style on unselected slices.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.SelectedSliceStyle">
            <summary>
            Gets or sets the style to use for selected slices.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.UnselectedSliceStyle">
            <summary>
            Gets or sets the style to use for unselected slices.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.ToolTip">
            <summary>
            Gets or sets the ToolTip to display over the slices.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.SelectedItems">
            <summary>
            Represents the current selected items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.Legend">
            <summary>
            Gets or sets the Legend to display for the chart.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.LegendItemTemplate">
            <summary>
            Gets or sets the LegendItemTemplate to use for the legend items.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.LegendItemBadgeTemplate">
            <summary>
            Gets or sets the LegendItemBadgeTemplate to use for the legend items.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.UseOuterLabelsForLegend">
            <summary>
            Gets or sets whether to use the outer labels to identify the legend items.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.ToolTipInfoBoxStyle">
            <summary>
            Gets or sets the current XamFunnelChart's ToolTipInfoBoxStyle property.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.XamFunnelChart.SliceClicked">
            <summary>
            Raised when a slice is clicked.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelChart.Infragistics#Controls#Charts#IItemProvider#Count">
            <summary>
            Gets the count of the items bound.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.XamFunnelConnector">
            <summary>
            Connects the model, view, and controller of the funnel chart.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.XamFunnelSlice">
            <summary>
            Represents a slice in the funnel chart.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelSlice.#ctor">
            <summary>
            Initializes a default, empty XamFunnelSlice object. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelSlice.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelSlice.StrokeThicknessProperty">
            <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelSlice.FillProperty">
            <summary>
            Identifies the Fill dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelSlice.OutlineProperty">
            <summary>
            Identifies the Outline dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelSlice.ActualFillProperty">
            <summary>
            Identifies the ActualFill dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelSlice.ActualOutlineProperty">
            <summary>
            Identifies the ActualOutline dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelSlice.LabelVisibilityProperty">
            <summary>
            Identifies the LabelVisibility dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelSlice.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for this element.
            </summary>
            <param name="finalSize">The size available to this element for arranging its children.</param>
            <returns>The <see cref="T:System.Windows.Size"/> used by this element to arrange its children.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelSlice.LabelControl">
            <summary>
            The label control associated with the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelSlice.Owner">
            <summary>
            The owner of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelSlice.StrokeThickness">
            <summary>
            Gets or sets the thickness to use for the stroke of the slice.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelSlice.Fill">
            <summary>
            Gets or sets the brush to use for the filled portion of the slice.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelSlice.Outline">
            <summary>
            Gets or sets the brush to use for the stroke portion of the slice.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelSlice.ActualFill">
            <summary>
            Gets or sets the effective brush to use for the filled portion of the slice.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelSlice.ActualOutline">
            <summary>
            Gets or sets the effective brush to use for the stroke portion of the slice.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelSlice.LabelVisibility">
            <summary>
            Gets or sets whether the inner label is visible or not. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.XamFunnelView">
            <summary>
            Represents the visual portion of a funnel chart.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.#ctor">
            <summary>
            Creates a new instance of the visual portion of a funnel chart.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse is moved over the plot area.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is depressed over the plot area.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is release over the plot area.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse leaves the plot area.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.OnServiceProviderChanged(Infragistics.Controls.Charts.Messaging.ServiceProvider,Infragistics.Controls.Charts.Messaging.ServiceProvider)">
            <summary>
            Called when the service provider changes.
            </summary>
            <param name="oldValue">The old service provider.</param>
            <param name="newValue">The new service provider.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.MessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when a message is received from the controller.
            </summary>
            <param name="m">The received message.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.SendViewport">
            <summary>
            Send the current available viewport to the controller.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.PlotArea_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the render size of the plot area changes, necessitating notification of the controller.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.SendWidthDecider">
            <summary>
            Send our implementation fo teh width decider to the controller.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.DecideWidth(Infragistics.Controls.Charts.Util.ObjectColumn)">
            <summary>
            Determine the amount of space needed to render the provided labels.
            </summary>
            <param name="labels">The labels to check.</param>
            <returns>The width required.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.ClearMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the controller indicates that an area should be cleared of content.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.CleanupLabels(System.Windows.Controls.Panel)">
            <summary>
            Clean up any resources used by the labels.
            </summary>
            <param name="panel"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.CleanupSlices(System.Windows.Controls.Panel)">
            <summary>
            Clean up any resources used by the slices.
            </summary>
            <param name="panel"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.GetTarget(Infragistics.Controls.Charts.Messaging.RenderingMessage)">
            <summary>
            Determine the target of targettable rendering messages.
            </summary>
            <param name="m">The message received.</param>
            <returns>The target of the message.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.SetAreaSizeMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the controller has indicated that we should change the size of one of our areas.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.RenderSliceMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the controller has indicated we should render a funnel slice.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.RenderOuterLabelMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the controller has indicated that we should render an outer label.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.TemplateChangedMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the controller has indicated that we need to update one of our templates.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.TooltipValueChangedMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the controller has indicated that the tooltip value has changed.
            </summary>
            <param name="m">The message received.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.TooltipUpdateMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when the controller has indicated that the positioning of the tooltip has changed.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.ClearTooltipMessageReceived(Infragistics.Controls.Charts.Messaging.Message)">
            <summary>
            Called when teh controller has indicated taht the tooltip should be removed from display.
            </summary>
            <param name="m"></param>
        </member>
        <member name="F:Infragistics.Controls.Charts.XamFunnelView.SliceUsedProperty">
            <summary>
            Identifies the SliceUsed attached dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.GetSliceUsed(System.Windows.DependencyObject)">
            <summary>
            Gets whether a slice is in use by the funnel view.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamFunnelView.SetSliceUsed(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether a slice is in use by the funnel view.
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.MessageHandler">
            <summary>
            Handles messages incoming from the controller.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.ServiceProvider">
            <summary>
            Provides the necessary services to interact with the controller and the model.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.InteractionMessages">
            <summary>
            Used to send messages to the controller.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.LeftLabels">
            <summary>
            Represents an area to draw labels left of the plot area.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.RightLabels">
            <summary>
            Represents an area to draw labels right of the plot area.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.LeftPanel">
            <summary>
            Represents the container of the left label area.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.RightPanel">
            <summary>
            Represents the container of the right label area.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.PlotArea">
            <summary>
            Represents the entire plot area for the chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.SliceArea">
            <summary>
            Represents the area in which to render slices.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.Root">
            <summary>
            Represents the root of the visual tree of the funnel chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.InnerLabelTemplate">
            <summary>
            Represents the template to use for inner labels.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.OuterLabelTemplate">
            <summary>
            Represents the template to use for outer labels.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.TooltipInfoBoxRelatedElement">
            <summary>
            Element used to show the InfoBox tooltip pointing to the thumb position.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.ToolTipInfoBox">
            <summary>
            Represents the info box to use as a tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.ToolTipContent">
            <summary>
            Represents the area to display tooltip content.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.XamFunnelView.TooltipValue">
            <summary>
            Represents the current value to assign to the tooltip.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ItemLegend">
            <summary>
            Represents a legend that displays an item for each point in the series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.LegendBase">
            <summary>
            Represents the base class for a legend in XamDataChart.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LegendBase.#ctor">
            <summary>
            Creates a new legend instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LegendBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LegendBase.AddChildInOrder(System.Windows.UIElement,Infragistics.Controls.Charts.Series)">
            <summary>
            Adds a child, in order, to the legend.
            </summary>
            <param name="legendItem">The item to add.</param>
            <param name="series">The series with which the item is associated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.LegendBase.CreateLegendItems(System.Collections.Generic.List{System.Windows.UIElement},System.Windows.Controls.Control)">
            <summary>
            Creates legend items for the legend.
            </summary>
            <param name="legendItems">The legend items to add.</param>
            <param name="itemsHost">The host for the items.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.LegendBase.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises the property changed and updated events.
            </summary>
            <param name="name">The name of the property being changed.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.LegendBase.Children">
            <summary>
            Gets the current Legend object's collection of child UIElements.
            <para>
            The Children collection is matained automatically by the chart and should not
            be modified by the user.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.LegendBase.Owner">
            <summary>
            Gets the owner object, if known.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.LegendBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.LegendBase.PropertyUpdated">
            <summary>
            Occurs when a property value is updated.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.LegendBase.ContentPresenter">
            <summary>
            Gets the cureent Legend object's root ContentPresenter.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.LegendBase.LegendItemMouseLeftButtonDown">
            <summary>
            Occurs when the left mouse button is pressed while the mouse pointer is over a legend item
            in this Legend.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.LegendBase.LegendItemMouseLeftButtonUp">
            <summary>
            Occurs when the left mouse button is released while the mouse pointer is over a legend item
            in this Legend.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ItemLegend.#ctor">
            <summary>
            Creates a new instance of the item legend.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ItemLegend.AddChildInOrder(System.Windows.UIElement,Infragistics.Controls.Charts.Series)">
            <summary>
            Adds a child, in order, to the legend.
            </summary>
            <param name="legendItem">The item to add.</param>
            <param name="series">The series with which the item is associated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ItemLegend.CreateLegendItems(System.Collections.Generic.List{System.Windows.UIElement},System.Windows.Controls.Control)">
            <summary>
            Creates legend items for the legend.
            </summary>
            <param name="legendItems">The legend items to add.</param>
            <param name="itemsHost">The host for the items.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.Legend">
            <summary>
            Represents a legend in a XamDataChart control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Legend.#ctor">
            <summary>
            Initializes a default, empty Legend object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Legend.AddChildInOrder(System.Windows.UIElement,Infragistics.Controls.Charts.Series)">
            <summary>
            Adds a child to the Legend maintaining the correct ordering.
            </summary>
            <param name="legendItem">The item to add.</param>
            <param name="series">The series represented by the item.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Legend.OnCreateAutomationPeer">
            <summary>
            Called when the automation peer has been created.
            </summary>
            <returns>Created automation peer</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.Legend.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Legend.SortOrderProperty">
            <summary>
            Identifies the SortOrder attached property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Legend.SetSortOrder(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Set the sort order in the legend for a chart.
            </summary>
            <param name="target">The chart to set the sort order for.</param>
            <param name="sortOrder">The sort order to set.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Legend.GetSortOrder(System.Windows.DependencyObject)">
            <summary>
            Get the sort order in the legend for a chart.
            </summary>
            <param name="target">The chart to get the sort order for.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.Legend.Orientation">
            <summary>
            Gets or sets the current Legend object's orientation.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ScaleLegend">
            <summary>
            Represnts a legend that indicates the size and the color scale for a collection of series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScaleLegend.#ctor">
            <summary>
            Creates a new instance of ScaleLegend.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScaleLegend.LegendScaleElement">
            <summary>
            Gets the shape that represents the legend scale.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScaleLegend.MinText">
            <summary>
            Gets the TextBlock that shows the minimum scale value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScaleLegend.MaxText">
            <summary>
            Gets the TextBlock that shows the maximum scale value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScaleLegendView.LegendScaleElement">
            <summary>
            Gets the shape that represents the legend scale.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScaleLegendView.MinText">
            <summary>
            Gets the TextBlock that shows the minimum scale value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScaleLegendView.MaxText">
            <summary>
            Gets the TextBlock that shows the maximum scale value.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ValueOverlay">
            <summary>
            Represents the class of the value overlay. The value overlay is a line or circle representing a value on an axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Charts.ValueOverlay"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ValueOverlay.AxisProperty">
            <summary>
            Identifies the Axis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ValueOverlay.ValueProperty">
            <summary>
            Ideitifies the Value dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.GetItemIndex(System.Windows.Point)">
            <summary>
            Gets the item item index associated with the specified world position
            </summary>
            <param name="world"></param>
            <returns>
            Item index or -1 if no item is assocated with the specified world position.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.ScrollIntoView(System.Object)">
            <summary>
            Requests that the provided item should be brought into view if possible.
            </summary>
            <param name="item">The item to attempt to bring into view.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.RenderSeriesOverride(System.Boolean)">
            <summary>
            Renders the series override.
            </summary>
            <param name="animate">if set to <c>true</c> [animate].</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.WindowRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            When overridden in a derived class, is invoked whenever the series window rectangle
            is changed.
            </summary>
            <param name="oldWindowRect">Old window rectangle in normalised world coordinates.</param>
            <param name="newWindowRect">New window rectangle in normalised world coordinates.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.ViewportRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            When overridden in a derived class, is invoked whenever the series viewport rectangle
            is changed.
            </summary>
            <param name="oldViewportRect">Old viewport rectangle in device coordinates.</param>
            <param name="newViewportRect">New viewport rectangle in device coordinates.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.InvalidateAxes">
            <summary>
            Invalidates the axes that use this overlay.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.Infragistics#Controls#Charts#IHasCategoryModePreference#PreferredCategoryMode(Infragistics.Controls.Charts.CategoryAxisBase)">
            <summary>
            Gets the preferred category mode.
            </summary>
            <param name="axis">The axis.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series has been created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ValueOverlay.RenderThumbnail(System.Windows.Rect,Infragistics.Controls.Charts.RenderSurface)">
            <summary>
            Called when the series needs to render a thumbnail view.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="surface">The surface to attach the view to.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.ValueOverlay.Axis">
            <summary>
            Gets or sets the axis used by the value overlay.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ValueOverlay.Value">
            <summary>
            Gets or sets the value of the overlay.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Infragistics.Controls.Charts.ValueOverlay.Infragistics#Controls#Charts#IHasCategoryAxis#CategoryAxis">
            <summary>
            Gets the category axis.
            </summary>
            <value>The category axis.</value>
        </member>
        <member name="T:Infragistics.Controls.Charts.PieChartBase">
            <summary>
            Represents the base class for the pie chart.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.#ctor">
            <summary>
            Creates a new instance of PieChartBase
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.FastItemsSourceProperty">
            <summary>
            Identifies the FastItemsSource dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.ValueMemberPathProperty">
            <summary>
            Identifies the ValueMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.LabelMemberPathProperty">
            <summary>
            Identifies the LabelMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.LabelsPositionProperty">
            <summary>
            Identifies the LabelsPosition dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.LeaderLineVisibilityProperty">
            <summary>
            Identifies the LeaderLineVisibility dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.LeaderLineStyleProperty">
            <summary>
            Identifies the LeaderLineStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.ToolTipProperty">
            <summary>
            Identifies the ToolTip dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.OthersCategoryThresholdProperty">
            <summary>
            Identifies the OthersCategoryThreshold dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.OthersCategoryTypeProperty">
            <summary>
            Identifies the OthersCategoryType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.OthersCategoryTextProperty">
            <summary>
            Identifies the OthersCateogryText dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.ExplodedRadiusProperty">
            <summary>
            Identifies the ExplodedRadius dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.RadiusFactorProperty">
            <summary>
            Identifies the RadiusFactor dependency property.
            </summary>        
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.AllowSliceSelectionProperty">
            <summary>
            Identifies the AllowSliceSelection dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.AllowSliceExplosionProperty">
            <summary>
            Identifies the AllowSliceExplosion dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.LegendProperty">
            <summary>
            Identifies the Legend dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.LabelExtentProperty">
            <summary>
            Identifies the LabelExtent dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.StartAngleProperty">
            <summary>
            Identifies the StartAngle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.SweepDirectionProperty">
            <summary>
            Identifies the SweepDirection dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.OthersCategoryStyleProperty">
            <summary>
            Identifies the OthersCategoryStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.SelectedStyleProperty">
            <summary>
            Identifies the SelectedStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.ToolTipStyleProperty">
            <summary>
            Identifies the ToolTipStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.BrushesProperty">
            <summary>
            Identifies the Brushes dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.OutlinesProperty">
            <summary>
            Identifies the Outlines dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.LegendItemTemplateProperty">
            <summary>
            Identifies the LegendItemTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.LegendItemBadgeTemplateProperty">
            <summary>
            Identifies the LegendItemBadgeTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PieChartBase.LabelTemplateProperty">
            <summary>
            Identifies the LabelTemplate dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.GetLabel(Infragistics.Controls.Charts.Slice)">
            <summary>
            Gets the label for a data item.
            </summary>
            <param name="slice">The data item to get the label for.</param>
            <returns>The requested label.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.FindAngle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the angle in degrees on the unit circle.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            Called whenever a change is made to the data in the ItemsSource.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.RenderChart">
            <summary>
            Renders the piechart.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.PrepareData">
            <summary>
            Extracts data from the data source.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.PrepareSlices">
            <summary>
            Prepares data needed to create pie slices.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.PrepareLabels">
            <summary>
            Prepares data needed to create piechart labels.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.RenderSlices">
            <summary>
            Renders pie slices.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.RenderLabels">
            <summary>
            Renders pie labels.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.RenderLegendItems">
            <summary>
            Renders legend items.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.RegisterDoubleColumn(System.String)">
            <summary>
            Registers a numeric column in the FastItemsSource.
            </summary>
            <param name="memberPath">The name on the property on each data item to get a value from.</param>
            <returns>A FastItemColumn containing the numeric values retrieved the given memberPath of each item in the FastItemsSource.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.RegisterObjectColumn(System.String)">
            <summary>
            Registers a column in the FastItemsSource.
            </summary>
            <param name="memberPath">The name on the property on each data item to get a value from.</param>
            <returns>A FastItemColumn containing the values retrieved the given memberPath of each item in the FastItemsSource.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieChartBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.ContentPresenter">
            <summary>
            Gets the current Chart's root ContentPresenter.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.FastItemsSource">
            <summary>
            Gets or sets the ItemsSource property for the pie chart.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <para>
            The FastItemsSource is a proxy which handles caching, conversion and
            weak event listeners.
            </para>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.ValueColumn">
            <summary>
            Gets the FastItemColumn representing the mapped values in the items source.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.ItemsSource">
            <summary>
            Gets or sets the data source for the chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.ValueMemberPath">
            <summary>
            Gets or Sets the property name that contains the values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.LabelMemberPath">
            <summary>
            Gets or sets the property name that contains the labels.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.LabelColumn">
            <summary>
            Gets the data column used for labels.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.LabelsPosition">
            <summary>
            Gets or sets the position of chart labels.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.LeaderLineVisibility">
            <summary>
            Gets or sets whether the leader lines are visible.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.LeaderLineStyle">
            <summary>
            Gets or sets the style for the leader lines.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.ToolTip">
            <summary>
            Gets or sets the ToolTip for the pie chart.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.OthersCategoryThreshold">
            <summary>
            Gets or sets the threshold value that determines if slices are grouped into the Others slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.OthersCategoryType">
            <summary>
            Gets or sets whether to use numeric or percent-based threshold value.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.OthersCategoryText">
            <summary>
            Gets or sets the label of the Others slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.ExplodedRadius">
            <summary>
            Determines how much the exploded slice is offset from the center. Value between 0 and 1.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.ActualExplodedRadius">
            <summary>
            Gets a coerced ExplodedRadius property value between 0 and 1.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.RadiusFactor">
            <summary>
            Gets or sets the scaling factor of the chart's radius. Value between 0 and 1.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.ActualRadiusFactor">
            <summary>
            Gets a coerced version of RadiusFactor property between 0 and 1.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.AllowSliceSelection">
            <summary>
            Gets or sets whether the slices can be selected.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.AllowSliceExplosion">
            <summary>
            Gets or sets whether the slices can be exploded.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.ExplodedSlices">
            <summary>
            Gets or sets the collection of exploded slice indices.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.Legend">
            <summary>
            Gets or sets the legend used for the current chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.LabelExtent">
            <summary>
            Gets or sets the pixel amount, by which the labels are offset from the edge of the slices.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.StartAngle">
            <summary>
            Gets or sets the starting angle of the chart.
            </summary>
            <remarks>
            The default zero value is equivalent to 3 o'clock.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.SweepDirection">
            <summary>
            Gets or sets the rotational direction of the chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.SelectedSlices">
            <summary>
            Gets or sets the collection of selected slice indices.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.OthersCategoryStyle">
            <summary>
            Gets or sets the style used for the Others slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.SelectedStyle">
            <summary>
            Gets or sets the style used when a slice is selected.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.ToolTipStyle">
            <summary>
            Gets or sets the style used for the tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.Brushes">
            <summary>
            Gets or sets the Brushes property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The brushes property defines the palette from which automatically assigned slice brushes are selected.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.Outlines">
            <summary>
            Gets or sets the Outlines property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The Outlines property defines the palette from which automatically assigned slice outlines are selected.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.LegendItemTemplate">
            <summary>
            Gets or sets the LegendItemTemplate property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The legend item control content is created according to the LegendItemTemplate on-demand by
            the chart object itself.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.LegendItemBadgeTemplate">
            <summary>
            Gets or sets the LegendItemBadgeTemplate property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
            the chart object itself.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.LabelTemplate">
            <summary>
            The DataTemplate to use when creating pie chart labels.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.PieChartBase.SliceClick">
            <summary>
            Raised when the slice is clicked.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PieChartBase.Viewport">
            <summary>
            Gets or sets the chart's viewport.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.PieChartBase.PropertyChanged">
            <summary>
            Notifies clients that a property value has changed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.PieChartBase.PropertyUpdated">
            <summary>
            Occurs when the value of a property is updated.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PieLabel.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="constraint">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.IndexCollection">
            <summary>
            Represents a collection of distinct integers.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.IndexCollection.InsertItem(System.Int32,System.Int32)">
            <summary>
            Inserts an integer into the collection.
            </summary>
            <param name="index">Index of the new value</param>
            <param name="item">Item to be inserted</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.IndexCollection.SetItem(System.Int32,System.Int32)">
            <summary>
            Replaces an item at a given index with a new item.
            </summary>
            <param name="index">Index of the value to be replaced</param>
            <param name="item">Value to be added</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.IndexCollectionTypeConverter">
            <summary>
            Converts XAML-based string to a collection of integers.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.IndexCollectionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines if a conversion can be made from a given object.
            </summary>
            <param name="context">Source data</param>
            <param name="sourceType">Source data type</param>
            <returns>True if conversion is possible, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.IndexCollectionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert an object into an IndexCollection.
            </summary>
            <param name="context">Source datacontext</param>
            <param name="culture">Current culture</param>
            <param name="value">Source value</param>
            <returns>New index collection</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.Slice">
            <summary>
            Represents a content control that holds a single chart slice.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Slice.#ctor">
            <summary>
            Creates an instance of the Slice.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.StartAngleProperty">
            <summary>
            Identifies the StartAngle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.EndAngleProperty">
            <summary>
            Identifies the EndAngle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.InnerExtentStartProperty">
            <summary>
            Identifies the InnerExtentStart dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.InnerExtentEndProperty">
            <summary>
            Identifies the InnerExtentEnd dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.IsExplodedProperty">
            <summary>
            Identifies the IsExploded dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.IsOtherSliceProperty">
            <summary>
            Identifies the IsOtherSlice dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.OriginProperty">
            <summary>
            Identifies the Origin dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.ExplodedOriginProperty">
            <summary>
            Identifies the ExplodedOrigin dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.RadiusProperty">
            <summary>
            Identifies the Radius dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.ExplodedRadiusProperty">
            <summary>
            Identifies the ExplodedRadius dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.IndexProperty">
            <summary>
            Identifies the Index dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Slice.StrokeThicknessProperty">
            <summary>
            Identifies the StrokeThickness dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Slice.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes (such as a rebuilding layout pass) call <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Slice.GetSliceBounds">
            <summary>
            Gets the square bounds of the slice with the origin at the center.
            </summary>
            <remarks>This rect is different from SlicePath.Data.Bounds</remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Slice.GetSliceOrigin">
            <summary>
            Gets the origin of the slice.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Slice.CreateShape">
            <summary>
            Returns a silverlight shape that represents the current arc.
            </summary>
            <returns>Silverlight shape that represents the current arc.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Slice.ContainsPoint(System.Windows.Point)">
            <summary>
            Returns whether the slice contains the specified point.
            </summary>
            <param name="p">The point to check.</param>
            <returns>True if the slice contains the point.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.StartAngle">
            <summary>
            Gets the shape's start angle.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.EndAngle">
            <summary>
            Gets the shape's end angle.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.InnerExtentStart">
            <summary>
            Gets the shape's start inner extent.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.InnerExtentEnd">
            <summary>
            Gets the shape's end inner extent.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.IsSelected">
            <summary>
            Gets or sets whether the slice is selected.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.IsExploded">
            <summary>
            Gets or sets whether the slice is exploded.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.IsOthersSlice">
            <summary>
            Gets whether the slice represents the Others slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.Origin">
            <summary>
            Gets the origin of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.ExplodedOrigin">
            <summary>
            Gets the origin of the exploded slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.Radius">
            <summary>
            Gets the slice's radius.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.ExplodedRadius">
            <summary>
            Gets the radius of the exploded slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.Index">
            <summary>
            Gets the index of the slice.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Slice.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness of the slice.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.XamPieChart">
            <summary>
            Represents Infragistics XamPieChart control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.XamPieChart.#ctor">
            <summary>
            Creates a new instance of XamPieChart.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PolarAreaSeries">
            <summary>
            Represents a XamDataChart polar area series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PolarLineSeriesBase">
            <summary>
            Represents the base class from which all XamDataChart polar line series are derived.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PolarBase">
            <summary>
            Represents the base class from which all XamDataChart polar series are derived.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.#ctor">
            <summary>
            Initializes a new instance of the PolarBase class.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.AngleMemberPathProperty">
            <summary>
            Identifies the AngleMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.RadiusMemberPathProperty">
            <summary>
            Identifies the RadiusMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.AngleAxisProperty">
            <summary>
            Identifies the ActualXAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.RadiusAxisProperty">
            <summary>
            Identifies the ActualXAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.UseCartesianInterpolationProperty">
            <summary>
            Identifies the UseCartesianInterpolation dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.MaximumMarkersProperty">
            <summary>
            Identifies the MaximumMarkers dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.TrendLineTypeProperty">
            <summary>
            Identifies the TrendLineType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.TrendLineBrushProperty">
            <summary>
            Identifies the TrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.ActualTrendLineBrushProperty">
            <summary>
            Identifies the ActualTrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.TrendLineThicknessProperty">
            <summary>
            Identifies the TrendLineThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.TrendLineDashCapProperty">
            <summary>
            Identifies the TrendLineDashCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.TrendLineDashArrayProperty">
            <summary>
            Identifies the TrendLineDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.TrendLinePeriodProperty">
            <summary>
            Identifies the TrendLinePeriod dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.TrendLineZIndexProperty">
            <summary>
            Identifies the TrendLineZIndex dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarBase.ClipSeriesToBoundsProperty">
            <summary>
            Identifies the ClipSeriesToBounds dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.InvalidateAxes">
            <summary>
            Invalidates the axes associated with the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            Overriden in derived classes to respond to data updates.
            </summary>
            <param name="action">The action performed on the bound data.</param>
            <param name="position">The position at which the action was performed.</param>
            <param name="count">The count of affected positions.</param>
            <param name="propertyName">The property name changed.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.ViewportRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes to respond to the viewport changing.
            </summary>
            <param name="oldViewportRect">The old viewport dimensions.</param>
            <param name="newViewportRect">The new viewport dimensions.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.WindowRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes to respond to the window changing.
            </summary>
            <param name="oldWindowRect">The old window.</param>
            <param name="newWindowRect">The new window.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.RenderSeriesOverride(System.Boolean)">
            <summary>
            Called to render the series.
            </summary>
            <param name="animate">True if the change should be animated.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the requested item into view, if possible.
            </summary>
            <param name="item">The item to scroll into view.</param>
            <returns>True if it was possible to scroll the item into view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.GetItemIndex(System.Windows.Point)">
            <summary>
            Gets the index of the item that resides at the provided world coordinates.
            </summary>
            <param name="world">The world coordinates of the requested item.</param>
            <returns>The requested item's index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.UpdateIndexedProperties">
            <summary>
            Updates properties that are based on the index of the series in the series collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarBase.RenderThumbnail(System.Windows.Rect,Infragistics.Controls.Charts.RenderSurface)">
            <summary>
            Renders the thumbnail for the OPD.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="surface">The render target.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.AngleMemberPath">
            <summary>
            Gets or sets the path to use to find the angle values for the series.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.RadiusMemberPath">
            <summary>
            Gets or sets the path to use to get the radius values for the series.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.AngleColumn">
            <summary>
            The column of angle values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.RadiusColumn">
            <summary>
            The column of radius values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.AngleAxis">
            <summary>
            Gets the effective angle axis for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.RadiusAxis">
            <summary>
            Gets the effective radius axis for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.UseCartesianInterpolation">
            <summary>
            Gets or sets whether Cartesian Interpolation should be used rather than Archimedian 
            spiral based interpolation.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.MaximumMarkers">
            <summary>
            Gets or sets the maximum number of markers displayed by the current series.
            <para>If more than the specified number of markers are visible, the polar series will automatically
            choose a representative set.</para>
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.TrendLineType">
            <summary>
            Gets or sets the trend type for the current series object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.TrendLineBrush">
            <summary>
            Gets or sets the brush that specifies how to the current series
            object's Trend line is drawn.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.ActualTrendLineBrush">
            <summary>
            Gets the effective TrendLineBrush for this series.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.TrendLineThickness">
            <summary>
            Gets or sets the thickness of the current series object's trend line.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.TrendLineDashCap">
            <summary>
            Gets or sets the PenLineCap enumeration value that specifies how the the current
            series object's trend line dash ends are drawn. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.TrendLineDashArray">
            <summary>
            Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
            is used to draw the trend line for the current series object. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.TrendLinePeriod">
            <summary>
            Gets or sets the moving average period for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.TrendLineZIndex">
            <summary>
            Sets or Gets the Trendline Z index.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarBase.ClipSeriesToBounds">
            <summary>
            Gets or sets whether to clip the series to the bounds.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            Setting this to true can effect performance.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeriesBase.CreateView">
            <summary>
            Called to create the view for the series
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeriesBase.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeriesBase.#ctor">
            <summary>
            Instantiates a polar line series base series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeriesBase.ClearPoints(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Overriden in derived classes to clear the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeriesBase.RenderPoints(Infragistics.Controls.Charts.PolarFrame,Infragistics.Controls.Charts.PolarBaseView)">
            <summary>
            Overriden in derived classes to render the series.
            </summary>
            <param name="frame">The frame to render.</param>
            <param name="view">The PolarBaseView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeriesBase.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarLineSeriesBase.ClippingDisabled">
            <summary>
            Gets whether the clipper is disabled.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarLineSeriesBase.IsClosed">
            <summary>
            Gets whether the shape of the series is a closed polygon.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAreaSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAreaSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAreaSeries.#ctor">
            <summary>
            Initializes a new PolarAreaSeries instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAreaSeries.ClearPoints(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Overriden in derived classes to clear the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarAreaSeries.RenderPoints(Infragistics.Controls.Charts.PolarFrame,Infragistics.Controls.Charts.PolarBaseView)">
            <summary>
            Overriden in derived classes to render the series.
            </summary>
            <param name="frame">The frame to render</param>
            <param name="view">The PolarBaseView in context.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarAreaSeries.UnknownValuePlottingProperty">
            <summary>
            Identifies the UnknownValuePlotting dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarAreaSeries.IsClosed">
            <summary>
            Gets whether the shape of the series is a closed shape.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarAreaSeries.UnknownValuePlotting">
            <summary>
            Determines how unknown values will be plotted on the chart.
            </summary>
            <remarks>
            Null and Double.NaN are two examples of unknown values.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Charts.ScatterFrameBase`1">
            <summary>
            Represents the base class for all XamDataChart scatter series
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PolarLineSeries">
            <summary>
            Represents a XamDataChart polar line series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeries.#ctor">
            <summary>
            Initializes a new PolarLineSeries instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeries.ClearPoints(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Overriden in derived classes to clear the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeries.RenderPoints(Infragistics.Controls.Charts.PolarFrame,Infragistics.Controls.Charts.PolarBaseView)">
            <summary>
            Overriden in derived classes to render the series.
            </summary>
            <param name="frame">The frame to render.</param>
            <param name="view">The PolarBaseView in context.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarLineSeries.UnknownValuePlottingProperty">
            <summary>
            Identifies the UnknownValuePlotting dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarLineSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarLineSeries.UnknownValuePlotting">
            <summary>
            Determines how unknown values will be plotted on the chart.
            </summary>
            <remarks>
            Null and Double.NaN are two examples of unknown values.
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Charts.PolarScatterSeries">
            <summary>
            Represents a XamDataChart polar scatter series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarScatterSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarScatterSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarScatterSeries.#ctor">
            <summary>
            Initializes a new instance of the ScatterSeries class. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PolarSplineAreaSeries">
            <summary>
            Represents a XamDataChart polar spline area series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineAreaSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineAreaSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineAreaSeries.#ctor">
            <summary>
            Initializes a new PolarAreaSeries instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineAreaSeries.ClearPoints(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Overriden in derived classes to clear the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineAreaSeries.RenderPoints(Infragistics.Controls.Charts.PolarFrame,Infragistics.Controls.Charts.PolarBaseView)">
            <summary>
            Overriden in derived classes to render the series.
            </summary>
            <param name="frame">The frame to render</param>
            <param name="view">The PolarBaseView in context.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarSplineAreaSeries.StiffnessProperty">
            <summary>
            Identifies the Stiffness dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineAreaSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarSplineAreaSeries.IsClosed">
            <summary>
            Gets whether the shape of the series is a closed polygon.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarSplineAreaSeries.Stiffness">
            <summary>
            Gets or sets the Stiffness property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.PolarSplineSeries">
            <summary>
            Represents a XamDataChart polar spline series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineSeries.#ctor">
            <summary>
            Initializes a new instance of the PolarSplineSeries class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.PolarSplineSeries.StiffnessProperty">
            <summary>
            Identifies the Stiffness dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineSeries.ClearPoints(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Overriden in derived classes to clear the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.PolarSplineSeries.RenderPoints(Infragistics.Controls.Charts.PolarFrame,Infragistics.Controls.Charts.PolarBaseView)">
            <summary>
            Overriden in derived classes to render the series.
            </summary>
            <param name="frame">The frame to render</param>
            <param name="view">The PolarBaseView in context.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.PolarSplineSeries.Stiffness">
            <summary>
            Gets or sets the Stiffness property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.AnchoredRadialSeries">
            <summary>
            Represents the base class for all XamDataChart anchored radial category series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.RadialBase">
            <summary>
            Represents the base class for all XamDataChart radial series
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBase.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBase.#ctor">
            <summary>
            Initializes a new instance of the RadialBase class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.RadialBase.AngleAxisProperty">
            <summary>
            Identifies the ActualAngleAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.RadialBase.ValueAxisProperty">
            <summary>
            Identifies the ValueAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.RadialBase.ClipSeriesToBoundsProperty">
            <summary>
            Identifies the ClipSeriesToBounds dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBase.WindowRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the chart's window changing.
            </summary>
            <param name="oldWindowRect">The old window rectangle of the chart.</param>
            <param name="newWindowRect">The new window rectangle of the chart.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBase.ViewportRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the viewport changing.
            </summary>
            <param name="oldViewportRect">The old viewport rectangle.</param>
            <param name="newViewportRect">The new viewport rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBase.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBase.GetItemIndex(System.Windows.Point)">
            <summary>
            Get the index of the item near the provided world coordinates.
            </summary>
            <param name="world">The world coordinates for which to getch the item index.</param>
            <returns>The index of the item near the coordinates.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBase.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the specified item into the view.
            </summary>
            <param name="item">The item to scroll into view.</param>
            <returns>True if the item has been scrolled into view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBase.InvalidateAxes">
            <summary>
            Invalidates the axes associatede with the series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBase.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBase.RenderSeriesOverride(System.Boolean)">
            <summary>
            Called to render the series.
            </summary>
            <param name="animate">True if the change should be animated.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialBase.AngleAxis">
            <summary>
            Gets the effective angle axis for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialBase.ValueAxis">
            <summary>
            Gets the effective value axis for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialBase.ClipSeriesToBounds">
            <summary>
            Gets or sets whether to clip the series to the bounds.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            Setting this to true can effect performance.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.#ctor">
            <summary>
            Initializes a new instance of the AnchoredRadialSeries
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredRadialSeries.ValueMemberPathProperty">
            <summary>
            Identifies the ValueMapping dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineTypeProperty">
            <summary>
            Identifies the TrendLineType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineBrushProperty">
            <summary>
            Identifies the TrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredRadialSeries.ActualTrendLineBrushProperty">
            <summary>
            Identifies the ActualTrendLineBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineThicknessProperty">
            <summary>
            Identifies the TrendLineThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineDashCapProperty">
            <summary>
            Identifies the TrendLineDashCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineDashArrayProperty">
            <summary>
            Identifies the TrendLineDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLinePeriodProperty">
            <summary>
            Identifies the TrendLinePeriod dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineZIndexProperty">
            <summary>
            Identifies the TrendLineZIndex Dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.AnchoredRadialSeries._terminationPoint">
            <summary>
            A point used to complete the polygon.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.UpdateIndexedProperties">
            <summary>
            Updates properties that are based on the index of the series in the series collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.Item(System.Object,System.Windows.Point)">
            <summary>
            Returns the item that is the best match for the provided point.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="point">The point associated with the event.</param>
            <returns>The best match for the point.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the specified item into the view.
            </summary>
            <param name="item">The item to scroll into view.</param>
            <returns>True if the item has been scrolled into view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AnchoredRadialSeries.RenderThumbnail(System.Windows.Rect,Infragistics.Controls.Charts.RenderSurface)">
            <summary>
            Renders the thumbnail for the OPD.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="surface">The render target.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredRadialSeries.ValueMemberPath">
            <summary>
            Gets or sets the item path that provides the values for the current series.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredRadialSeries.ValueColumn">
            <summary>
            Holds the values for the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineType">
            <summary>
            Gets or sets the trend type for the current series object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineBrush">
            <summary>
            Gets or sets the brush that specifies how to the current series
            object's Trend line is drawn.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredRadialSeries.ActualTrendLineBrush">
            <summary>
            Gets the effective TrendLineBrush for this series.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineThickness">
            <summary>
            Gets or sets the thickness of the current series object's trend line.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineDashCap">
            <summary>
            Gets or sets the PenLineCap enumeration value that specifies how the the current
            series object's trend line dash ends are drawn. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineDashArray">
            <summary>
            Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
            is used to draw the trend line for the current series object. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLinePeriod">
            <summary>
            Gets or sets the trend line period for the current series.
            <para>
            This is a dependency property.
            </para>
            <remarks>
            The typical, and initial, value for bollinger band periods is 20.
            </remarks>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredRadialSeries.TrendLineZIndex">
            <summary>
            Sets or Gets the Z index of the trendline.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.AnchoredRadialSeries.IsClosed">
            <summary>
            Gets whether the shape of the series is a closed polygon.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialBucketCalculator.CalculateBuckets(System.Double)">
            <summary>
            Caculates which buckets are visible and their size.
            </summary>
            <param name="resolution">The current resolution of the chart.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialBucketCalculator.FirstBucket">
            <summary>
            The first visible bucket of values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialBucketCalculator.LastBucket">
            <summary>
            The last visible bucket of values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialBucketCalculator.BucketSize">
            <summary>
            The size of the visible buckets of values.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.RadialAreaSeries">
            <summary>
            Represents a XamDataChart radial area seres.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAreaSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The view that was created.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAreaSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAreaSeries.#ctor">
            <summary>
            Initializes a new instance of the RadialAreaSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAreaSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.RadialAreaSeries.UnknownValuePlottingProperty">
            <summary>
            Identifies the UnknownValuePlotting dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialAreaSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAreaSeries.UnknownValuePlotting">
            <summary>
            Determines how unknown values will be plotted on the chart.
            </summary>
            <remarks>
            Null and Double.NaN are two examples of unknown values.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialAreaSeries.IsClosed">
            <summary>
            Gets whether the shape of the series polygon is a closed shape.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.RadialColumnSeries">
            <summary>
            Represents a XamDataChart radial column series.
            <remarks>Compare values across categories by using radial rectangles.</remarks>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialColumnSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialColumnSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the RadialColumnSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialColumnSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.RadialColumnSeries.RadiusXProperty">
            <summary>
            Identifies the RadiusX dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.RadialColumnSeries.RadiusYProperty">
            <summary>
            Identifies the RadiusY dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialColumnSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialColumnSeries.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialColumnSeries.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.RadialLineSeries">
            <summary>
            Represents a XamDataChart radial line series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialLineSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The view that was created.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialLineSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialLineSeries.#ctor">
            <summary>
            Initializes a new instance of the RadialLineSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialLineSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialLineSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.RadialLineSeries.UnknownValuePlottingProperty">
            <summary>
            Identifies the UnknownValuePlotting dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialLineSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialLineSeries.UnknownValuePlotting">
            <summary>
            Determines how unknown values will be plotted on the chart.
            </summary>
            <remarks>
            Null and Double.NaN are two examples of unknown values.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialLineSeries.IsClosed">
            <summary>
            Gets whether the shape for the series is a closed polygon.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.RadialPieSeries">
            <summary>
            Represents a XamDataChart radial pie series.
            <remarks>Compare values across categories by using radial pie slices.</remarks>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialPieSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialPieSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for a series is created.
            </summary>
            <param name="view">The view that was created.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialPieSeries.#ctor">
            <summary>
            Initializes a new instance of the ColumnSeries class. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.RadialPieSeries.RadiusXProperty">
            <summary>
            Identifies the RadiusX dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.RadialPieSeries.RadiusYProperty">
            <summary>
            Identifies the RadiusY dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialPieSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.RadialPieSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialPieSeries.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.RadialPieSeries.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.HighDensityScatterSeries">
            <summary>
            A chart series where a high volume of scatter points can be displayed.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HighDensityScatterSeries.#ctor">
            <summary>
            Constructs a HighDensityScatterSeries.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HighDensityScatterSeries.OnApplyTemplate">
            <summary>
            Called when the template of the control has been provided.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HighDensityScatterSeries.XAxisProperty">
            <summary>
            Identifies the XAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HighDensityScatterSeries.YAxisProperty">
            <summary>
            Identifies the YAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HighDensityScatterSeries.XMemberPathProperty">
            <summary>
            Identifies the XMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HighDensityScatterSeries.YMemberPathProperty">
            <summary>
            Identifies the YMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HighDensityScatterSeries.UseBruteForceProperty">
            <summary>
            Identifies the UseBruteForce dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HighDensityScatterSeries.ProgressiveLoadProperty">
            <summary>
            Identifies the ProgressiveLoad dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HighDensityScatterSeries.MouseOverEnabledProperty">
            <summary>
            Identifies the MouseOverEnabled dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HighDensityScatterSeries.UseSquareCutoffStyleProperty">
            <summary>
            Identifies the SquareCutoffStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HighDensityScatterSeries.HeatMinimumProperty">
            <summary>
            Identifies the HeatMinimum dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HighDensityScatterSeries.HeatMaximumProperty">
            <summary>
            Identifies the HeatMaximum dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HighDensityScatterSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Called when the value of a property has been updated.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="propertyName">The name of the property that has been updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HighDensityScatterSeries.RenderSeriesOverride(System.Boolean)">
            <summary>
            Called when the series needs to get rendered.
            </summary>
            <param name="animate">Whether or not the change to the series should be animated, if possible.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HighDensityScatterSeries.CreateView">
            <summary>
            Called to create the view for the series..
            </summary>
            <returns>The crated view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.HighDensityScatterSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HighDensityScatterSeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Gets the range to use for the axes for the series.
            </summary>
            <param name="axis">The axis for which to return the range.</param>
            <returns>The range for the specified axis.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.HighDensityScatterSeries.ViewportRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the viewport changing.
            </summary>
            <param name="oldViewportRect">The old viewport rectangle.</param>
            <param name="newViewportRect">The new viewport rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HighDensityScatterSeries.WindowRectChangedOverride(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Overriden in derived classes when they want to respond to the chart's window changing.
            </summary>
            <param name="oldWindowRect">The old window rectangle of the chart.</param>
            <param name="newWindowRect">The new window rectangle of the chart.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.HighDensityScatterSeries.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.XAxis">
            <summary>
            Gets or sets the effective x-axis for the current object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.YAxis">
            <summary>
            Gets or sets the effective y-axis for the current object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.XMemberPath">
            <summary>
            Gets or sets the x value mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.XColumn">
            <summary>
            The IFastItemColumn containing X values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.YMemberPath">
            <summary>
            Gets or sets the y value mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.YColumn">
            <summary>
            The IFastItemColumn containing Y values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.UseBruteForce">
            <summary>
            Gets or sets the whether to use use brute force mode.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.ProgressiveLoad">
            <summary>
            Gets or sets the whether to progressively load the data into the chart.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.MouseOverEnabled">
            <summary>
            Gets or sets the whether the chart reacts to mouse move events.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.UseSquareCutoffStyle">
            <summary>
            Gets or sets the whether to use squares when halting a render traversal rather than the shape of the coalesced area.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.HeatMinimum">
            <summary>
            Gets or sets the density value that maps to the minimum heat color.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.HeatMaximum">
            <summary>
            Gets or sets the value that maps to the maximum heat color.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.HighDensityScatterSeries.ProgressiveLoadStatusChanged">
            <summary>
            Raised when the progressive loading state of the series has changed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeries.SuperView">
            <summary>
            The view of the series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.MouseMoveThunk">
            <summary>
            Provides information about a mouse move computation.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MouseMoveThunk.Position">
            <summary>
            The position of the mouse.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MouseMoveThunk.AxisPosition">
            <summary>
            The axis based position of the moust.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MouseMoveThunk.DesiredNeighborCount">
            <summary>
            The desired neigbor count specified.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.MouseMoveThunk.ScalerParamsX">
            <summary>
            The parameters of the x scaler.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ScatterMouseOverEventArgs">
            <summary>
            Describes information about a mouse move event for the high density scatter series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterMouseOverEventArgs.#ctor(System.Windows.Point,System.Windows.Point,System.Collections.Generic.List{System.Object})">
            <summary>
            Constructs a ScatterMouseOverEventArgs
            </summary>
            <param name="axisPosition">The axis based position of the mouse</param>
            <param name="mousePosition">The current position of the mouse.</param>
            <param name="nearestItems">The nearest items to the mouse.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterMouseOverEventArgs.AxisPosition">
            <summary>
            The axis based position of the mouse.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterMouseOverEventArgs.MousePosition">
            <summary>
            The current mouse position.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterMouseOverEventArgs.NearestItems">
            <summary>
            The nearest items to the mouse.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.HighDensityScatterSeriesView">
            <summary>
            Represents the view for a HighDensityScatterSeries.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HighDensityScatterSeriesView.#ctor(Infragistics.Controls.Charts.HighDensityScatterSeries)">
            <summary>
            Constructs a HighDensityScatterSeriesView.
            </summary>
            <param name="model">The HighDensityScatterSeries for the view.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.HighDensityScatterSeriesView.HighDensityScatterModel">
            <summary>
            The HighDensityScatterSeries for the view.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ProgressiveLoadStatusEventArgs">
            <summary>
            Provides information about the progressive load progress of the HighDensityScatterSeries.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ProgressiveLoadStatusEventArgs.#ctor(System.Int32)">
            <summary>
            Constructs a ProgressiveLoadStatusEventArgs
            </summary>
            <param name="currentStatus">The current status of the load.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.ProgressiveLoadStatusEventArgs.CurrentStatus">
            <summary>
            The current status from 0 to 100 of the progressive load.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.OwnedPoint">
            <summary>
            Class representing a Point and its owning item and data values.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.OwnedPoint.Point">
            <summary>
            The Point.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.OwnedPoint.OwnerItem">
            <summary>
            The owning data item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.OwnedPoint.ColumnValues">
            <summary>
            The data values, expressed as a point.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ScatterLineSeries">
            <summary>
            Represents a XamDataChart scatter line series
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterLineSeries.#ctor">
            <summary>
            Initializes a new instance of the ScatterLineSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterLineSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterLineSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterLineSeries.UnknownValuePlottingProperty">
            <summary>
            Identifies the UnknownValuePlotting dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterLineSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterLineSeries.UnknownValuePlotting">
            <summary>
            Determines how unknown values will be plotted on the chart.
            </summary>
            <remarks>
            Null and Double.NaN are two examples of unknown values.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterLineSeriesView.ClearRendering(System.Boolean)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.ScatterSeries">
            <summary>
            Represents a XamDataChart scatter series
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The view that has been created.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterSeries.#ctor">
            <summary>
            Initializes a new instance of the ScatterSeries class. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ScatterSplineSeries">
            <summary>
            Represents a XamDataChart scatter spline series
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterSplineSeries.#ctor">
            <summary>
            Initializes a new instance of the ScatterSplineSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterSplineSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="F:Infragistics.Controls.Charts.ScatterSplineSeries.StiffnessProperty">
            <summary>
            Identifies the Stiffness dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterSplineSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ScatterSplineSeries.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.ScatterSplineSeries.Stiffness">
            <summary>
            Gets or sets the Stiffness property.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.AreaFragment">
            <summary>
            Represents one part of a StackedAreaSeries.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.FragmentBase">
            <summary>
            Represents one part of a stacked series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.FragmentBase.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FragmentBase.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.FragmentBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.FragmentBase.RenderThumbnail(System.Windows.Rect,Infragistics.Controls.Charts.RenderSurface)">
            <summary>
            Renders the thumbnail for the OPD pane.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="surface">The render target.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AreaFragment.#ctor">
            <summary>
            Initializes a new instance of the AreaSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.AreaFragment.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.AreaFragment.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.AreaFragment.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.BarFragment">
            <summary>
            Represents one part of a StackedBarSeries.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.ColumnFragment">
            <summary>
            Represents one part of a StackedColumnSeries.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.#ctor">
            <summary>
            Creates a new instance of the ColumnFragment.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.ColumnFragment.RadiusXProperty">
            <summary>
            Identifies the RadiusX dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.ColumnFragment.RadiusYProperty">
            <summary>
            Identifies the RadiusY dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.UseParentMarkerCanvas">
            <summary>
            Determines if the current series renders its markers to the MarkerCanvas of the parent series. 
            Ensures that StackedFragmentSeries don't reparent the MarkerCanvas.
            </summary>
            <returns>Whether or not to use parent series marker canvas.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.Item(System.Object,System.Windows.Point)">
            <summary>
            When overriden in a derived class gives the opportunity to define how the data source item
            for a given set of mouse coordinates is fetched.
            </summary>
            <param name="sender">The element the mouse is over.</param>
            <param name="point">The mouse coordinates for which to fetch the item.</param>
            <returns>The retrieved item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.GetItemIndexSorted(System.Windows.Point)">
            <summary>
            Gets the index of the item based on world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The index of the item for the specified coordinates.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.GetItemIndex(System.Windows.Point)">
            <summary>
            Gets the index of the item that resides at the provided world coordinates.
            </summary>
            <param name="world">The world coordinates of the requested item.</param>
            <returns>The requested item's index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.PrepareFrame(Infragistics.Controls.Charts.CategoryFrame,Infragistics.Controls.Charts.CategorySeriesView)">
            <summary>
            Create buckets and markers for the column fragment.
            </summary>
            <remarks>
            The buckets of the column fragment are managed entirely by the parent series. 
            CurrentFrame will always be re-populated regardless of which frame got passed into PrepareFrame.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.ColumnFragment.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.ColumnFragment.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
            <para>
            This is a dependency property.
            </para>
            </summary>  
        </member>
        <member name="P:Infragistics.Controls.Charts.ColumnFragment.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ColumnFragment.XAxis">
            <summary>
            Gets or sets the effective x-axis for this series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.ColumnFragment.YAxis">
            <summary>
            Gets or sets the effective y-axis for this series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarFragment.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarFragment.GetItemIndexSorted(System.Windows.Point)">
            <summary>
            Gets the index of the item based on world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The index of the item for the specified coordinates.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.BarFragment.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.BarFragment.XAxis">
            <summary>
            The X-Axis for this BarFragment.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.BarFragment.YAxis">
            <summary>
            The Y-Axis for this BarFragment.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarBucketCalculator.CalculateBuckets(System.Double)">
            <summary>
            Calculates the bucket values to use based on the desired resolution.
            </summary>
            <param name="resolution">The resolution desired.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.LineFragment">
            <summary>
            Represents one part of a StackedLineSeries.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LineFragment.#ctor">
            <summary>
            Initializes a new instance of the LineFragment class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.LineFragment.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.LineFragment.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.LineFragment.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.SplineAreaFragment">
            <summary>
            Represents one part of a StackedSplineAreaSeries.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.SplineFragmentBase">
            <summary>
            Represents one part in a StackedSplineSeries or StackedSplineAreaSeries.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineFragmentBase.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineFragmentBase.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineAreaFragment.#ctor">
            <summary>
            Initializes a new instance of the SplineAreaFragment class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineAreaFragment.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineAreaFragment.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineAreaFragment.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineAreaFragment.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.SplineFragment">
            <summary>
            Represents one part of a StackedSplineSeries.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineFragment.#ctor">
            <summary>
            Initializes a new instance of the SplineSeries class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineFragment.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineFragment.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view for the series is created.
            </summary>
            <param name="view">The created view.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.SplineFragment.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears the rendering for the series.
            </summary>
            <param name="wipeClean">True if the cached visuals should also be cleared.</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.Stacked100AreaSeries">
            <summary>
            Represents a stacked area series, where values are presented as percentages of the total.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedAreaSeries">
            <summary>
            Represents a XamDataChart stacked area series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.HorizontalStackedSeriesBase">
            <summary>
            Base class for stacked series with a category x-axis and a numeric y-axis.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedSeriesBase">
            <summary>
            Represents a base class for stacked series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.#ctor">
            <summary>
            Creates a new instance of a stacked series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view has been created.
            </summary>
            <param name="view">View class for the current model</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedSeriesBase.AutoGenerateSeriesProperty">
            <summary>
            Identifies the AutoGenerateSeries dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedSeriesBase.ReverseLegendOrderProperty">
            <summary>
            Identifies the ReverseLegendOrder dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.AutoGeneratedSeries_CollectionResetting(System.Object,System.EventArgs)">
            <summary>
            Handles collection resetting for the AutoGeneratedSeries collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.Series_CollectionResetting(System.Object,System.EventArgs)">
            <summary>
            Handles collection resetting for the public Series collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.Series_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection changed for the public Series collection.
            </summary>
            <remarks>
            Does nothing if AutoGenerateSeries is true. 
            Otherwise, just adds the series to the series manager.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.ClearRendering(System.Boolean,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Clears all visuals that belong to this series.
            </summary>
            <param name="wipeClean">WipeClean</param>
            <param name="view">The SeriesView in context.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the series to display the item for the specified data item.
            </summary>
            <remarks>
            The series is scrolled by the minimum amount required to place the specified data item within
            the central 80% of the visible axis.
            </remarks>
            <param name="item">The data item (item) to scroll to.</param>
            <returns>True if the specified item could be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.ShouldDisplayMarkers">
            <summary>
            Determines if the series should display markers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.GetSeriesView">
            <summary>
            Returns the series view associated with the current series model.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.GetScaledWorldZeroValue">
            <summary>
            Returns the scaled zero value based on the axis reference value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.GetUnscaledWorldZeroValue">
            <summary>
            Returns the unscaled zero value based on the axis reference value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.GetFragmentSeriesIndex(Infragistics.Controls.Charts.StackedFragmentSeries)">
            <summary>
            Returns the index of the current fragment series based on the index of the parent series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.GetFragmentItemIndex(System.Windows.Point)">
            <summary>
            Returns the positoin of the item in the data source.
            </summary>
            <param name="world">The point used to find the item.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.ValidateFragmentSeries(Infragistics.Controls.Charts.AnchoredCategorySeries,System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Validates the Fragment visual.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.GenerateSeries">
            <summary>
            Creates a list of series if the data source is a GroupBy.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.PrepareData">
            <summary>
            Calculates the value column and min and max values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesBase.RenderThumbnail(System.Windows.Rect,Infragistics.Controls.Charts.RenderSurface)">
            <summary>
            Renders the thumbnail image for the OPD pane.
            </summary>
            <param name="viewportRect">The viewport to use.</param>
            <param name="surface">The render target.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesBase.Series">
            <summary>
            Contains one or more stacked fragments.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesBase.AutoGenerateSeries">
            <summary>
            Gets or sets whether series should be automatically generated. Reqiures the use of GroupBy as the ItemsSource.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesBase.ReverseLegendOrder">
            <summary>
            Gets or sets whether the order of the fragment series should be reversed in the legend.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedSeriesBase.SeriesCreated">
            <summary>
            Occurs when a new fragment series is automatically generated.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesBase.PlotArea">
            <summary>
            Gets the plotting canvas.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesBase.SeriesPanel">
            <summary>
            Gets the grid contraining the child series
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HorizontalStackedSeriesBase.XAxisProperty">
            <summary>
            Identifies the XAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.HorizontalStackedSeriesBase.YAxisProperty">
            <summary>
            Identifies the YAxis dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.HorizontalStackedSeriesBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.HorizontalStackedSeriesBase.XAxis">
            <summary>
            Gets or sets the effective x-axis for this series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.HorizontalStackedSeriesBase.YAxis">
            <summary>
            Gets or sets the effective y-axis for this series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedAreaSeries.#ctor">
            <summary>
            Initializes a new instance of a StackedAreaSeries class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedAreaSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedAreaSeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100AreaSeries.#ctor">
            <summary>
            Initializes a new instance of a Stacked100AreaSeries class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100AreaSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100AreaSeries.PrepareData">
            <summary>
            Calculates the value column and min and max values.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Stacked100BarSeries">
            <summary>
            Represents a XamDataChart stacked100 bar series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedBarSeries">
            <summary>
            Represents a XamDataChart stacked bar series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VerticalStackedSeriesBase">
            <summary>
            Base class for stacked series with a numeric x-axis and a category y-axis.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.VerticalStackedSeriesBase.XAxisProperty">
            <summary>
            Identifies the ActualXAxis dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.VerticalStackedSeriesBase.YAxisProperty">
            <summary>
            Identifies the ActualYAxis dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VerticalStackedSeriesBase.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VerticalStackedSeriesBase.XAxis">
            <summary>
            Gets or sets the effective x-axis for the current CategorySeries object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VerticalStackedSeriesBase.YAxis">
            <summary>
            Gets or sets the effective y-axis for the current CategorySeries object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.#ctor">
            <summary>
            Initializes a new instance of a StackedBarSeries class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view has been created.
            </summary>
            <param name="view">The view class for the current series</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedBarSeries.RadiusXProperty">
            <summary>
            Identifies the RadiusX dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedBarSeries.RadiusYProperty">
            <summary>
            Identifies the RadiusY dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.GetMode2Index">
            <summary>
            Returns CategoryMode2 index of the current series.
            </summary>
            <returns>CategoryMode2 index</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.GetScaledWorldZeroValue">
            <summary>
            Returns the scaled zero value based on the axis reference value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.GetUnscaledWorldZeroValue">
            <summary>
            Returns the unscaled zero value based on the axis reference value.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the series to display the item for the specified data item.
            </summary>
            <remarks>
            The series is scrolled by the minimum amount required to place the specified data item within
            the central 80% of the visible axis.
            </remarks>
            <param name="item">The data item (item) to scroll to.</param>
            <returns>True if the specified item could be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.ValidateSeries(System.Windows.Rect,System.Windows.Rect,Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Checks if the series is valid to be rendered.
            </summary>
            <param name="viewportRect">The current viewport, a rectangle with bounds equivalent to the screen size of the series.</param>
            <param name="windowRect">The current window, a rectangle bounded between 0 and 1 representing the pan and zoom position.</param>
            <param name="view">The SeriesView in context.</param>
            <returns>True if the series is valid to be rendered, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.DataUpdatedOverride(Infragistics.FastItemsSourceEventAction,System.Int32,System.Int32,System.String)">
            <summary>
            When overridden in a derived class, DataChangedOverride is called whenever a change is made to
            the series data.
            </summary>
            <param name="action">The action performed on the data</param>
            <param name="position">The index of the first item involved in the update.</param>
            <param name="count">The number of items in the update.</param>
            <param name="propertyName">The name of the updated property.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.GetItemIndex(System.Windows.Point)">
            <summary>
            Gets the index of the item that resides at the provided world coordinates.
            </summary>
            <param name="world">The world coordinates of the requested item.</param>
            <returns>The requested item's index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.GetItem(System.Windows.Point)">
            <summary>
            Gets the item that is the best match for the specified world coordinates.
            </summary>
            <param name="world">The world coordinates to use.</param>
            <returns>The item that is the best match.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedBarSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedBarSeries.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.
            <para>
            This is a dependency property.
            </para>
            </summary>  
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedBarSeries.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100BarSeries.#ctor">
            <summary>
            Initializes a new instance of a Stacked100BarSeries class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100BarSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100BarSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100BarSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view has been created.
            </summary>
            <param name="view">The view class for the current series</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100BarSeries.PrepareData">
            <summary>
            Calculates the value column and min and max values.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Stacked100ColumnSeries">
            <summary>
            Represents a XamDataChart stacked100 column series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedColumnSeries">
            <summary>
            Represents a XamDataChart stacked column series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedColumnSeries.#ctor">
            <summary>
            Initializes a new instance of a StackedColumnSeries class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedColumnSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedColumnSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedColumnSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view has been created.
            </summary>
            <param name="view">The view class for the current series</param>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedColumnSeries.RadiusXProperty">
            <summary>
            Identifies the RadiusX dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedColumnSeries.RadiusYProperty">
            <summary>
            Identifies the RadiusY dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedColumnSeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedColumnSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedColumnSeries.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
            <para>
            This is a dependency property.
            </para>
            </summary>  
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedColumnSeries.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100ColumnSeries.#ctor">
            <summary>
            Initializes a new instance of a Stacked100ColumnSeries class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100ColumnSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100ColumnSeries.CreateView">
            <summary>
            Called to create the view for the series.
            </summary>
            <returns>The created view.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100ColumnSeries.OnViewCreated(Infragistics.Controls.Charts.SeriesView)">
            <summary>
            Called when the view has been created.
            </summary>
            <param name="view">The view class for the current series</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100ColumnSeries.PrepareData">
            <summary>
            Calculates the value column and min and max values.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Stacked100LineSeries">
            <summary>
            Represents a XamDataChart stacked100 line series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedLineSeries">
            <summary>
            Represents a stacked series, where the points in each series are connected with a line.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedLineSeries.#ctor">
            <summary>
            Initializes a new instance of a StackedLineSeries class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedLineSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedLineSeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100LineSeries.#ctor">
            <summary>
            Initializes a new instance of a Stacked100LineSeries class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100LineSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100LineSeries.PrepareData">
            <summary>
            Calculates the value column and min and max values.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Stacked100SplineAreaSeries">
            <summary>
            Represents a XamDataChart stacked100 spline area series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedSplineAreaSeries">
            <summary>
            Represents a XamDataChart stacked spline area series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSplineAreaSeries.#ctor">
            <summary>
            Initializes a new instance of a StackedSplineAreaSeries class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSplineAreaSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSplineAreaSeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100SplineAreaSeries.#ctor">
            <summary>
            Initializes a new instance of a Stacked100SplineAreaSeries class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100SplineAreaSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100SplineAreaSeries.PrepareData">
            <summary>
            Calculates the value column and min and max values.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Stacked100SplineSeries">
            <summary>
            Represents a XamDataChart stacked100 spline series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedSplineSeries">
            <summary>
            Represents a XamDataChart stacked spline series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSplineSeries.#ctor">
            <summary>
            Initializes a new instance of a StackedSplineSeries class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSplineSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSplineSeries.GetRange(Infragistics.Controls.Charts.Axis)">
            <summary>
            Returns the range requirement of this series on the given axis.
            </summary>
            <param name="axis">The axis for which to provide the range requirement.</param>
            <returns>The axis range needed for this series to fully display, or null, if there is no range requirement.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100SplineSeries.#ctor">
            <summary>
            Creates a new instance of a stacked100 spline series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100SplineSeries.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes
            call ApplyTemplate.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Stacked100SplineSeries.PrepareData">
            <summary>
            Calculates the value column and min and max values.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedFragmentSeries">
            <summary>
            Represents a non-visual child of StackedSeriesBase.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedFragmentSeries.#ctor">
            <summary>
            Creates a new instance of StackedFragmentSeries.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.BrushProperty">
            <summary>
            Identifies the Brush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualBrushProperty">
            <summary>
            Identifies the ActualBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.CursorProperty">
            <summary>
            Identifies the Cursor dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualCursorProperty">
            <summary>
            Identifies the ActualCursor dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.DashArrayProperty">
            <summary>
            Identifies the StrokeDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualDashArrayProperty">
            <summary>
            Identifies the ActualDashArray dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.DashCapProperty">
            <summary>
            Identifies the DashCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualDashCapProperty">
            <summary>
            Identifies the ActualDashCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.EndCapProperty">
            <summary>
            Identifies the EndCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualEndCapProperty">
            <summary>
            Identifies the ActualEndCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.IsHitTestVisibleProperty">
            <summary>
            Identifies the IsHitTestVisible dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualIsHitTestVisibleProperty">
            <summary>
            Identifies the ActualIsHitTestVisible dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.LegendItemBadgeTemplateProperty">
            <summary>
            Identifies the LegendItemBadgeTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualLegendItemBadgeTemplateProperty">
            <summary>
            Identifies the ActualLegendItemBadgeTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.LegendItemTemplateProperty">
            <summary>
            Identifies the LegendItemTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualLegendItemTemplateProperty">
            <summary>
            Identifies the ActualLegendItemTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.LegendItemVisibilityProperty">
            <summary>
            Identifies the LegendItemVisibility Dependency Property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualLegendItemVisibilityProperty">
            <summary>
            Identifies the ActualLegendItemVisibility dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.MarkerBrushProperty">
            <summary>
            Identifies the MarkerBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualMarkerBrushProperty">
            <summary>
            Identifies the ActualMarkerBrush dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.MarkerOutlineProperty">
            <summary>
            Identifies the MarkerOutline dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualMarkerOutlineProperty">
            <summary>
            Identifies the ActualMarkerOutline dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.MarkerStyleProperty">
            <summary>
            Identifies the MarkerStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualMarkerStyleProperty">
            <summary>
            Identifies the ActualMarkerStyle dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.MarkerTemplateProperty">
            <summary>
            Identifies the MarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualMarkerTemplateProperty">
            <summary>
            Identifies the ActualMarkerTemplate dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.MarkerTypeProperty">
            <summary>
            Identifies the MarkerType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualMarkerTypeProperty">
            <summary>
            Identifies the ActualMarkerType dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.NameProperty">
            <summary>
            Identifies the Name dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.OpacityProperty">
            <summary>
            Identifies the Opacity dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualOpacityProperty">
            <summary>
            Identifies the ActualOpacity depenedency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.OpacityMaskProperty">
            <summary>
            Identifies the OpacityMask dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualOpacityMaskProperty">
            <summary>
            Identifies the ActualOpacityMask dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.OutlineProperty">
            <summary>
            Identifies the Outline dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualOutlineProperty">
            <summary>
            Identifies the ActualOutline dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.RadiusXProperty">
            <summary>
            Identifies the RadiusX dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualRadiusXProperty">
            <summary>
            Identifies the ActualRadiusX dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.RadiusYProperty">
            <summary>
            Identifies the RadiusY dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualRadiusYProperty">
            <summary>
            Identifies the ActualRadiusY dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.StartCapProperty">
            <summary>
            Identifies the StartCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualStartCapProperty">
            <summary>
            Identifies the ActualStartCap dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ThicknessProperty">
            <summary>
            Identifies the Thickness dependency property.
            </summary>
            <remarks>
            There is a problematic behavior in Silverlight 3 where changing the StrokeThickness property of many shapes is not reflected at runtime.  If changing this property seems to have no effect, please use the workaround of making another change to the UI to force a refresh.
            <code>
            theChart.RenderTransform = new RotateTransform() { Angle = 0.01 };
            Dispatcher.BeginInvoke( () => theChart.RenderTransform = null);
            </code>
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualThicknessProperty">
            <summary>
            Identifies the ActualThickness dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ToolTipProperty">
            <summary>
            Identifies the ToolTip dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualToolTipProperty">
            <summary>
            Identifies the ActualToolTip dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.UseLightweightMarkersProperty">
            <summary>
            Identifies the UseLightweightMarkers dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualUseLightweightMarkersProperty">
            <summary>
            Identifies the ActualUseLightweightMarkers dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ValueMemberPathProperty">
            <summary>
            Identifies the ValueMemberPath dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.VisibilityProperty">
            <summary>
            Identifies the Visibility dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.StackedFragmentSeries.ActualVisibilityProperty">
            <summary>
            Identifies the ActualVisibility dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedFragmentSeries.RaisePropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            Raises PropertyChanged and/or PropertyUpdated events if any listeners have been registered.
            </summary>
            <param name="propertyName">Name of property whos value changed.</param>
            <param name="oldValue">Property value before change.</param>
            <param name="newValue">Property value after change.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedFragmentSeries.PropertyUpdatedOverride(System.Object,System.String,System.Object,System.Object)">
            <summary>
            When overriden in a derived class, gets called whenever a property value is updated
            on the series or owning chart. Gives the series a chance to respond to the various property udpates.
            </summary>
            <param name="sender">The object being updated.</param>
            <param name="propertyName">The name of the property being updated.</param>
            <param name="oldValue">The old value of the property.</param>
            <param name="newValue">The new value of the property.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.Brush">
            <summary>
            Gets or sets the brush of the stacked fragment.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualBrush">
            <summary>
            Gets the actual brush used by the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.Cursor">
            <summary>
            Gets or sets the cursor of the stacked fragment.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualCursor">
            <summary>
            Gets the actual cursor used by the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.DashArray">
            <summary>
            Gets or sets a collection of Double values that indicate the pattern of dashes and gaps that
            is used to outline the current series object. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualDashArray">
            <summary>
            Gets the actual dash array used by the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.DashCap">
            <summary>
            Gets or sets the PenLineCap enumeration value that specifies how the current series object's dash ends are drawn. 
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualDashCap">
            <summary>
            Gets the actual dash cap used by the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.EndCap">
            <summary>
            The style of the end point of any lines or polylines representing this series.
            </summary>
            <remarks>
            Not every series type has a line at which it would be appropriate to display an end cap, so this property does not affect every series type.  LineSeries, for example, is affected by EndCap, but ColumnSeries is not.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualEndCap">
            <summary>
            Gets the actual end cap used by the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.IsHitTestVisible">
            <summary>
            Gets or sets whether the series receives mouse events.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualIsHitTestVisible">
            <summary>
            Gets the actual value of whether or not the series receives mouse events.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.LegendItemBadgeTemplate">
            <summary>
            Gets or sets the LegendItemBadgeTemplate property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The legend item badge is created according to the LegendItemBadgeTemplate on-demand by 
            the series object itself.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualLegendItemBadgeTemplate">
            <summary>
            Gets the actual legend item badge template used by the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.LegendItemTemplate">
            <summary>
            Gets or sets the LegendItemTemplate property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The legend item control content is created according to the LegendItemTemplate on-demand by 
            the series object itself.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualLegendItemTemplate">
            <summary>
            Gets the actual legend item template used by the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.LegendItemVisibility">
            <summary>
            Gets or sets the legend item visibility for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualLegendItemVisibility">
            <summary>
            Gets the actual visibility of the legend items in the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.MarkerBrush">
            <summary>
            Gets or sets the brush that specifies how the current series object's marker interiors are painted.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualMarkerBrush">
            <summary>
            Gets the actual marker brush of the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.MarkerOutline">
            <summary>
            Gets or sets the brush that specifies how the current series object's marker outlines are painted.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualMarkerOutline">
            <summary>
            Gets the actual marker outline of the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.MarkerStyle">
            <summary>
            Gets or sets the Style to be used for the markers.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualMarkerStyle">
            <summary>
            Gets the actual marker style used by the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.MarkerTemplate">
            <summary>
            Gets or sets the MarkerTemplate for the current series object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualMarkerTemplate">
            <summary>
            Gets the actual marker template used by the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.MarkerType">
            <summary>
            Gets or sets the marker type for the current series object.
            </summary>
            <remarks>
            If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualMarkerType">
            <summary>
            Gets the actual marker type set used in the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.Name">
            <summary>
            Gets or sets the Name of the stacked fragment.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.Opacity">
            <summary>
            Gets or sets the Opacity of the stacked fragment.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualOpacity">
            <summary>
            Gets the series opacity.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.OpacityMask">
            <summary>
            Gets or sets the OpacityMask of the stacked fragment.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualOpacityMask">
            <summary>
            Gets the series opacity mask.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.Outline">
            <summary>
            Gets or sets the brush to use for the outline of the series.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.</remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualOutline">
            <summary>
            Gets the series outline.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.RadiusX">
            <summary>
            Gets or sets the x-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
            <para>
            This is a dependency property.
            </para>
            </summary>  
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualRadiusX">
            <summary>
            Gets the actual corner radius of the series
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.RadiusY">
            <summary>
            Gets or sets the y-radius of the ellipse that is used to round the corners of the column. This only applies to Bar and Column series.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualRadiusY">
            <summary>
            Gets the actual corner radius of the series
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.StartCap">
            <summary>
            The style of the starting point of any lines or polylines representing this series.
            </summary>
            <remarks>
            Not every series type has a line at which it would be appropriate to display a start cap, so this property does not affect every series type.  LineSeries, for example, is affected by StartCap, but ColumnSeries is not.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualStartCap">
            <summary>
            Gets the series start cap.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.Thickness">
            <summary>
            Gets or sets the width of the current series object's line thickness.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualThickness">
            <summary>
            Gets or sets the thickness of this stacked fragment.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.Title">
            <summary>
            Gets or sets the Title property.
            <para>
            This is a dependency property.
            </para>
            </summary>
            <remarks>
            The legend item control is created according to the Title on-demand by 
            the series object itself.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ToolTip">
            <summary>
            Gets or sets the ToolTip for the current series object.
            <para>This is a dependency property.</para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualToolTip">
            <summary>
            Gets the series tooltip.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.UseLightweightMarkers">
            <summary>
            Gets or sets the marker type for the current series object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualUseLightweightMarkers">
            <summary>
            Gets whether lightweight markers are used by the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ValueMemberPath">
            <summary>
            Gets or sets the value mapping property for the current series object.
            <para>
            This is a dependency property.
            </para>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.Visibility">
            <summary>
            Gets or sets the Visibility of the stacked fragment.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedFragmentSeries.ActualVisibility">
            <summary>
            Gets the actual visibility of the stacked fragment.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedFragmentSeries.MouseEnter">
            <summary>
            Occurs when the mouse enters the visual fragment series.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedFragmentSeries.MouseLeave">
            <summary>
            Occurs when the mouse leaves the visual fragment series.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedFragmentSeries.MouseLeftButtonDown">
            <summary>
            Occurs when the left button of the mouse is pressed over the visual fragment series.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedFragmentSeries.MouseLeftButtonUp">
            <summary>
            Occurs when the left button of the mouse is released over the visual fragment series.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedFragmentSeries.MouseMove">
            <summary>
            Occus when the mouse is moved within the visual fragment series.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedFragmentSeries.MouseRightButtonDown">
            <summary>
            Occurs when the right button of the mouse is pressed over the visual fragment series.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedFragmentSeries.MouseRightButtonUp">
            <summary>
            Occurs when the right button of the mouse is released over the visual fragment series.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedFragmentSeries.MouseWheel">
            <summary>
            Occurs when the mouse wheel is used on a visual fragment series.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedFragmentSeries.PropertyChanged">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedFragmentSeries.PropertyUpdated">
            <summary>
            Occurs when a property (including "effective" and non-dependency property) value changes.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedSeriesCollection">
            <summary>
            Represents a collection of StackedFragmentSeries used by XamDataChart stacked series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesCollection.#ctor">
            <summary>
            Initializes a default, empty StackedSeriesCollection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesCollection.ClearItems">
            <summary>
            Clears the contained items of the collection, but provides a preview of the occurrance 
            in the form of the CollectionResetting event.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Charts.StackedSeriesCollection.CollectionResetting">
            <summary>
            CollectionResetting is raised before the collection reset occurs.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.StackedSeriesCollection.Item(System.String)">
            <summary>
            Gets the first matching StackedFragmentSeries object by name.
            </summary>
            <param name="seriesName"></param>
            <returns>Matching series, or null.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.StackedSeriesManager">
            <summary>
            This class manages the creation of various visual series fragments.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.StackedSeriesManager.CreateSeries(Infragistics.Controls.Charts.StackedFragmentSeries)">
            <summary>
            Creates a series fragment based on the parent series type.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.BezierPoint">
            <summary>
            Represents a point on a segmented bezier curve.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Util.BezierPoint.Point">
            <summary>
            The point on the curve.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Util.BezierPoint.TValue">
            <summary>
            The T value of the point.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Util.BezierPoint.Index">
            <summary>
            The index of the point.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.ChartVisualData">
            <summary>
            Represents visual data extracted from a chart for use by external tools and functionality.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.ChartVisualData.#ctor">
            <summary>
            Constructs a ChartVisualData
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.ChartVisualData.ScaleByViewport">
            <summary>
            Scales the chart data against a viewport to normalize the data for comparison.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.ChartVisualData.Axes">
            <summary>
            Data about the axes of the chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.ChartVisualData.Series">
            <summary>
            Data about the series of the chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.ChartVisualData.Name">
            <summary>
            The name of the chart.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.ChartVisualData.IsViewportScaled">
            <summary>
            Has the data been scaled against a viewport for normalization.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.SeriesVisualDataList">
            <summary>
            Represents a list of series visual data.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.SeriesVisualData">
            <summary>
            Represents the extracted visual data of a series.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.SeriesVisualData.#ctor">
            <summary>
            Constructs a SeriesVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.SeriesVisualData.ScaleByViewport">
            <summary>
            Normalizes the shape data of the series by its viewport to enable comparison.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.SeriesVisualData.Name">
            <summary>
            The name of the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.SeriesVisualData.Type">
            <summary>
            The type of the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.SeriesVisualData.Viewport">
            <summary>
            The viewport of the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.SeriesVisualData.Shapes">
            <summary>
            The visual shape data of the series.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.SeriesVisualData.MarkerShapes">
            <summary>
            The visual marker shape data of the series.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.MarkerVisualDataList">
            <summary>
            Represents visual information about series markers.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.MarkerVisualData">
            <summary>
            Represents visual data about a series marker.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.MarkerVisualData.X">
            <summary>
            The x position of the marker.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.MarkerVisualData.Y">
            <summary>
            The y position of the marker.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.MarkerVisualData.Index">
            <summary>
            The index of the marker data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.MarkerVisualData.ContentTemplate">
            <summary>
            The template applied to the marker.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.MarkerVisualData.Visibility">
            <summary>
            The visibility of the marker.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.AxisVisualDataList">
            <summary>
            Represents a list of axis visual data.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.AxisVisualData">
            <summary>
            Represents visual data for an axis.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.AxisVisualData.#ctor">
            <summary>
            Constructs an AxisVisualData.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.AxisVisualData.Name">
            <summary>
            The name of the axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.AxisVisualData.Type">
            <summary>
            The type of the axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.AxisVisualData.Viewport">
            <summary>
            The viewport of the axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.AxisVisualData.Labels">
            <summary>
            Visual information about the labels of the axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.AxisVisualData.AxisLine">
            <summary>
            Visual information about the axis line.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.AxisVisualData.MajorLines">
            <summary>
            Visual information about the major lines of the axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.AxisVisualData.MinorLines">
            <summary>
            Visual information about the minor lines of the axis.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.PrimitiveVisualDataList">
            <summary>
            Provides information about primitive visual elements.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PrimitiveVisualDataList.ContainingTag(System.String)">
            <summary>
            Returns the items matching the categorical tag.
            </summary>
            <param name="tag">The tag to match.</param>
            <returns>The returned visual data.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.AxisLabelVisualDataList">
            <summary>
            Provides information about axis label elements.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.AxisLabelVisualData">
            <summary>
            Provides information about an axis label visual element.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.AxisLabelVisualData.LabelValue">
            <summary>
            The value of the label.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.AxisLabelVisualData.LabelPosition">
            <summary>
            The position of the label along the axis.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.AxisLabelVisualData.Appearance">
            <summary>
            The appearance of the label
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.LabelAppearanceData">
            <summary>
            Describes appearance information about a label.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LabelAppearanceData.Text">
            <summary>
            The Label Text.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.PrimitiveAppearanceData">
            <summary>
            Describes appearance information about a primitive element.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveAppearanceData.Stroke">
            <summary>
            The stroke color of the pimitive.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveAppearanceData.Fill">
            <summary>
            The fill color of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveAppearanceData.StrokeThickness">
            <summary>
            The thickness of the stroke of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveAppearanceData.Visibility">
            <summary>
            Whether the primitive is visible.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveAppearanceData.Opacity">
            <summary>
            The opacity of teh primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveAppearanceData.CanvasLeft">
            <summary>
            The left position of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveAppearanceData.CanvasTop">
            <summary>
            The top position of the primitive.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveAppearanceData.CanvaZIndex">
            <summary>
            The z index of the primitive.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.GetPointsSettings">
            <summary>
            Describes how point saliency is determined.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.GetPointsSettings.IgnoreFigureStartPoint">
            <summary>
            Describes whether the start element of shapes should be ignored due to duplicate points.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.PrimitiveVisualData">
            <summary>
            Describes information about a primitive visual element.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PrimitiveVisualData.#ctor(System.String)">
            <summary>
            Constructs a primitive visual element.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PrimitiveVisualData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PrimitiveVisualData.GetPoints(Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Gets the salient points associated with this visual element.
            </summary>
            <param name="settings">Describes how point saliency should be determined.</param>
            <returns>Groupings of points associated with the element.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PrimitiveVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveVisualData.Appearance">
            <summary>
            The visual appearance of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveVisualData.Tags">
            <summary>
            Information tags that categorize the intent of the element.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveVisualData.Type">
            <summary>
            The type of the visual element.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PrimitiveVisualData.Name">
            <summary>
            The name of the visual element.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.RectangleVisualData">
            <summary>
            Describes visual information for a rectangle visual.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.RectangleVisualData.#ctor">
            <summary>
            Constructs a RectangleVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.RectangleVisualData.#ctor(System.String,System.Windows.Shapes.Rectangle)">
            <summary>
            Constructs a RectangleVisualData based on a source Rectangle.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="rect">The source Rectangle.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.RectangleVisualData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.RectangleVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.RectangleVisualData.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.RectangleVisualData.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.RectangleVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.ShapeTags">
            <summary>
            Represents categorical information to provide context for a visual element.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.LineVisualData">
            <summary>
            Describes visual information for a line visual.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.LineVisualData.#ctor">
            <summary>
            Constructs a LineVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.LineVisualData.#ctor(System.String,System.Windows.Shapes.Line)">
            <summary>
            Constructs a LineVisualData based on a source Line.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="line">The source Line.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.LineVisualData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.LineVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineVisualData.X1">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineVisualData.Y1">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineVisualData.X2">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineVisualData.Y2">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.PolyLineVisualData">
            <summary>
            Describes visual information for a polyline visual.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PolyLineVisualData.#ctor">
            <summary>
            Constructs a PolyLineVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PolyLineVisualData.#ctor(System.String,System.Windows.Shapes.Polyline)">
            <summary>
            Constructs a PolyLineVisualData based on a source Polyline.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="line">The source Polyline.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PolyLineVisualData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PolyLineVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PolyLineVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PolyLineVisualData.Points">
            <summary>
            The points in the polyline.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.PathVisualData">
            <summary>
            Describes visual information for a path visual.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PathVisualData.#ctor">
            <summary>
            Constructs a PathVisualData.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PathVisualData.#ctor(System.String,System.Windows.Shapes.Path)">
            <summary>
            Constructs a PathVisualData based on a source Path.
            </summary>
            <param name="name">The name of the visual data.</param>
            <param name="path">The source Path.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PathVisualData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PathVisualData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PathVisualData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PathVisualData.Data">
            <summary>
            The data in the path.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.GeometryData">
            <summary>
            Describes visual information for a geometry visual.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.GeometryData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="Viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.GeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.GeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.PathGeometryData">
            <summary>
            Describes visual information for a path geometry.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PathGeometryData.#ctor">
            <summary>
            Constructs a PathGeometryData.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PathGeometryData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="Viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PathGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PathGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PathGeometryData.Figures">
            <summary>
            The figures in the path.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.LineGeometryData">
            <summary>
            Describes visual information for a line geometry.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.LineGeometryData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="Viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.LineGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineGeometryData.X1">
            <summary>
            The x position of the start of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineGeometryData.Y1">
            <summary>
            The y position of the start of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineGeometryData.X2">
            <summary>
            The x position of the end of the line.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineGeometryData.Y2">
            <summary>
            The y position of the end of the line.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.RectangleGeometryData">
            <summary>
            Describes visual information for a rectangle geometry.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.RectangleGeometryData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="Viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.RectangleGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.RectangleGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.RectangleGeometryData.X">
            <summary>
            The x position of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.RectangleGeometryData.Y">
            <summary>
            The y position of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.RectangleGeometryData.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.RectangleGeometryData.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.EllipseGeometryData">
            <summary>
            Describes visual information for an ellipse geometry.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.EllipseGeometryData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="Viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.EllipseGeometryData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.EllipseGeometryData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.EllipseGeometryData.CenterX">
            <summary>
            The x coordinate of the center of the ellipse.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.EllipseGeometryData.CenterY">
            <summary>
            The y coordinate of the center of the ellipse.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.EllipseGeometryData.RadiusX">
            <summary>
            The x radius of the ellipse.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.EllipseGeometryData.RadiusY">
            <summary>
            The y radius of the ellipse.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.PathFigureData">
            <summary>
            Describes visual information for a path figure.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PathFigureData.#ctor">
            <summary>
            Constructs a PathFigureData.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PathFigureData.#ctor(System.Windows.Media.PathFigure)">
            <summary>
            Constructs a PathFigureData based on a source PathFigure.
            </summary>
            <param name="fig">The source PathFigure.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PathFigureData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="Viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PathFigureData.GetPointsOverride(System.Collections.Generic.List{System.Collections.Generic.List{System.Windows.Point}},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="points">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PathFigureData.StartPoint">
            <summary>
            The start point of the path.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PathFigureData.Segments">
            <summary>
            The segments in the path.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.SegmentData">
            <summary>
            Describes visual information for a segment.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.SegmentData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="Viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.SegmentData.GetPointsOverride(System.Collections.Generic.List{System.Windows.Point},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.SegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.LineSegmentData">
            <summary>
            Describes visual information for a line segment.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.LineSegmentData.#ctor">
            <summary>
            Constructs a LineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.LineSegmentData.#ctor(System.Windows.Media.LineSegment)">
            <summary>
            Constructs a LineSegmentData based on a source LineSegment.
            </summary>
            <param name="seg">The source LineSegment.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.LineSegmentData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="Viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.LineSegmentData.GetPointsOverride(System.Collections.Generic.List{System.Windows.Point},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.LineSegmentData.Point">
            <summary>
            The end point of the line segment.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.PolylineSegmentData">
            <summary>
            Describes visual information for a polyline segment.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PolylineSegmentData.#ctor">
            <summary>
            Constructs a PolylineSegmentData.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PolylineSegmentData.#ctor(System.Windows.Media.PolyLineSegment)">
            <summary>
            Constructs a PolylineSegmentData based on a source PolyLineSegment.
            </summary>
            <param name="poly">The source PolylineSegment.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PolylineSegmentData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="Viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.PolylineSegmentData.GetPointsOverride(System.Collections.Generic.List{System.Windows.Point},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PolylineSegmentData.Type">
            <summary>
            Returns the type name of the visual data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.PolylineSegmentData.Points">
            <summary>
            The points in the segment.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.ArcSegmentData">
            <summary>
            Information data about an arc segment.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.ArcSegmentData.#ctor">
            <summary>
            Constructs an ArcSegmentData
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.ArcSegmentData.#ctor(System.Windows.Media.ArcSegment)">
            <summary>
            Constructs an ArcSegmentData based on a source arc.
            </summary>
            <param name="arc">The arc to extract data from.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.ArcSegmentData.ScaleByViewport(System.Windows.Rect)">
            <summary>
            Called to scale this data by a viewport for normalization.
            </summary>
            <param name="Viewport"></param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.ArcSegmentData.GetPointsOverride(System.Collections.Generic.List{System.Windows.Point},Infragistics.Controls.Charts.VisualData.GetPointsSettings)">
            <summary>
            Called to extract the salient points from this data.
            </summary>
            <param name="current">The points container.</param>
            <param name="settings">Information about how point saliency is determined.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.ArcSegmentData.Type">
            <summary>
            The type of this data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.ArcSegmentData.Point">
            <summary>
            The center point of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.ArcSegmentData.IsLargeArc">
            <summary>
            Whether the arc is a large arc.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.ArcSegmentData.IsCounterClockwise">
            <summary>
            The sweep direction of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.ArcSegmentData.SizeX">
            <summary>
            The x size os the arg.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.ArcSegmentData.SizeY">
            <summary>
            The y size of the arc.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.VisualData.ArcSegmentData.RotationAngle">
            <summary>
            The rotation angle of the arc.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.VisualData.AppearanceHelper">
            <summary>
            Assists in storing information about chart visual appearance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.AppearanceHelper.FromBrush(System.Windows.Media.Brush)">
            <summary>
            Returns the color from a brush.
            </summary>
            <param name="b">The brush to extract the color from.</param>
            <returns>The returned color.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.AppearanceHelper.GetCanvasLeft(System.Windows.FrameworkElement)">
            <summary>
            Gets the left position of an element.
            </summary>
            <param name="line">The element to get the left position of.</param>
            <returns>The left position.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.AppearanceHelper.GetCanvasTop(System.Windows.FrameworkElement)">
            <summary>
            Gets the top position of an element.
            </summary>
            <param name="line">The element to get the top position of.</param>
            <returns>The top position.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.AppearanceHelper.GetCanvasZIndex(System.Windows.FrameworkElement)">
            <summary>
            Gets the z-index of an element.
            </summary>
            <param name="line">The element to get the z index of</param>
            <returns>The z index of the element.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.AppearanceHelper.FromPathData(System.Windows.Shapes.Path)">
            <summary>
            Gets the geometry data for a path.
            </summary>
            <param name="path">The path to get data for.</param>
            <returns>The geometry data for a path.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.AppearanceHelper.FromGeometry(System.Windows.Media.Geometry)">
            <summary>
            Gets data about the provided geometry.
            </summary>
            <param name="data">The geometry to get data for.</param>
            <returns>The list of geometry data extracted.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.AppearanceHelper.GetShapeAppearance(Infragistics.Controls.Charts.VisualData.PrimitiveAppearanceData,System.Windows.Shapes.Shape)">
            <summary>
            Gets appearance information for a shape.
            </summary>
            <param name="appearance">The appearance information to populate.</param>
            <param name="path">The shape from which to get information.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.VisualData.AppearanceHelper.FromTextElement(System.Windows.FrameworkElement)">
            <summary>
            Gets appearance information from a text element.
            </summary>
            <param name="frameworkElement">The text element to examine.</param>
            <returns>The label appearance information obtained.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.DoubleColumn">
            <summary>
            A column of doubles.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.DoubleColumn.SetValues(System.Object)">
            <summary>
            Sets the values of the double column.
            </summary>
            <param name="values">The values to set.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.DoubleColumn.Values">
            <summary>
            Sets or gets the values of the double column
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.StringColumn">
            <summary>
            A column of strings.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.StringColumn.SetValues(System.Object)">
            <summary>
            Sets the values of the string column.
            </summary>
            <param name="values">The values to set.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.StringColumn.Values">
            <summary>
            Gets or sets the values of the string column.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.ObjectColumn">
            <summary>
            A column of objects.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.ObjectColumn.SetValues(System.Object)">
            <summary>
            Sets the values of an object column.
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.ObjectColumn.Values">
            <summary>
            The values of the object column.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.IntColumn">
            <summary>
            A column of integers.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.IntColumn.#ctor">
            <summary>
            Instantiates an int column.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.IntColumn.Populate(System.Int32)">
            <summary>
            Populates the values in the column.
            </summary>
            <param name="count">The number of values to populate.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.IntColumn.Sort(Infragistics.Controls.Charts.Util.IntColumnComparison)">
            <summary>
            Sorts the column by the given comparison method.
            </summary>
            <param name="comparison">The comparison to use in the sort.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.IntColumn.GetEnumerator">
            <summary>
            Gets an enumarator for the values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.IntColumn.Values">
            <summary>
            The values of the column.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.IntColumnComparison">
            <summary>
            Compares ints in the column.
            </summary>
            <param name="i1">The first int.</param>
            <param name="i2">The second int</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.DoubleCollectionDuplicator">
            <summary>
            Used to create duplicates of DoubleCollection instances.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.DoubleCollectionDuplicator.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns a duplicate of a given DoubleCollection
            </summary>
            <param name="value">source DoubleCollection</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter</param>
            <param name="culture">culture info</param>
            <returns>duplicate of the source DoubleCollection</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.DoubleCollectionDuplicator.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns a duplicate of a given DoubleCollection
            </summary>
            <param name="value">source DoubleCollection</param>
            <param name="targetType">target type</param>
            <param name="parameter">parameter</param>
            <param name="culture">culture info</param>
            <returns>duplicate of the source DoubleCollection</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.ItemsSourceAction">
            <summary>
            Describes the action that caused an ItemsSource event. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Util.ItemsSourceAction.Remove">
            <summary>
            One or more rows were removed from the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Util.ItemsSourceAction.Insert">
            <summary>
            One or more rows were added to the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Util.ItemsSourceAction.Replace">
            <summary>
            One or more rows were replaced in the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Util.ItemsSourceAction.Change">
            <summary>
            An item property value changed in the data source.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Charts.Util.ItemsSourceAction.Reset">
            <summary>
            The entire data source contents were reset.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.Partitioner">
            <summary>
            Utility class for range partitioning.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Partitioner.PartitionByValue``1(System.Collections.Generic.IList{``0},``0,System.Int32,System.Int32)">
            <summary>
            </summary>
            <remarks>
            The list is reordered such that list[0] to list[k-1] are less than list[k] and
            all items list[k+1] to list[list.Count-1] are greater than list[k].
            <para>
            The items within the upper and lower subranges are in no particular order,
            and specifically are not sorted.
            </para>
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="values">List of values to partition.</param>
            <param name="value">Pivot value.</param>
            <param name="begin">Index of first item in subrange.</param>
            <param name="end">Index of last item in subrange.</param>
            <returns>Index of first item greater than the specified pivot value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Partitioner.PartitionByValue``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Int32},``0,System.Int32,System.Int32)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">List of values.</param>
            <param name="indices">List of indices to partition.</param>
            <param name="value">Pivot value.</param>
            <param name="begin">Index of first index in subrange.</param>
            <param name="end">Index of last index in subrange.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Partitioner.PartitionByValue``1(Infragistics.Controls.Charts.Util.Numeric.ComparableDelegate,System.Collections.Generic.IList{System.Int32},``0,System.Int32,System.Int32)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="indices"></param>
            <param name="value"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Partitioner.Partition``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Calculates the kth biggest item in the current list object and partitions
            the list accordingly.
            </summary>
            <remarks>
            The list is reordered such that list[0] to list[k-1] are less than list[k] and
            all items list[k+1] to list[list.Count-1] are greater than list[k].
            <para>
            The items within the upper and lower subranges are in no particular order,
            and specifically are not sorted.
            </para>
            </remarks>
            <typeparam name="T">Where IComparable.</typeparam>
            <param name="list">List object to partition.</param>
            <param name="k">Pivot item order.</param>
            <returns>Pivot item value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Partitioner.Partition``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the kth biggest item in the specified subrange of the current
            list object and partitions it accordingly.
            </summary>
            <remarks>
            The list is reordered such that list[position] to list[position+k-1] are
            less than list[position+k] and
            all items list[position+k+1] to list[position+Count] are greater than list[k].
            <para>
            The items within the upper and lower subranges are in no particular order,
            and specifically are not sorted.
            </para>
            </remarks>
            <typeparam name="T">Where IComparable.</typeparam>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Partitioner.Partition``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{System.Int32})">
            
            
            <summary>
            Indirect selection and partition.
            </summary>
            <typeparam name="T">Where IComparable</typeparam>
            <param name="list"></param>
            <param name="k"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Partitioner.Partition``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Indirect selection and partition with subrange
            </summary>
            <typeparam name="T">Where IComparable</typeparam>
            <param name="list"></param>
            <param name="k"></param>
            <param name="indices">Indices of visible items</param>
            <param name="position"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Partitioner.Partition(Infragistics.Controls.Charts.Util.Numeric.ComparableDelegate,System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Indirect Comparable Delegate by Order
            </summary>
            <param name="comparable"></param>
            <param name="k"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Partitioner.Partition(Infragistics.Controls.Charts.Util.Numeric.ComparableDelegate,System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Indirect Comparable Delegate by Order
            </summary>
            <param name="comparable"></param>
            <param name="k"></param>
            <param name="indices"></param>
            <param name="position"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Partitioner.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swap two list items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">Current list object.</param>
            <param name="a">Index of first item to swap.</param>
            <param name="b">Index of second item to swap.</param>
        </member>
        <member name="T:Infragistics.Controls.Charts.PointList">
            <summary>
            A list of points.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.Pool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T">Pooled object type. Must be nullable</typeparam>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.IIndexedPool`1">
            <summary>
            An IPool that is indexed by integer indexes.
            </summary>
            <typeparam name="T">The type of objects in the pool.</typeparam>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.IPool`1">
            <summary>
            Represents a pool of reusable objects.
            </summary>
            <typeparam name="T">The type of objects in the pool.</typeparam>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.IPool`1.Clear">
            <summary>
            Clear the values from the pool.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.IPool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.IPool`1.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.IPool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.IPool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.IIndexedPool`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index for which to get the item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Pool`1.#ctor">
            <summary>
            Constructs a new Pool instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Pool`1.Clear">
            <summary>
            Clears the items from the pool.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.Pool`1.DoToAll(System.Action{`0})">
            <summary>
            Perfoms an action on all the items in the pool.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.Pool`1.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.Pool`1.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.Pool`1.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.Pool`1.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.Pool`1.Item(System.Int32)">
            <summary>
            Gets the indexed item, extendening the pool and creating the item
            if necessary.
            </summary>
            <param name="index"></param>
            <returns>Item</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.Pool`1.Count">
            <summary>
            Gets or sets the count of the items that are in the pool.
            </summary>
            <remarks>
            Setting the count to less than the current value will result in pool
            items automatically being deactivated.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.Pool`1.Active">
            <summary>
            The list of active objects.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.Pool`1.Inactive">
            <summary>
            The list of inactive objects.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.IHashPool`2">
            <summary>
            An hash mapped IPool.
            </summary>
            <typeparam name="TKey">The type of the keys for the pool.</typeparam>
            <typeparam name="TValue">The type of the values in the pool.</typeparam>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.IHashPool`2.Item(`0)">
            <summary>
            Gets the item for the specified key.
            </summary>
            <param name="key">The key for which to get the item.</param>
            <returns>The requested item.</returns>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.HashPool`2">
            <summary>
            An implementation of a hash mapped pool.
            </summary>
            <typeparam name="TKey">The type of the keys for the pool.</typeparam>
            <typeparam name="TValue">The type of the values in the pool.</typeparam>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.HashPool`2.#ctor">
            <summary>
            Constructs a new HashPool instance.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.HashPool`2.IsActiveKey(`0)">
            <summary>
            Returns whether the provided key is in the active set.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key is in the active set.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.HashPool`2.Remove(`0)">
            <summary>
            Removes the item with the provided key from the pool.
            </summary>
            <param name="key">The key for the item to remove.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.HashPool`2.Clear">
            <summary>
            Clears the items from the hash pool.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.HashPool`2.DoToAll(System.Action{`1})">
            <summary>
            Perfoms an action on all the items in the pool.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.HashPool`2.Inactive">
            <summary>
            The inactive members of the pool.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.HashPool`2.Active">
            <summary>
            The active members of the pool.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.HashPool`2.Create">
            <summary>
            Gets or sets the function used to create new items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.HashPool`2.Disactivate">
            <summary>
            Gets or sets the function used to disactivate items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.HashPool`2.Activate">
            <summary>
            Gets or sets the function used to activate items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.HashPool`2.Destroy">
            <summary>
            Gets or sets the function used to destroy old items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.HashPool`2.Item(`0)">
            <summary>
            Gets the requested item, extendening the pool and creating the item
            if necessary.
            </summary>
            <param name="key"></param>
            <returns>Item</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.HashPool`2.ActiveKeys">
            <summary>
            Gets the keys of the active pool objects.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.HashPool`2.ActiveCount">
            <summary>
            Gets the count of the number of actives.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection">
            <summary>
            Creates a wrapper around a collection that asserts that access to the items is readonly
            and that Double.NaN and Double.(Positive/Negative)Infinity values are coerced to safe
            values for calculation and rendering.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Constructs a new SafeReadOnlyDoubleCollection
            </summary>
            <param name="target">The target collection to wrap.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.IndexOf(System.Double)">
            <summary>
            Returns the index of the given item.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.Insert(System.Int32,System.Double)">
            <summary>
            Inserts the given item as the specified index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
            <remarks>
            Will fail, as this collection is read-only. 
            Implemented only to satisfy the IList interface.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index from which to remove the item.</param>
            <remarks>
            Will fail, as this collection is read-only. 
            Implemented only to satisfy the IList interface.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.Add(System.Double)">
            <summary>
            Adds a new item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <remarks>
            Will fail, as this collection is read-only. 
            Implemented only to satisfy the ICollection interface.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.Clear">
            <summary>
            Clears the items from the collection.
            </summary>
            <remarks>
            Will fail, as this collection is read-only. 
            Implemented only to satisfy the ICollection interface.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.Contains(System.Double)">
            <summary>
            Determines whether the collection contains the provided item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the item is found in the collection.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the collection to the provided array, starting at the specified index.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The starting index.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.Remove(System.Double)">
            <summary>
            Removes the provided item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>True if the item was removed from the collection.</returns>
            <remarks>
            Will fail, as this collection is read-only. 
            Implemented only to satisfy the ICollection interface.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index at which to get or set the item.</param>
            <returns>The item requested.</returns>
            <remarks>
            The set will fail, as this collection is read-only. 
            Implemented only to satisfy the IList interface.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SafeReadOnlyDoubleCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection">
            <summary>
            Creates a wrapper around a collection that asserts that access to the items is readonly
            and that Double.NaN and Double.(Positive/Negative)Infinity values are coerced to safe
            values for calculation and rendering. In addition, it will emulate that the items are sorted
            based on a sorted index map provided upon creation.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Constructs a new SafeSortedReadOnlyDoubleCollection instance.
            </summary>
            <param name="target">The target collection to wrap.</param>
            <param name="sortedIndices">The unsorted indexes of the target collection if it were sorted.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.IndexOf(System.Double)">
            <summary>
            Returns the index of the given item.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.Insert(System.Int32,System.Double)">
            <summary>
            Inserts the given item as the specified index.
            </summary>
            <param name="index">The index at which to insert the item.</param>
            <param name="item">The item to insert.</param>
            <remarks>
            Will fail, as this collection is read-only. 
            Implemented only to satisfy the IList interface.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index from which to remove the item.</param>
            <remarks>
            Will fail, as this collection is read-only. 
            Implemented only to satisfy the IList interface.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.Add(System.Double)">
            <summary>
            Adds a new item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <remarks>
            Will fail, as this collection is read-only. 
            Implemented only to satisfy the ICollection interface.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.Clear">
            <summary>
            Clears the items from the collection.
            </summary>
            <remarks>
            Will fail, as this collection is read-only. 
            Implemented only to satisfy the ICollection interface.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.Contains(System.Double)">
            <summary>
            Determines whether the collection contains the provided item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the item is found in the collection.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the collection to the provided array, starting at the specified index.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The starting index.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.Remove(System.Double)">
            <summary>
            Removes the provided item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>True if the item was removed from the collection.</returns>
            <remarks>
            Will fail, as this collection is read-only. 
            Implemented only to satisfy the ICollection interface.
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>The enumerator instance.</returns>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index at which to get or set the item.</param>
            <returns>The item requested.</returns>
            <remarks>
            The set will fail, as this collection is read-only. 
            Implemented only to satisfy the IList interface.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SafeSortedReadOnlyDoubleCollection.IsReadOnly">
            <summary>
            Gets whether the collection is readonly.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Charts.Util.SortedListView`1">
            <summary>
            Used to get a sorted view of an unsorted list, based on the sorted indices for the list.
            </summary>
            <typeparam name="T">The item type</typeparam>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Constructs an instance of a SortedListView
            </summary>
            <param name="source">The unsorted collection.</param>
            <param name="sortedIndices">The indexes in order if the list were sorted.</param>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.Add(System.Object)">
            <summary>
            Adds and item to the collection.
            </summary>
            <param name="value">The item to add.</param>
            <returns></returns>
            <remarks>Not supported because view is read only.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.Clear">
            <summary>
            Clears the collection.
            </summary>
            <remarks>Not supported because view is read only.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.Contains(`0)">
            <summary>
            Determines if the collection contains the provided item.
            </summary>
            <param name="value">The item to check for.</param>
            <returns>true, if the list contains the item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.IndexOf(`0)">
            <summary>
            Returns the index of the provided value in the collection.
            </summary>
            <param name="value">The value to find.</param>
            <returns>The index of the value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index">The index to insert the item at.</param>
            <param name="value">The item to insert.</param>
            <remarks>Not supported because the view is read only.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.Remove(`0)">
            <summary>
            Removes the specified value from the collection.
            </summary>
            <param name="value">The value to remove</param>
            <remarks>Not supported because the view is read only.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <remarks>Not supported because the view is read only.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.GetEnumerator">
            <summary>
            Gets the enumerator for iterating through the collection.
            </summary>
            <returns>The enumerator requested.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <remarks>Not supported because the view is read only.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <remarks>Not supported because the view is read only.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets the enumerator for iterating through the collection.
            </summary>
            <returns>The enumerator requested.</returns>
        </member>
        <member name="M:Infragistics.Controls.Charts.Util.SortedListView`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The starting index in the array.</param>
            <remarks>Not supported.</remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SortedListView`1.IsFixedSize">
            <summary>
            Returns if the view has a fixed size. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SortedListView`1.IsReadOnly">
            <summary>
            Returns if the view is read only.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SortedListView`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The index to get or set from.</param>
            <returns>The item requested</returns>
            <remarks>Only the getter is supported as the view is read only.</remarks>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SortedListView`1.Count">
            <summary>
            Returns the count of the items in the view.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SortedListView`1.IsSynchronized">
            <summary>
            Returns whether the collection is synchronized.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Charts.Util.SortedListView`1.SyncRoot">
            <summary>
            Returns the synchronization root to use to synchronize the collection.
            </summary>
        </member>
    </members>
</doc>
