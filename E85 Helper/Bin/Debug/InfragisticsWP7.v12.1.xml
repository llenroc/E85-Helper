<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfragisticsWP7.v12.1</name>
    </assembly>
    <members>
        <member name="T:Infragistics.CoreUtilities">
            <summary>
            Contains static helper methods.
            </summary>
        </member>
        <member name="M:Infragistics.CoreUtilities.#ctor">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Infragistics.CoreUtilities.BuildEmbeddedResourceUri(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a Uri for a resource embedded in an assembly
            </summary>
            <param name="assembly">The assembly that contains the resource</param>
            <param name="resourcePath">The relative path to the resource (e.g. "Looks/Onyx.xaml")</param>
            <returns>A Uri to the resource.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.ConvertDataValue(System.Object,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Converts 'valueToConvert' to an object of the type 'convertToType'. If it cannot perform the conversion
            it returns null. It makes use of any formatting information provided passed in.
            </summary>
            <returns>Converted value, null if unsuccessful.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.ConvertDataValue(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts 'valueToConvert' to an object of the type 'convertToType'. If it cannot perform the conversion
            it returns null. It makes use of any formatting information provided passed in.
            </summary>
            <returns>Converted value, null if unsuccessful.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.CreateComparer``1(System.Comparison{``0})">
            <summary>
            Creates an IComparer that wraps the specified comparison.
            </summary>
            <typeparam name="T">The type of object being compared</typeparam>
            <param name="comparison">The comparison delegate to use when comparing elements.</param>
            <returns>A new IComparer&lt;T&gt; that uses the specified <paramref name="comparison"/> to perform the compare.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.IsKnownType(System.Type)">
            <summary>
            Checks if the type is a known type (to Infragistics controls).
            </summary>
        </member>
        <member name="M:Infragistics.CoreUtilities.GetItemsInRange``1(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Gets items from the list which must be an IList or IList&lt;T&gt;.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">Must be an IList or IList&lt;T&gt;.</param>
            <param name="startIndex">Start of the range.</param>
            <param name="count">Number of items to return.</param>
            <returns>Array of items.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.GetUnderlyingType(System.Type)">
            <summary>
            Takes a Type and returns the underlying (non-nullable) type, if the Type is nullable. If the specified type is not nullable, then the passed-in type is returned. 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.GetWeakReferenceTargetSafe(System.WeakReference)">
            <summary>
            Wraps the 'get' of the Target property in a try/catch to prevent unhandled exceptions
            </summary>
            <param name="weakReference">The WeakRefernce holding the target.</param>
            <returns>The Target or null if an exception was thrown.</returns>
        </member>
        <member name="M:Infragistics.CoreUtilities.IsValueEmpty(System.Object)">
            <summary>
            Returns true if the specified val is null, DBNull, empty string, or DependencyProperty.UnsetValue.
            </summary>
            <param name="val">Value to test</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.RemoveAll``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Removes all occurrences of itemToRemove from list.
            </summary>
            <param name="list">List whose items should be removed</param>
            <param name="itemToRemove">The value of the items that should be removed</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.RemoveAll``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Removes all occurrences of itemToRemove from list.
            </summary>
            <param name="list">List whose items should be removed</param>
            <param name="itemToRemove">The value of the items that should be removed</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMerge(System.Object[],System.Collections.IComparer)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. It requires allocation of an array equal in size to the array to be sorted.
            Merge sort should be used if the operation of comparing items is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="comparer">Object used to compare the items during the sort</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMerge(System.Object[],System.Object[],System.Collections.IComparer)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Object used to compare the items during the sort</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMerge(System.Object[],System.Object[],System.Collections.IComparer,System.Int32,System.Int32)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Object used to compare the items during the sort</param>
            <param name="si">Start index in the array.</param>
            <param name="ei">End index in the array.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMergeGeneric``1(System.Collections.Generic.List{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in list based on the passed in comparer using a modified merge-sort
            algorithm. 
            </summary>
            <param name="list">The list to be sorted.</param>
            <param name="comparer">The comparer (must not be null).</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMergeGeneric``1(System.Collections.Generic.List{``0},System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Sorts the passed in list based on the passed in comparer using a modified merge-sort
            algorithm. 
            </summary>
            <param name="list">The list to be sorted.</param>
            <param name="comparer">The comparer (must not be null).</param>
            <param name="startIndex">Start index in the array. Items between the specified start index and end index will be sorted. Other items will be left as they are.</param>
            <param name="endIndex">End index in the array. Items between the specified start index and end index will be sorted. Other items will be left as they are.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMergeGeneric``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. It requires allocation of an array equal in size to the array to be sorted.
            Merge sort should be used if the operation of comparing items is expensive.
            </summary>
            <param name="array">The array to be sorted</param>
            <param name="comparer">The comparer to use for the sort</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMergeGeneric``1(``0[],``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to <paramref name="array"/>.</param>
            <param name="comparer">Comparer.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.SortMergeGeneric``1(``0[],``0[],System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="array">Array to be sorted.</param>
            <param name="tempArray">Null or a temporary array equal (or greater) in size to <paramref name="array"/>.</param>
            <param name="comparer">Comparer.</param>
            <param name="startIndex">Start index in the array.</param>
            <param name="endIndex">End index in the array.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps values in a list at specified indexes.
            </summary>
            <typeparam name="T">Type of elements in the list.</typeparam>
            <param name="arr">The list to modify</param>
            <param name="x">Index location 1</param>
            <param name="y">Index location 2</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.Swap``1(``0@,``0@)">
            <summary>
            Swaps the values of the specified 
            </summary>
            <typeparam name="T">The type of variable to be swapped</typeparam>
            <param name="value1">The member to be updated with the value of <paramref name="value2"/></param>
            <param name="value2">The member to be updated with the value of <paramref name="value1"/></param>
        </member>
        <member name="M:Infragistics.CoreUtilities.Traverse(System.Collections.IEnumerable)">
            <summary>
            Traverses the enumerator. This may be used to force allocation of lazily allocated list items.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Infragistics.CoreUtilities.ConverterComparer`2">
            <summary>
            A comparer that compares converted values.
            </summary>
            <typeparam name="T">Type of objects being sorted.</typeparam>
            <typeparam name="Z">The type of the value of the object that will be compared.</typeparam>
        </member>
        <member name="M:Infragistics.CoreUtilities.ConverterComparer`2.#ctor(System.Converter{`0,`1},System.Comparison{`1})">
            <summary>
            Constructor.
            </summary>
            <param name="converter">Converter used to convert <i>T</i> instances to <i>Z</i> values for comparison.</param>
            <param name="comparison">Comparison delegate for comparing converted <i>Z</i> values.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.ConverterComparer`2.#ctor(System.Converter{`0,`1},System.Collections.Generic.IComparer{`1})">
            <summary>
            Constructor.
            </summary>
            <param name="converter">Converter used to convert <i>T</i> instances to <i>Z</i> values for comparison.</param>
            <param name="comparer">Comparer for comparing converted <i>Z</i> values.</param>
        </member>
        <member name="M:Infragistics.CoreUtilities.ConverterComparer`2.Compare(`0,`0)">
            <summary>
            Compares the two items.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.CoreUtilities.TypedList`1">
            <summary>
            IList&lt;T&gt; implementation that wraps an IList
            </summary>
            <typeparam name="T">Type of the items in the collection</typeparam>
        </member>
        <member name="T:Infragistics.CoreUtilities.ObservableTypedList`1">
            <summary>
            IList&lt;T&gt; implementation that wraps an IList and supports propogating the collection and property changes from the source collection.
            </summary>
            <typeparam name="T">Type of the items in the collection</typeparam>
        </member>
        <member name="T:Infragistics.CoreUtilities.AntirecursionUtility">
            <summary>
            Used instead of anti-recursion flag to prevent an action from being taken recursively.
            </summary>
        </member>
        <member name="T:Infragistics.DependencyObjectNotifier">
            <summary>
            Abstract base class for objects that implement INotifyPropertyChanged and derive from DependencyObject
            </summary>
        </member>
        <member name="M:Infragistics.DependencyObjectNotifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DependencyObjectNotifier"/> class
            </summary>
        </member>
        <member name="M:Infragistics.DependencyObjectNotifier.OnPropertyChanged(System.String)">
            <summary>
            Used to raise the <see cref="E:Infragistics.DependencyObjectNotifier.PropertyChanged"/> event for the specified property name.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Infragistics.DependencyObjectNotifier.RaisePropertyChangedEvent(System.String)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property</param>
        </member>
        <member name="E:Infragistics.DependencyObjectNotifier.PropertyChanged">
            <summary>
            Raised when a property has changed
            </summary>
        </member>
        <member name="M:Infragistics.DependencyPropertyUtilities.GetDefaultValue(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Gets the default value for the specified property for the specified object.
            </summary>
            <param name="d">Dependency object whose property value is to be evaluated</param>
            <param name="dp">Property to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DependencyPropertyUtilities.GetDefaultValue(System.Type,System.Windows.DependencyProperty)">
            <summary>
            Gets the default value for the specified property for the specified type.
            </summary>
            <param name="type">the type whose property value is to be evaluated</param>
            <param name="dp">Property to evaluate</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DependencyPropertyUtilities.GetName(System.Windows.DependencyProperty)">
            <summary>
            Returns the Name of the DependencyProperty. The property should have been registered using one of the Register methods of this class.
            </summary>
        </member>
        <member name="M:Infragistics.DependencyPropertyUtilities.GetName(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Returns the name of the or caches it if it is able to find the public static field returning the DependencyProperty
            </summary>
        </member>
        <member name="M:Infragistics.DependencyPropertyUtilities.ShouldSerialize(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            A helper method for figuring out whether a property needs to be serialized.
            </summary>
            <param name="d">Dependency object whose property value is to be evaluated</param>
            <param name="dp">Property to evaluate</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.DependencyPropertyUtilities.DependencyObjectCallbackWrapper">
            <summary>
            Helper class for working around some Silverlight rooting issues.
            </summary>
        </member>
        <member name="T:Infragistics.ValueHolder">
            <summary>
            Simple dependency object with a single Value dependency property
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Primitives.EmbeddedTextBox">
            <summary>
            A custom textbox that is embedded within another element and does not provide its own chrome or any state based visual changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.EmbeddedTextBox.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Primitives.EmbeddedTextBox"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.EmbeddedTextBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when a key is pressed down while the <see cref="T:Infragistics.Controls.Primitives.EmbeddedTextBox"/> has focus.
            </summary>
            <param name="e">Provides data for the event</param>
        </member>
        <member name="F:Infragistics.Controls.Primitives.EmbeddedTextBox.IsUndoEnabledProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Primitives.EmbeddedTextBox.IsUndoEnabled"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.EmbeddedTextBox.IsUndoEnabled">
            <summary>
            Gets or sets the value which indicates whether the text box support undo and redo operations.
            </summary>
            <seealso cref="F:Infragistics.Controls.Primitives.EmbeddedTextBox.IsUndoEnabledProperty"/>
        </member>
        <member name="T:Infragistics.Controls.Primitives.FixedValueConverter">
            <summary>
            Custom value converter that returns the <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.DestinationValue"/> if the <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.SourceValue"/> matches the value provided
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.FixedValueConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Primitives.FixedValueConverter"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.FixedValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.DestinationValue"/> value if the <paramref name="value"/> equals the <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.SourceValue"/>
            </summary>
            <param name="value">The value to compare to the <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.SourceValue"/></param>
            <param name="targetType">The type of the target property</param>
            <param name="parameter">The parameter to use for the conversion. This parameter is not used.</param>
            <param name="culture">The culture to use for the conversion. This parameter is not used.</param>
            <returns>The <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.DestinationValue"/> or DependencyProperty.UnsetValue if the <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.SourceValue"/> doesn't match the <paramref name="value"/></returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.FixedValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.SourceValue"/> if the <paramref name="value"/> equals the <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.DestinationValue"/>
            </summary>
            <param name="value">The value to compare to the <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.DestinationValue"/></param>
            <param name="targetType">The type of the target property</param>
            <param name="parameter">The parameter to use for the conversion. This parameter is not used.</param>
            <param name="culture">The culture to use for the conversion. This parameter is not used.</param>
            <returns>The <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.SourceValue"/> or DependencyProperty.UnsetValue if the <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.DestinationValue"/> doesn't match the <paramref name="value"/></returns>
        </member>
        <member name="P:Infragistics.Controls.Primitives.FixedValueConverter.SourceValue">
            <summary>
            The value that is compared against the value provided to the Convert method and also the value potentially returned from the ConvertBack.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> If this value is not set the <see cref="P:Infragistics.Controls.Primitives.FixedValueConverter.DestinationValue"/> is always returned from the convert method.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Primitives.FixedValueConverter.DestinationValue">
            <summary>
            The value returned from the Convert if the SourceValue matches and the value compared against the value in the ConvertBack.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint">
            <summary>
            Interface for providing constraints to the grid-bag layout manager.
            </summary>
            <remarks>
            <b>IGridBagConstraint</b> interface is used to provide constraints of an item to the
            <see cref="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager"/>. <see cref="T:Infragistics.Controls.Layouts.Primitives.GridBagConstraint"/> class implements
            this interface so typically there is no need for you to implement this interface as
            you can use the <i>GridBagConstraint</i> objects directly to provide item constraints
            to the grid-bag layout manager.
            </remarks>
            <seealso cref="T:Infragistics.Controls.Layouts.Primitives.GridBagConstraint"/>
            <seealso cref="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.Column">
            <summary>
            <p>Column and Row define where the layout item will be placed in the virtual grid of the grid-bag layout. Column specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The leftmost cell has Column of 0. The constant <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Relative"/> specifies that the item be placed just to the right of the item that was added to the layout manager just before this item was added. </p>
            <p>The default value is <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Relative"/>. Column should be a non-negative value.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.Row"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.ColumnSpan">
            <summary>
            <p>Specifies the number of cells this item will span horizontally. The constant <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Remainder"/> specifies that this item be the last one in the row and thus occupy remaining space.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.RowSpan"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.ColumnWeight">
            <summary>
            Indicates how the extra horizontal space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum ColumnWeight of all the items in the row.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.HorizontalAlignment">
            <summary>
            Horizontal alignment of the item within its logical cell.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.Margin">
            <summary>
            Indicates the padding around the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.Row">
            <summary>
            <p>Column and Row define where the layout item will be placed in the virtual grid of the grid-bag layout. Column specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The topmost cell has Row of 0. The constant <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Relative"/> specifies that the item be placed just below the item that was added to the layout manager just before this item was added.</p>
            <p>The default value is <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Relative"/>. Row should be a non-negative value.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.Column"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.RowSpan">
            <summary>
            <p>Specifies the number of cells this item will span vertically. The constant <see cref="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Remainder"/> specifies that this item be the last one in the column and thus occupy remaining space.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.ColumnSpan"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.RowWeight">
            <summary>
            Indicates how the extra vertical space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum RowWeight of all the items in the column.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IGridBagConstraint.VerticalAlignment">
            <summary>
            Horizontal alignment of the item within its logical row.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants">
            <summary>
            Defines constants used by grid-bag constraint object.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Relative">
            <summary>
            This constant can be assigned to Column and Row to indicate that the cell be positioned relative to the last cell.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagConstraintConstants.Remainder">
            <summary>
            This constant can be assigned to ColumnSpan and RowSpan to indicate that the cell occupy the rest of the row or the column respectively.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagConstraint">
            <summary>
            Class for providing constraint objects to the grid-bag layout manager.
            </summary>
        </member>
        <member name="T:Infragistics.PropertyChangeNotifier">
            <summary>
            Abstract base class for objects that implement INotifyPropertyChanged
            </summary>
        </member>
        <member name="M:Infragistics.PropertyChangeNotifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.PropertyChangeNotifier"/> class
            </summary>
        </member>
        <member name="M:Infragistics.PropertyChangeNotifier.OnFirstListenerAdding">
            <summary>
            Virtual method called when the first listener is being added to the <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> event.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> the default inpmplementation does nothing. This method is intended
            for use by derived classes that may want to be notified when the # of listeners to the 
            <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> event transitions from 0 to 1.
            </para>
            </remarks>
            <seealso cref="P:Infragistics.PropertyChangeNotifier.HasListeners"/>
            <seealso cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/>
            <seealso cref="M:Infragistics.PropertyChangeNotifier.OnHasListenersChanged"/>
        </member>
        <member name="M:Infragistics.PropertyChangeNotifier.OnHasListenersChanged">
            <summary>
            Virtual method called when the HasListeners property changes.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> the default inpmplementation does nothing. This method is intended
            for use by derived classes that may want to be notified when the # of listeners to the <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> 
            event transitions from 0 to 1 or 1 to 0;
            </para></remarks>
            <seealso cref="P:Infragistics.PropertyChangeNotifier.HasListeners"/>
            <seealso cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/>
            <seealso cref="M:Infragistics.PropertyChangeNotifier.OnFirstListenerAdding"/>
        </member>
        <member name="M:Infragistics.PropertyChangeNotifier.OnPropertyChanged(System.String)">
            <summary>
            Used to raise the <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> event for the specified property name.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Infragistics.PropertyChangeNotifier.RaisePropertyChangedEvent(System.String)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">The name of the property</param>
        </member>
        <member name="P:Infragistics.PropertyChangeNotifier.HasListeners">
            <summary>
            Gets whether there are any listeners for the <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> event
            </summary>
            <value>True is there are listeners to the <see cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/> event, otherwise false.</value>
            <seealso cref="M:Infragistics.PropertyChangeNotifier.OnHasListenersChanged"/>
            <seealso cref="E:Infragistics.PropertyChangeNotifier.PropertyChanged"/>
            <seealso cref="M:Infragistics.PropertyChangeNotifier.OnFirstListenerAdding"/>
        </member>
        <member name="E:Infragistics.PropertyChangeNotifier.PropertyChanged">
            <summary>
            Raised when a property has changed
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="column">Where the layout item will be placed horizontally in the virtual grid of the grid-bag layout.</param>
            <param name="row">Where the layout item will be placed horizontally in the virtual grid of the grid-bag layout.</param>
            <param name="columnSpan">Specifies the number of cells this item will span horizontally.</param>
            <param name="rowSpan">Specifies the number of cells this item will span vertically.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A copy of the current instance.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetColumn">
            <summary>
            Resets the Column property to its default value of GridBagConstraintConstants.Relative.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetColumnSpan">
            <summary>
            Resets the ColumnSpan property to its default value of 1.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetColumnWeight">
            <summary>
            Resets the ColumnWeight property to its default value of 0.0.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetHorizontalAlignment">
            <summary>
            Resets the HorizontalAlignment property to its default value of Center.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetMargin">
            <summary>
            Resets the Margin property to its default value which is Thickness of left, top, right, bottom being 0.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetRow">
            <summary>
            Resets the Row property to its default value of GridBagConstraintConstants.Relative.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetRowSpan">
            <summary>
            Resets the RowSpan property to its default value of 1.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetRowWeight">
            <summary>
            Resets the RowWeight property to its default value of 0.0.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ResetVerticalAlignment">
            <summary>
            Resets the VerticalAlignment property to its default value of Center.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Reset">
            <summary>
            Resets the properties of this object to their default values.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerialize">
            <summary>
            Returns true is any of the properties have been set to non-default values
            </summary>
            <returns>True if any properties have been set to non-default values.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ToString">
            <summary>
            Returns a string representation of the object
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeColumn">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeColumnSpan">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeColumnWeight">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeHorizontalAlignment">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeMargin">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeRow">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeRowSpan">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeRowWeight">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ShouldSerializeVerticalAlignment">
            <summary>
            Returns true if the property is set to a non-default value.
            </summary>
            <returns>True if the property is set to a non-default value.</returns>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.HorizontalAlignment">
            <summary>
            Horizontal alignment of the item within its logical cell.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Column">
            <summary>
            <p>Column and Row define where the layout item will be placed in the virtual grid of the grid-bag layout. Column specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The leftmost cell has Column of 0. The constant <b>Relative</b> specifies that the item be placed just to the right of the item that was added to the layout manager just before this item was added. </p>
            <p>The default value is <b>Relative</b>. Column should be a non-negative value.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Row"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ColumnSpan">
            <summary>
            <p>Specifies the number of cells this item will span horizontally. The constant <b>Remainder</b> specifies that this item be the last one in the row and thus occupy remaining space.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.RowSpan"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ColumnWeight">
            <summary>
            Indicates how the extra horizontal space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum ColumnWeight of all the items in the row.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Margin">
            <summary>
            Indicates the padding around the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Row">
            <summary>
            <p>Column and Row define where the layout item will be placed in the virtual grid of the grid-bag layout. Column specifies the location horizontally while specifies the location vertically. These locations are the coordinates of the cells in the virtual grid that the grid-bag layout represents.</p>
            <p>The topmost cell has Row of 0. The constant <b>Relative</b> specifies that the item be placed just below the item that was added to the layout manager just before this item was added.</p>
            <p>The default value is <b>Relative</b>. Row should be a non-negative value.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.Column"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.RowSpan">
            <summary>
            <p>Specifies the number of cells this item will span vertically. The constant <b>Remainder</b> specifies that this item be the last one in the column and thus occupy remaining space.</p>
            </summary>
            <seealso cref="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.ColumnSpan"/>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.RowWeight">
            <summary>
            Indicates how the extra vertical space will be distributed among items. Default value is 0.0. Higher values give higher priority. The weight of the column in the virtual grid the grid-bag layout represents is the maximum RowWeight of all the items in the column.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagConstraint.VerticalAlignment">
            <summary>
            Vertical alignment of the item within its logical cell.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions">
            <summary>
            For internal use. A class that contains dimensions of a layout item. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.Bounds">
            <summary>
            Item bounds relative to the container's bounds.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.Column">
            <summary>
            Returns the Column of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.ColumnRight">
            <summary>
            Returns Column + ColumnSpan.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.ColumnSpan">
            <summary>
            Returns the ColumnSpan of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.Row">
            <summary>
            Returns the Row of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.RowBottom">
            <summary>
            Returns the Row + RowSpan.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.RowSpan">
            <summary>
            Retruns the RowSpan of the item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensions.Size">
            <summary>
            Size of the item bounds.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection">
            <summary>
            For internal use. A class that contains GridBagLayoutItemDimensions instances each of which 
            associated with a ILayoutItem.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.Exists(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            For Internal use. Returns true if the collection contains an entry for the passed in layout item.
            </summary>
            <param name="key">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to check for.</param>
            <returns>True if the collection contains an entry for the specified key.</returns>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.ColumnDims">
            <summary>
            For Internal use. Column coordinates relative to left of the container rect. These can be modified freely without effecting the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.MaximumSize">
            <summary>
            Maximum size of the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.MinimumSize">
            <summary>
            Minimum size of the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.PreferredSize">
            <summary>
            Preferred size of the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.RowDims">
            <summary>
            For Internal use. Row coordinates relative to top of the container rect. These can be modified freely without effecting the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutItemDimensionsCollection.Item(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            For Internal use. Indexer. Returns an instance GridBagLayoutItemDimensions associated with passed in layout item.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager">
            <summary>
            GridBagLayoutManager class.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase">
            <summary>
            Base class for others to implement their own layout managers.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.GetContainerBoundsHelper(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,Infragistics.Controls.Layouts.Primitives.LayoutManagerBase)">
            <summary>
            If the container rect's width or height is NaN or infinity then it will use the preferred width or height for it.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
            <param name="lm"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.OnLayoutChanged">
            <summary>
            This method is called whenever a layout item is added, removed or the layout is cleared. Implementation of this method calls InvalidateLayout to invalidate any cached information.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.ValidateConstraintObject(System.Object)">
            <summary>
            Implementation should throw an exception if the passed in constraint is not a valid
            constraint for this layout manager. It usually checks the type.
            </summary>
            <param name="constraint">The constraint to check.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.CalculateMaximumSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the maximum size required to layout the items at their maximum sizes.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the minimum size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.CalculateMinimumSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the minimum size required to layout the items.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the minimum size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.CalculatePreferredSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the preferred size required to layout the items.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the preferred size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.InvalidateLayout">
            <summary>
            Invalidates any cached information so the layout manager recalculates everything next.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.LayoutContainer(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Lays out items contained in this layout manager by calling PositionItem off the
            passed in container for each item.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase.LayoutItems">
            <summary>
            Layout items collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.CalculateMaximumSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the minimum size required to layout the items.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the minimum size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.CalculateMinimumSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the minimum size required to layout the items.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the minimum size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.CalculatePreferredSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Calculates the preferred size required to layout the items.
            </summary>
            <param name="container">Object that implements the ILayoutContainer to provide bounds information</param>
            <param name="containerContext">Context used in calls to the <paramref name="container"/></param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the preferred size required to layout the items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.InvalidateLayout">
            <summary>
            Invalidates any cached information so the layout manager recalculates everything next time.
            </summary>
            <remarks>
            <p>Gridbag layout manager caches layout information which needs to be invalidated any time a change is made that would effect how the items are laid out.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.LayoutContainer(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            Lays out items contained in this layout manager by calling PositionItem off the
            passed in container for each item.
            </summary>
            <param name="container"></param>
            <param name="containerContext"></param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.LayoutContainer(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,System.Windows.Rect@)">
            <summary>
            Lays out items contained in this layout manager by calling PositionItem off the
            passed in container for each item.
            </summary>
            <param name="container">Layout container.</param>
            <param name="containerContext">Layout container context.</param>
            <param name="layoutRect">This out parameter will be set to the rect in which items were laid out which
            can be different from layout container's rect in case of min size constraints.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ValidateConstraintObject(System.Object)">
            <summary>
            Implementation should throw an exception if the passed in constraint is not a valid
            constraint for this layout manager. It usually checks the type.
            </summary>
            <param name="constraint">The constraint to validate.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.CalculateAutoLayout(System.Collections.Generic.IEnumerator{Infragistics.Controls.Layouts.Primitives.ILayoutItem},System.Windows.Controls.Orientation,System.Boolean,System.Windows.Size,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Windows.Controls.Orientation})">
            <summary>
            Calculates the row/column values for the specified items to fill the layout area.
            </summary>
            <param name="items">Items to auto-layout.</param>
            <param name="layoutOrientation">Direction in which to layout items.</param>
            <param name="autoFitAllItems">If true all items will be auto-fitted within the layout area.</param>
            <param name="constraint">Layout are size.</param>
            <param name="minRows">Minimum number of logical rows of items.</param>
            <param name="minColumns">Minimum number of logical columns of items.</param>
            <param name="maxRows">Maximum number of logical rows of items.</param>
            <param name="maxColumns">Maximum number of logical columns of items.</param>
            <param name="constraintedOrientation">
            If specified non-null, then items will be laid in such a way that they will be not be allowed 
            to go beyond the edge of the container in the constrained orientation (unless other constraints 
            force otherwise). If null then items will not be constrained in either orientation.</param>
            <returns>Calculated layout information in the form of a GridBagLayoutItemDimensionsCollection instance.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GetLayoutItemDimensions(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object)">
            <summary>
            For internal use. Returns dimensions of layout items. It contains entries for only the visible items.
            </summary>
            <param name="containerContext">The context used in calls to the <paramref name="container"/>.</param>
            <param name="container">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutContainer"/> from which layout information should be determined.</param>
            <returns>The dimensions of layout items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GetResizeRange(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the resize range of an item.
            </summary>
            <param name="layoutContainer">Layout container. Used for getting the layout area rect, which 
            is used when auto-fitting the layout in in an area that's different than the preferred size of the layout.
            </param>
            <param name="containerContext">Not used by the layout manager directly. It gets passed along to
            methods on the layout container.</param>
            <param name="resizeItem">Item being resized.</param>
            <param name="maxDeltaLeft">This will be set to how much smaller the item can be resized left of its right edge.</param>
            <param name="maxDeltaRight">This will be set to how much larger the item can be resized right of its right edge.</param>
            <param name="maxDeltaTop">This will be set to how much smaller the item can be resized above its bottom edge.</param>
            <param name="maxDeltaBottom">This will be set to how much larger the item can be resized below its bottom edge.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GetResizeRange(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean,System.Boolean,System.Collections.Generic.IList{Infragistics.Controls.Layouts.Primitives.ILayoutItem})">
            <summary>
            Gets the resize range of an item.
            </summary>
            <param name="layoutContainer">Layout container. Used for getting the layout area rect, which 
            is used when auto-fitting the layout in in an area that's different than the preferred size of the layout.
            </param>
            <param name="containerContext">Not used by the layout manager directly. It gets passed along to
            methods on the layout container.</param>
            <param name="resizeItem">Item being resized.</param>
            <param name="maxDeltaLeft">This will be set to how much smaller the item can be resized left of its right edge.</param>
            <param name="maxDeltaRight">This will be set to how much larger the item can be resized right of its right edge.</param>
            <param name="maxDeltaTop">This will be set to how much smaller the item can be resized above its bottom edge.</param>
            <param name="maxDeltaBottom">This will be set to how much larger the item can be resized below its bottom edge.</param>
            <param name="autoFitWidth">Specifies whether items will be autofitted horizontally within the 
            layout container rect. Items will be resized in such a way that the width of the preferred size
            of the resultant layout will be equal container rect's width.</param>
            <param name="autoFitHeight">Specifies whether items will be autofitted vertically within the 
            layout container rect. Items will be resized in such a way that the height of the preferred size
            of the resultant layout will be equal container rect's height.</param>
            <param name="synchronizedItems">A list of items whose size will be synchronized during the resize operation with the specified <paramref name="resizeItem"/> or null/empty list if there are no items to be synchronized with the resize item.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.PerformAutoSize(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Windows.Size},System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Boolean}@,System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Boolean}@)">
            <summary>
            Resizes the specified layout items to the specified preferred sizes.
            </summary>
            <param name="layoutContainer">Object used to determine the layout area rect, which is used when 
            auto-fitting the layout in in an area that's different than the preferred size of the layout.</param>
            <param name="containerContext">Not used by the layout manager directly. It gets passed along to
            methods on the layout container.</param>
            <param name="preferredSizes">A dictionary of the items to be resized and the preferred sizes to which they would like to be sized.</param>
            <param name="autoFitWidth">Specifies whether items will be autofitted horizontally within the 
            layout container rect. Items will be resized in such a way that the width of the preferred size
            of the resultant layout will be equal container rect's width.</param>
            <param name="autoFitHeight">Specifies whether items will be autofitted vertically within the 
            layout container rect. Items will be resized in such a way that the height of the preferred size
            of the resultant layout will be equal container rect's height.</param>
            <param name="newIsWidthAutoState">When an item is resized, items aligned with the resize item need to change
            their is-auto state to false. This parameter will be assigned a list of items whose is-auto state needs to
            change to false.</param>
            <param name="newIsHeightAutoState">Same as newIsWidthAutoState except for heights.</param>
            <returns>Returns the new preferred sizes of one or more items that will result in the preferred sizes of the specified layout items.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeItem(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Resizes the specified layout item by specified deltaWidth and deltaHeight. Returns the new
            calculated preferred sizes of one or more items that will result in the resize item's target size.
            </summary>
            <param name="layoutContainer">Layout container. Used for getting the layout area rect, which 
            is used when auto-fitting the layout in in an area that's different than the preferred size of the layout.
            </param>
            <param name="containerContext">Not used by the layout manager directly. It gets passed along to
            methods on the layout container.</param>
            <param name="resizeItem">Item being resized.</param>
            <param name="deltaWidth">Change in the width of the item. Can be 0 to indicate no change.</param>
            <param name="deltaHeight">Change in the height of the item. Can be 0 to indicate no change.</param>
            <param name="autoFitWidth">Specifies whether items will be autofitted horizontally within the 
            layout container rect. Items will be resized in such a way that the width of the preferred size
            of the resultant layout will be equal container rect's width.</param>
            <param name="autoFitHeight">Specifies whether items will be autofitted vertically within the 
            layout container rect. Items will be resized in such a way that the height of the preferred size
            of the resultant layout will be equal container rect's height.</param>
            <returns>Returns the new preferred sizes of one or more items that will result in the target size
            of the resize item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeItem(Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Double,System.Double,System.Boolean,System.Boolean,System.Collections.Generic.IList{Infragistics.Controls.Layouts.Primitives.ILayoutItem},System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Boolean}@,System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Boolean}@)">
            <summary>
            Resizes the specified layout item by specified deltaWidth and deltaHeight. Returns the new
            calculated preferred sizes of one or more items that will result in the resize item's target size.
            </summary>
            <param name="layoutContainer">Layout container. Used for getting the layout area rect, which 
            is used when auto-fitting the layout in in an area that's different than the preferred size of the layout.
            </param>
            <param name="containerContext">Not used by the layout manager directly. It gets passed along to
            methods on the layout container.</param>
            <param name="resizeItem">Item being resized.</param>
            <param name="deltaWidth">Change in the width of the item. Can be 0 to indicate no change.</param>
            <param name="deltaHeight">Change in the height of the item. Can be 0 to indicate no change.</param>
            <param name="autoFitWidth">Specifies whether items will be autofitted horizontally within the 
            layout container rect. Items will be resized in such a way that the width of the preferred size
            of the resultant layout will be equal container rect's width.</param>
            <param name="autoFitHeight">Specifies whether items will be autofitted vertically within the 
            layout container rect. Items will be resized in such a way that the height of the preferred size
            of the resultant layout will be equal container rect's height.</param>
            <param name="synchronizedItems">A list of items whose size will be synchronized during the resize operation with the specified <paramref name="resizeItem"/></param>
            <param name="newIsWidthAutoState">When an item is resized, items aligned with the resize item need to change
            their is-auto state to false. This parameter will be assigned a list of items whose is-auto state needs to
            change to false.</param>
            <param name="newIsHeightAutoState">Same as newIsWidthAutoState except for heights.</param>
            <returns>Returns the new preferred sizes of one or more items that will result in the target size
            of the resize item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ConvertToCoordinates(System.Double[])">
            <summary>
            Given an array that represents extents, it converts it to coordinates. The last item
            in the given array should be empty because coordinates require one more item than
            the extents.
            </summary>
            <param name="arr">Array of extents. This array will be modified to be coordinates where
            0th item in the modified array will be 0.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GetContentOffset(System.Windows.Rect,System.Double@,System.Double@,System.Double[],System.Double[])">
            <summary>
            Calculates the offset of contents into the container rect if the container is larger
            than the necessary space.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GetTotalSize(System.Double[],System.Double[])">
            <summary>
            Calculates the total size.
            </summary>
            <param name="widths">Sum of these values will determine the width of the returned size.</param>
            <param name="heights">Sum of these values will determine the height of the returned size.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.NormalizeRatios(System.Double[])">
            <summary>
            Normalizes ratios so they sum up to 1 by proportionally adjusting each value in the array.
            </summary>
            <param name="ratios"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ColumnWeights">
            <summary>
            Returns the column weights of the gridbag layout. You can change them however they get recalculated 
            once the layout is invalidated. Layout also gets invalidated whenever a layout item is added or removed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ColumnWidths">
            <summary>
            Returns the preferred column widths of the gridbag layout. You can change them however they get recalculated 
            once the layout is invalidated. Layout also gets invalidated whenever a layout item is added or removed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ExpandToFitHeight">
            <summary>
            Indicates whether to proportionally expand or shrink the heights of all the items to fit 
            the layout rect. This would only get applied if all the items had 0.0 rowWeight's.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ExpandToFitWidth">
            <summary>
            Indicates whether to proportionally expand or shrink the widths of all the items to fit 
            the layout rect. This would only get applied if all the items had 0.0 columnWeight's.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ShrinkToFitHeight">
            <summary>
            Indicates whether to shrink or not shrink the items' heights to fit the available layout area.
            Overrides the behavior of <see cref="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ExpandToFitHeight"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ShrinkToFitWidth">
            <summary>
            Indicates whether to shrink or not shrink the items' widths to fit the available layout area.
            Overrides the behavior of <see cref="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ExpandToFitWidth"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.HorizontalContentAlignment">
            <summary>
            Specifies where the contents are to be positioned horizontally if there is extra width available.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.VerticalContentAlignment">
            <summary>
            Specifies where the contents are to be positioned vertically if there is extra height available.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.IncludeMarginInPositionRect">
            <summary>
            Indicates whether to include layout item margins in the rect that's specified in when the layout
            item is positioned via PositionItem call on the container. This mirrors the fact that UIElement's 
            Arrange call takes a rect that includes the element's margins.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.InterItemSpacingHorizontal">
            <summary>
            Specifies the horizontal spacing between each item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.InterItemSpacingVertical">
            <summary>
            Specifies the vertical spacing between each item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.LayoutMode">
            <summary>
            Internal property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.PreferredSizeIncludesMargin">
            <summary>
            Indicates that the preferred size provided by layout items include their margins. This mirrors
            DesiredSize of UIElement which includes its margins. However note that MinimumSize and MaximumSize
            do not include the margins, just like the UIElement.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.RowHeights">
            <summary>
            Returns the preferred row heights of the gridbag layout. You can change them however they get recalculated 
            once the layout is invalidated. Layout also gets invalidated whenever a layout item is added or removed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.RowWeights">
            <summary>
            Returns the row weights of the gridbag layout. You can change them however they get recalculated 
            once the layout is invalidated. Layout also gets invalidated whenever a layout item is added or removed.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc">
            <summary>
            Used for calculating an auto-layout.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.#ctor(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager,System.Windows.Controls.Orientation,System.Boolean,System.Windows.Size,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{System.Windows.Controls.Orientation})">
            <summary>
            Constuctor
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.GetGCC(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Gets the cached gcc for the specified item. If none has been cached then 
            creates a new gcc and caches it.
            </summary>
            <param name="item">Layout item.</param>
            <returns>Gcc for specified item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.GetLayoutItemDimensionsHelper">
            <summary>
            Returns calculated GridBagLayoutItemDimensionsCollection based on the _lines collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.ILayoutContainer">
            <summary>
            ILayoutContainer interface.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.ILayoutContainer.GetBounds(System.Object)">
            <summary>
            Returns the container bounds.
            </summary>        
            <param name="containerContext">Context used in calls to the container.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.ILayoutContainer.PositionItem(Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Windows.Rect,System.Object)">
            <summary>
            Called by the layout manager to position a layout item.
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to position.</param>
            <param name="rect">The <see cref="T:System.Windows.Rect"/> of the item.</param>
            <param name="containerContext">Context used in calls to the container.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.Line.#ctor(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.Line.CalcExtentY(System.Boolean,System.Double@)">
            <summary>
            Calculates the extent in y direction - height if orientation is 
            horizontal, width if the orientation is vertical.
            </summary>
            <param name="isFirstLine">Whether this is the first line.</param>
            <param name="minExtentY">Min extent y will be stored in this out param.</param>
            <returns>Extent in y direction of the line.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.AutoLayoutCalc.Line.FitItem(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GridBagConstraintCache)">
            <summary>
            Tries to fit the specified item in the line and if it can't then returns false.
            </summary>
            <param name="gcc">Item to fit.</param>
            <returns>If the item fits the remaining space in the line then returns true. Returns false otherwise.</returns>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager._infos">
            <summary>
            Array of LayoutItemInfo where each LayoutItemInfo wraps the original item 
            and caches various information about it.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager._glc">
            <summary>
            Gridbag layout cache.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager._mappings">
            <summary>
            Mapping of original layout items to LayoutItemInfo objects that wrap those layout items.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager._itemsEndingAtCache">
            <summary>
            Used to cache the items that end at a specific logical column or row.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager._isAutoSizing">
            <summary>
            Indicates that the resizing operation for which this manager instance is created is for auto-sizing.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.#ctor(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager,Infragistics.Controls.Layouts.Primitives.ILayoutContainer,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="layoutManager">Layout manager.</param>
            <param name="layoutContainer">Layout container.</param>
            <param name="containerContext">Layout container context.</param>
            <param name="autoFitWidth">Specifies whether items will be autofitted horizontally within the 
            layout container rect. Items will be resized in such a way that the width of the preferred size
            of the resultant layout will be equal container rect's width.</param>
            <param name="autoFitHeight">Specifies whether items will be autofitted vertically within the 
            layout container rect. Items will be resized in such a way that the height of the preferred size
            of the resultant layout will be equal container rect's height.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.ResizeItems(System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Windows.Size})">
            <summary>
            Resizes the items to their new sizes.
            </summary>
            <param name="newSizes">Specifies the items to resize and their new sizes.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.GetItemsEndingAt(System.Int32,System.Boolean)">
            <summary>
            Gets the items that end at the specified edge (logical column or row depending 
            on the yDimension parameter).
            </summary>
            <param name="edge">If yDimension is true then logical column, otherwise logical row.</param>
            <param name="yDimension">If yDimension is true then edge parameter designates logical column, otherwise it designates logical row.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.GetResizeItemInfosHelper(Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Collections.Generic.IList{Infragistics.Controls.Layouts.Primitives.ILayoutItem},Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[]@)">
            <summary>
            A helper method that takes in a resizeItem and synchronizedItems and returns an array of
            LayoutItemInfo objects associated with resizeItem and synchronizedItems combined, making
            sure not duplicating the item.
            </summary>
            <param name="resizeItem"></param>
            <param name="synchronizedItems"></param>
            <param name="itemInfos"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.GetResizeRangeHelper_AdjustDeltaHelper(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[],System.Double,System.Boolean)">
            <summary>
            Used when auto-fitting, items can't necessarily be resized to their fullest max or min sizes 
            because the auto-fitting process can potentially constraint the items. This method adjusts
            the delta which are based on the min/max values to a new delta value that takes into account
            this implicit constraint forced by the auto-fitting.
            </summary>
            <param name="resizeItems"></param>
            <param name="delta"></param>
            <param name="yDimension"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.GetResizeResultsHelper(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[],System.Double,System.Boolean,System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo,System.Windows.Size})">
            <summary>
            Calculates the new sizes of the resize items if they were to be resized by the specified delta.
            </summary>
            <param name="resizeItems"></param>
            <param name="delta"></param>
            <param name="yDimension"></param>
            <param name="restorePreferredSizes"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.IsExtentDifferent(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[],System.Windows.Size[],System.Boolean)">
            <summary>
            Returns true if the new extent is different than the old extent for any of the resize items.
            </summary>
            <param name="resizeItems"></param>
            <param name="newSizes"></param>
            <param name="yDimension"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.ReCalculateLayout(System.Boolean)">
            <summary>
            This method is used to re-calculate the layout after changing preferred sizes of 
            one or more items. It updates the cached values as well.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.ResizeItemsHelper(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[],System.Windows.Size[],System.Boolean)">
            <summary>
            Resizes the specified items to their new sizes in either horizontal or vertical dimension
            depending upon the yDimension parameter.
            </summary>
            <param name="resizeItems"></param>
            <param name="newSizes"></param>
            <param name="yDimension"></param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.SetPreferredSizes(System.Collections.Generic.Dictionary{Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo,System.Windows.Size})">
            <summary>
            Sets the _preferredSize on the layout items.
            </summary>
            <param name="sizesToSet"></param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.SortResizeItemsHelper(Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo[],System.Windows.Size[],System.Boolean)">
            <summary>
            Sorts the specified resize items and the new sizes so the items are in the order
            of lowest ColumnRight value to highest ColumnRight value.
            </summary>
            <param name="resizeItems"></param>
            <param name="newSizes"></param>
            <param name="yWise"></param>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo">
            <summary>
            This layout item wraps an item from the actual layout manager.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.IAutoSizeLayoutItem">
            <summary>
            Used by the grid-bag layout manager to ensure that auto-sized items are not resized smaller 
            than their preferred sizes when shrinking all the items to auto-fit in the available extent.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem">
            <summary>
            Interface for implementing layout items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.ILayoutItem.Visibility">
            <summary>
            Indicates the visibility state of the item. Items that are collapsed are ignored.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.ILayoutItem.MaximumSize">
            <summary>
            Gets the maximum size of the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.ILayoutItem.MinimumSize">
            <summary>
            Gets the minimum size of the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.ILayoutItem.PreferredSize">
            <summary>
            Gets the preferred size of the layout item.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IAutoSizeLayoutItem.IsWidthAutoSized">
            <summary>
            Returns true to indicate that the width is auto-sized and thus the item should not be 
            resized smaller than its preferred width when proportionally shrinking all the items to
            auto-fit in the available space for the layout.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.IAutoSizeLayoutItem.IsHeightAutoSized">
            <summary>
            Returns true to indicate that the height is auto-sized and thus the item should not be 
            resized smaller than its preferred width when proportionally shrinking all the items to
            auto-fit in the available space for the layout.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo._i">
            <summary>
            Original layout item.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo._preferredSize">
            <summary>
            Current preferred size. This may be different from the original preferred size of the
            underlying layout item.  Since resize process may be multi-pass, this value will be 
            updated to reflect the current item dimensions during each pass.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo._gcc">
            <summary>
            Cached GridBagConstraintCache associated with this layout item. This is simply for 
            efficiency reasons as the gcc doesn't have to be retrieved from the 
            GridBagLayoutItemDimensionsCollection.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.ResizeManager.LayoutItemInfo._dim">
            <summary>
            Cached current dimension of the item. Since resize process may be multi-pass, this
            value will be updated to reflect the current item dimensions during each pass.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GridBagLayoutMode">
            <summary>
            GridBagLayout mode.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GridBagLayoutMode.Standard">
            <summary>
            Standard.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GridBagLayoutMode.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Layouts.Primitives.GridBagLayoutManager.GridBagLayoutMode.Uniform">
            <summary>
            Uniform extent distribution across logical rows and columns. 
            </summary>
        </member>
        <member name="T:Infragistics.ITypedPropertyChangeListener`2">
            <summary>
            Interface used to hook into property change notifications of objects that implement 
            <see cref="T:Infragistics.ITypedSupportPropertyChangeNotifications`2"/> interface.
            </summary>
            <typeparam name="TItem">Type of the item whose change notifications are hooked into.</typeparam>
            <typeparam name="TProperty">Type of object that identifies properties.</typeparam>
        </member>
        <member name="M:Infragistics.ITypedPropertyChangeListener`2.OnPropertyValueChanged(`0,`1,System.Object)">
            <summary>
            Called to notify of a change in the value of a property.
            </summary>
            <param name="dataItem">Item whose property value changed.</param>
            <param name="property">Identifies the property whose value changed.</param>
            <param name="extraInfo">Any other information regarding the change. The information passed depends on
            the implementation of the item that's sending the notification. This can be an instance of 
            PropertyChangedEventArgs, or DependencyPropertyChangedEventArgs, NotifyCollectionChangedEventArgs or null.</param>
        </member>
        <member name="T:Infragistics.IPropertyChangeListener">
            <summary>
            Interface used to hook into property change notifications of objects that implement
            <see cref="T:Infragistics.ISupportPropertyChangeNotifications"/> interface.
            </summary>
        </member>
        <member name="T:Infragistics.ITypedSupportPropertyChangeNotifications`2">
            <summary>
            Interface implemented by objects to support <see cref="T:Infragistics.ITypedPropertyChangeListener`2"/> listeners.
            </summary>
            <typeparam name="TItem">Type of the item whose notifications are being sent. Typically the object implementing the interface.</typeparam>
            <typeparam name="TProperty">Type of the object that identifies the property.</typeparam>
        </member>
        <member name="T:Infragistics.ISupportPropertyChangeNotifications">
            <summary>
            Interface implemented by objects to support <see cref="T:Infragistics.IPropertyChangeListener"/> listeners.
            </summary>
        </member>
        <member name="T:Infragistics.IValueChangeListener`1">
            <summary>
            Listener interface used to listen for value change of a specific property.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:Infragistics.IValueChangeListener`1.OnValueChanged(`0)">
            <summary>
            Called to notify the change in the value of the property.
            </summary>
            <param name="dataItem">Item whose property value changed.</param>
        </member>
        <member name="T:Infragistics.ListenerList">
            <summary>
            A helper class used for managing one or more listeners. It uses a List when more than one listeners are added.
            </summary>
        </member>
        <member name="M:Infragistics.ListenerList.#ctor(System.Int32)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.ListenerList"/>.
            </summary>
        </member>
        <member name="T:Infragistics.TypedPropertyChangeListenerList`2">
            <summary>
            Used for managing property change listeners.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:Infragistics.PropertyChangeListenerList">
            <summary>
            Used for managing property change listeners.
            </summary>
        </member>
        <member name="T:Infragistics.KnownBoxes">
            <summary>
            Class that maintains references to commonly boxed values such as booleans.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.TrueBox">
            <summary>
            Returns an object containing the boolean 'true'
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.FalseBox">
            <summary>
            Returns an object containing the boolean 'false'
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.ScrollBarVisibilityHiddenBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> 'Hidden'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.ScrollBarVisibilityVisibleBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> 'Visible'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.ScrollBarVisibilityDisabledBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> 'Disabled'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.ScrollBarVisibilityAutoBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> 'Auto'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VisibilityVisibleBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Visibility"/> 'Visible'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VisibilityCollapsedBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Visibility"/> 'Hidden'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.OrientationVerticalBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Orientation"/> 'Vertical'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.OrientationHorizontalBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.Controls.Orientation"/> 'Horizontal'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.HorizontalAlignmentCenterBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment"/> 'Center'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.HorizontalAlignmentLeftBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment"/> 'Left'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.HorizontalAlignmentRightBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment"/> 'Right'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.HorizontalAlignmentStretchBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.HorizontalAlignment"/> 'Stretch'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VerticalAlignmentCenterBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment"/> 'Center'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VerticalAlignmentTopBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment"/> 'Top'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VerticalAlignmentBottomBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment"/> 'Bottom'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.VerticalAlignmentStretchBox">
            <summary>
            Returns an object containing the <see cref="T:System.Windows.VerticalAlignment"/> 'Stretch'.
            </summary>
        </member>
        <member name="F:Infragistics.KnownBoxes.DoubleZeroBox">
            <summary>
            A boxed instance for a double value of zero.
            </summary>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Boolean)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Boolean"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Boolean"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Boolean"/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Nullable{System.Boolean})">
            <summary>
            Returns a boxed representation of the specified bool? value
            </summary>
            <param name="value">An instance of bool? for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified bool?/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Windows.Controls.ScrollBarVisibility)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.Controls.ScrollBarVisibility"/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Windows.Visibility)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.Visibility"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.Visibility"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.Visibility"/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Windows.Controls.Orientation)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.Controls.Orientation"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.Controls.Orientation"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.Controls.Orientation"/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Windows.HorizontalAlignment)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.HorizontalAlignment"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.HorizontalAlignment"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.HorizontalAlignment"/> value</returns>
        </member>
        <member name="M:Infragistics.KnownBoxes.FromValue(System.Windows.VerticalAlignment)">
            <summary>
            Returns a boxed representation of the specified <see cref="T:System.Windows.VerticalAlignment"/> value
            </summary>
            <param name="value">An instance of <see cref="T:System.Windows.VerticalAlignment"/> for which a cached boxed value is to be returned</param>
            <returns>An object that wraps the specified <see cref="T:System.Windows.VerticalAlignment"/> value</returns>
        </member>
        <member name="T:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection">
            <summary>
            ILayoutItem collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.#ctor(Infragistics.Controls.Layouts.Primitives.LayoutManagerBase)">
            <summary>
            Constructor.
            </summary>
            <param name="layoutManager">The <see cref="T:Infragistics.Controls.Layouts.Primitives.LayoutManagerBase"/>.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.InternalSetConstraint(Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Object,System.Int32)">
            <summary>
            Sets the constraint for the item. If the item doesn't exist in the collection, its added.
            </summary>
            <param name="item"></param>
            <param name="constraint"></param>
            <param name="index">Specify -1 to add the item at the end of the list.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.OnLayoutChanged">
            <summary>
            This method is called whenever a layout item is added, removed or the layout is cleared. Implementation of this method calls InvalidateLayout to invalidate any cached information.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.ValidateConstraintObject(System.Object)">
            <summary>
            Implementation should throw an exception if the passed in constraint is not a valid
            constraint for this layout manager. It usually checks the type.
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Add(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Adds an item to be managed by this layout manager. It uses null as the constraint so the underlying layout manager must support null constraints.
            </summary>
            <param name="item">The item to add to the layout manager.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Add(Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Object)">
            <summary>
            Adds an item to be managed by this layout manager.
            </summary>
            <param name="item">The item to add to the layout manager.</param>
            <param name="constraint">The constraint to assign to the item.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Contains(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Returns true if the passed in item contained in this layout manager.
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to check for in the collection.</param>
            <returns>True if the specified item is contained in this layout manager.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Clear">
            <summary>
            Removes all the items.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.CopyTo(Infragistics.Controls.Layouts.Primitives.ILayoutItem[],System.Int32)">
            <summary>
            Copies the items from the collection into the array.
            </summary>
            <param name="array">Array to which to copy items.</param>
            <param name="arrayIndex">Index in the array at which to begin copying items.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.GetConstraint(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Returns the constraint object associated with the item. Throws an exception if the item
            does not exist (ie. it hasn't been added through AddLayoutItem method has been removed).
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> whose constraint should be retrieved.</param>
            <returns>The constraint object associated with the item.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.GetItem(System.Int32)">
            <summary>
            Gets the item at specified index.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <returns>The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> at the specified index.</returns>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.IndexOf(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Retruns the index of the passed in item in the layout items collection.
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> whose index should be retrieved.</param>
            <returns>The index of the specified item, or -1 if the item was not found.</returns>
            <remarks>
            <p>Layout manager keeps track of the order in which items are added. Some layout managers may layout items in the order in which they were added.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Insert(System.Int32,Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Inserts the item at specified index. It uses null as the constraint so the underlying layout manager must support null constraints.
            </summary>
            <param name="index">Specify -1 to add the item at the end of the list.</param>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to add to the collection.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Insert(System.Int32,Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Object)">
            <summary>
            Inserts the item at specified index in with the specified constraint.
            </summary>
            <param name="index">Specify -1 to add the item at the end of the list.</param>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to add to the collection.</param>
            <param name="constraint">The constraint to apply to the specified item.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Remove(Infragistics.Controls.Layouts.Primitives.ILayoutItem)">
            <summary>
            Removes an item from this layout manager if it exists.
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> to remove.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.SetConstraint(Infragistics.Controls.Layouts.Primitives.ILayoutItem,System.Object)">
            <summary>
            Sets the constraint for the item. If the item doesn't exist in the collection, its added.
            </summary>
            <param name="item">The <see cref="T:Infragistics.Controls.Layouts.Primitives.ILayoutItem"/> whose constraint should be set.</param>
            <param name="constraint">The constraint to assign to the specified object.</param>
        </member>
        <member name="M:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerable Interface Implementation. Returns a type safe enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.LayoutItemsConstraints">
            <summary>
            Layout items with their constraints.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.LayoutItems">
            <summary>
            Layout items.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Count">
            <summary>
            Returns the number of items this LayoutItemsCollection contains.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.Item(System.Int32)">
            <summary>
            Gets the item at specified index.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Layouts.Primitives.LayoutItemsCollection.System#Collections#Generic#ICollection{Infragistics#Controls#Layouts#Primitives#ILayoutItem}#IsReadOnly">
            <summary>
            Indicates whether the collection is read-only.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.ObservableCollectionExtended`1">
            <summary>
            An extended <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that supports adding and removing multiple items at once.
            </summary>
            <typeparam name="T">The type of item that the collection will contain. If T implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> then the collection will hook the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event of all objects added to the collection.</typeparam>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.ObservableCollectionExtended`1"/>
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.ObservableCollectionExtended`1"/>
            </summary>
            <param name="list">The list from which elements are inserted</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.ObservableCollectionExtended`1"/>
            </summary>
            <param name="hookItemPropertyChanged">Specifies whether to hook into PropertyChanged notifications of items.</param>
            <param name="hookItemListeners">Specifies whether to hook into item listeners.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of a collection to the end of this collection.
            </summary>
            <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.BeginUpdate">
            <summary>
            Prevents change notifications (e.g. <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>) from being raised.
            </summary>
            <remarks>
            <p class="note">The <see cref="M:Infragistics.Collections.ObservableCollectionExtended`1.EndUpdate"/> method must be called exactly once for each time that the <b>BeginUpdate</b> method is called.</p>
            </remarks>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.EndUpdate"/>
            <seealso cref="P:Infragistics.Collections.ObservableCollectionExtended`1.IsUpdating"/>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.BinarySearch(`0)">
            <summary>
            Searches the entire list for the specified element and returns the zero based index.
            </summary>
            <param name="item">The item to locate</param>
            <returns>The zero based index if found; otherwise the bitwise complement of the index of the next larger element.</returns>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire list for the specified element using the specified comparer and returns the zero based index.
            </summary>
            <param name="item">The item to locate</param>
            <param name="comparer">The object to use when comparing the elements in the collection</param>
            <returns>The zero based index if found; otherwise the bitwise complement of the index of the next larger element.</returns>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.EndUpdate">
            <summary>
            Resumes change notifications (e.g. <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> and <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>).
            </summary>
            <remarks>
            <p class="note">The <b>EndUpdate</b> method must be called exactly once for each time that the <see cref="M:Infragistics.Collections.ObservableCollectionExtended`1.BeginUpdate"/> method is called.</p>
            </remarks>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.BeginUpdate"/>
            <seealso cref="P:Infragistics.Collections.ObservableCollectionExtended`1.IsUpdating"/>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.ReInitialize(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Clears and repopulates the collection with the specified 
            </summary>
            <param name="collection">The collection of items that should be used to repopulate the collection.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a contiguous block of items from the collection.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnBeginUpdate">
            <summary>
            Invoked when BeginUpdate is first called and <see cref="P:Infragistics.Collections.ObservableCollectionExtended`1.IsUpdating"/> becomes true.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnEndUpdate">
            <summary>
            Invoked when EndUpdate is called and <see cref="P:Infragistics.Collections.ObservableCollectionExtended`1.IsUpdating"/> becomes false.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdded(`0)">
            <summary>
            Invoked when an item has been added if the <see cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/> returns true.
            </summary>
            <param name="itemAdded">The item that was added</param>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemRemoved(`0)"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdding(`0)"/>
            <seealso cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdding(`0)">
            <summary>
            Invoked when an item is about to be added if the <see cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/> returns true.
            </summary>
            <param name="itemAdded">The item that is being added</param>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemRemoved(`0)"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdded(`0)"/>
            <seealso cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemRemoved(`0)">
            <summary>
            Invoked when an item has been removed if the <see cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/> returns true.
            </summary>
            <param name="itemRemoved">The item that was removed</param>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdded(`0)"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdding(`0)"/>
            <seealso cref="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged"/>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemPropertyChanged(Infragistics.Collections.ItemPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.Collections.ObservableCollectionExtended`1.ItemPropertyChanged"/> event with the specified arguments.
            </summary>
            <param name="e">The event arguments for the event to be raised.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.ClearItems">
            <summary>
            Removes all the items from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts a new item at the specified index in the collection.
            </summary>
            <param name="index">The index at which to insert the <paramref name="item"/></param>
            <param name="item">The object to insert in the collection</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event.
            </summary>
            <param name="e">The arguments providing information about the collection change.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="e">The arguments providing information about the property change.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item at the specified index.
            </summary>
            <param name="index">The index of the item in the collection to be removed.</param>
        </member>
        <member name="M:Infragistics.Collections.ObservableCollectionExtended`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces an item at the specified index in the collection 
            </summary>
            <param name="index">Index of the item to replace</param>
            <param name="item">The item to insert into the collection.</param>
        </member>
        <member name="P:Infragistics.Collections.ObservableCollectionExtended`1.IsUpdating">
            <summary>
            Returns true if the change notifications have been suspended using the <see cref="M:Infragistics.Collections.ObservableCollectionExtended`1.BeginUpdate"/> method.
            </summary>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.EndUpdate"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.BeginUpdate"/>
        </member>
        <member name="P:Infragistics.Collections.ObservableCollectionExtended`1.NotifyItemsChanged">
            <summary>
            Returns a boolean indicating whether the derived collection should have its <see cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdded(`0)"/> and <see cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemRemoved(`0)"/> methods invoked.
            </summary>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemRemoved(`0)"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdded(`0)"/>
            <seealso cref="M:Infragistics.Collections.ObservableCollectionExtended`1.OnItemAdding(`0)"/>
        </member>
        <member name="P:Infragistics.Collections.ObservableCollectionExtended`1.PropChangeListeners">
            <summary>
            List of listeners that will be added as a listener to the contained items.
            Also collection change notifications will be raised on the listeners as well.
            </summary>
        </member>
        <member name="E:Infragistics.Collections.ObservableCollectionExtended`1.ItemPropertyChanged">
            <summary>
            Raised when an object in the collection raises its <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> The <b>ItemPropertyChanged</b> event will only be raised if the 
            type T implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Collections.ItemPropertyChangedEventArgs">
            <summary>
            Event arguments for a property changed on another object.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ItemPropertyChangedEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Collections.ItemPropertyChangedEventArgs"/>
            </summary>
            <param name="item">The item whose property has changed</param>
            <param name="propertyName">The name of the property that has changed</param>
        </member>
        <member name="P:Infragistics.Collections.ItemPropertyChangedEventArgs.Item">
            <summary>
            Returns the item whose property has changed.
            </summary>
            <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/>
        </member>
        <member name="M:Infragistics.Controls.PresentationUtilities.Focus(System.Windows.UIElement)">
            <summary>
            Attempts to focus the first focusable element within the specified element (including the element itself).
            </summary>
            <param name="element">The element to which focus should be shifted.</param>
            <returns>Returns the results of the call to Focus</returns>
        </member>
        <member name="M:Infragistics.Controls.PresentationUtilities.GetVisualDescendant``1(System.Windows.DependencyObject,System.Predicate{``0},System.Predicate{System.Windows.DependencyObject})">
            <summary>
            Helper method to enumerate into the visual descendants of an element.
            </summary>
            <typeparam name="T">The type of element being sought</typeparam>
            <param name="element">The element whose descendants are to be traversed</param>
            <param name="match">The method invoked when a <typeparamref name="T"/> is found to determine if that is the one being sought</param>
            <param name="skipDescend">The method invoked when an element is about to be traversed to determine if the descendants should be checked</param>
            <returns>The element located or null if one was not found</returns>
        </member>
        <member name="M:Infragistics.Controls.PresentationUtilities.GetImmediateDescendant(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Helper routine similar to find ancestor except that it returns the direct child that 
            contains the descendant.
            </summary>
            <param name="descendant">The nested descendant from which to start searching the ancestors</param>
            <param name="ancestor">The ancestor whose direct child is to be returned</param>
        </member>
        <member name="M:Infragistics.Controls.PresentationUtilities.HasNoOtherModifiers(System.Windows.Input.ModifierKeys)">
            <summary>
            Helper method to ensure that no modifier keys except optionally the ones specified are pressed
            </summary>
            <param name="modifiersToIgnore">The modifier keys which can be ignored</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.PresentationUtilities.IsModifierPressed(System.Windows.Input.ModifierKeys,System.Windows.Input.ModifierKeys)">
            <summary>
            Helper method to see if only the specified key is pressed
            </summary>
            <param name="modifier">The modifier key to check for</param>
            <param name="modifiersToIgnore">The modifiers that may be ignore. For example this could be Shift if you are concerned with Ctrl or Ctrl-Shift.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.PresentationUtilities.MayBeVisible(System.Windows.FrameworkElement)">
            <summary>
            Used to eliminate elements that are definitely not in view.
            </summary>
            <param name="element">Element to evaluate</param>
            <returns>Returns false if the element is collapsed, has no visual parent, etc.; otherwise returns true.</returns>
        </member>
        <member name="M:Infragistics.Controls.PresentationUtilities.ReparentElement(System.Windows.Controls.Panel,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Helper method for putting an element into or pulling out of a panel.
            </summary>
            <param name="panel">The panel to add/remove the child to/from</param>
            <param name="child">The element to add/remove</param>
            <param name="add">True to add the element assuming its current visual parent is null or false to remove the element assuming its current visual parent is the specified <paramref name="panel"/></param>
        </member>
        <member name="P:Infragistics.Controls.BindingPart.Path">
            <summary>
            This is only needed if indexing into a property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.BindingPart.PathParameter">
            <summary>
            This should be a DP (for WPF), a FieldInfo (in SL this should only be for attached props), a PropertyInfo or a PropertyDescriptor (for WPF).
            </summary>
        </member>
        <member name="T:Infragistics.RecyclingContainer`1">
            <summary>
            A base class for objects that want to support recycling.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Windows.FrameworkElement"/> that this object represents.</typeparam>
        </member>
        <member name="T:Infragistics.ISupportRecycling">
            <summary>
            An interface that should be implemented on objects that represent control objects that should be Recycled.
            </summary>
        </member>
        <member name="M:Infragistics.ISupportRecycling.CreateInstanceOfRecyclingElement">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.FrameworkElement"/> that represents the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ISupportRecycling.OnElementAttached(System.Windows.FrameworkElement)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/>  is being attached to the object.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.ISupportRecycling.OnElementReleasing(System.Windows.FrameworkElement)">
            <summary>
            Invoked before a <see cref="T:System.Windows.FrameworkElement"/> is released from the object.
            </summary>
            <param name="element"></param>
            <returns>Returns false, if the element isn't released.</returns>
        </member>
        <member name="M:Infragistics.ISupportRecycling.OnElementReleased(System.Windows.FrameworkElement)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/> is no longer attached to the object. 
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:Infragistics.ISupportRecycling.RecyclingElementType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:System.Windows.FrameworkElement"/> that is being recycled.
            </summary>
        </member>
        <member name="P:Infragistics.ISupportRecycling.RecyclingIdentifier">
            <summary>
            Offers another way to recyle an element, other than Type.
            </summary>
        </member>
        <member name="P:Infragistics.ISupportRecycling.IsDirty">
            <summary>
            Gets/sets a value that determines if the <see cref="T:System.Windows.FrameworkElement"/> attached has been modified
            in such a way that it should just be thrown away when the object is done with it. 
            </summary>
        </member>
        <member name="P:Infragistics.ISupportRecycling.AttachedElement">
            <summary>
            Gets/sets the actual <see cref="T:System.Windows.FrameworkElement"/> that is attached to the object. If no object is attached
            then null is returned. 
            </summary>
        </member>
        <member name="M:Infragistics.RecyclingContainer`1.CreateInstanceOfRecyclingElement">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.FrameworkElement"/> that represents the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RecyclingContainer`1.OnElementAttached(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/>  is being attached to the object.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.RecyclingContainer`1.OnElementReleased(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/> is no longer attached to the object. 
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.RecyclingContainer`1.OnElementReleasing(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/> is being released from an object.
            </summary>
            <param name="element"></param>
            <returns>False, if the element shouldn't be released.</returns>
        </member>
        <member name="M:Infragistics.RecyclingContainer`1.OnPropertyChanged(System.String)">
            <summary>
            Invoked when a property changes on the RecyclingContainer object.
            </summary>
            <param name="name">The name of the property that has changed.</param>
        </member>
        <member name="P:Infragistics.RecyclingContainer`1.RecyclingElementType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:System.Windows.FrameworkElement"/> that is being recycled.
            </summary>
        </member>
        <member name="P:Infragistics.RecyclingContainer`1.RecyclingIdentifier">
            <summary>
            If a <see cref="P:Infragistics.RecyclingContainer`1.RecyclingElementType"/> isn't specified, this property can be used to offer another way of identifying 
            a reyclable element.
            </summary>
        </member>
        <member name="P:Infragistics.RecyclingContainer`1.IsDirty">
            <summary>
            Gets/sets a value that determines if the <see cref="T:System.Windows.FrameworkElement"/> attached has been modified
            in such a way that it should just be thrown away when the object is done with it. 
            </summary>
        </member>
        <member name="P:Infragistics.RecyclingContainer`1.AttachedElement">
            <summary>
            Gets/sets the actual <see cref="T:System.Windows.FrameworkElement"/> that is attached to the object. If no object is attached
            then null is returned. 
            </summary>
        </member>
        <member name="E:Infragistics.RecyclingContainer`1.PropertyChanged">
            <summary>
            Fired when a property changes on the RecyclingContainer.
            </summary>
        </member>
        <member name="T:Infragistics.DependencyObjectRecyclingContainer`1">
            <summary>
            A base class for objects that want to support recycling which supports objects that will be <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Windows.FrameworkElement"/> that this object represents.</typeparam>
        </member>
        <member name="M:Infragistics.DependencyObjectRecyclingContainer`1.CreateInstanceOfRecyclingElement">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.FrameworkElement"/> that represents the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DependencyObjectRecyclingContainer`1.OnElementAttached(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/>  is being attached to the object.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.DependencyObjectRecyclingContainer`1.OnElementReleased(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/> is no longer attached to the object. 
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Infragistics.DependencyObjectRecyclingContainer`1.OnElementReleasing(`0)">
            <summary>
            Invoked when a <see cref="T:System.Windows.FrameworkElement"/> is being released from an object.
            </summary>
            <param name="element"></param>
            <returns>False, if the element shouldn't be released.</returns>
        </member>
        <member name="P:Infragistics.DependencyObjectRecyclingContainer`1.RecyclingElementType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:System.Windows.FrameworkElement"/> that is being recycled.
            </summary>
        </member>
        <member name="P:Infragistics.DependencyObjectRecyclingContainer`1.RecyclingIdentifier">
            <summary>
            If a <see cref="P:Infragistics.DependencyObjectRecyclingContainer`1.RecyclingElementType"/> isn't specified, this property can be used to offer another way of identifying 
            a reyclable element.
            </summary>
        </member>
        <member name="P:Infragistics.DependencyObjectRecyclingContainer`1.IsDirty">
            <summary>
            Gets/sets a value that determines if the <see cref="T:System.Windows.FrameworkElement"/> attached has been modified
            in such a way that it should just be thrown away when the object is done with it. 
            </summary>
        </member>
        <member name="P:Infragistics.DependencyObjectRecyclingContainer`1.AttachedElement">
            <summary>
            Gets/sets the actual <see cref="T:System.Windows.FrameworkElement"/> that is attached to the object. If no object is attached
            then null is returned. 
            </summary>
        </member>
        <member name="T:Infragistics.IRecyclableElement">
            <summary>
            An interface for objects that will be managed by the <see cref="T:Infragistics.RecyclingManager"/> which will allow certain objects to be
            temporarily allow the item to avoid recycling.
            </summary>
        </member>
        <member name="P:Infragistics.IRecyclableElement.DelayRecycling">
            <summary>
            Gets/sets if the object should be recycled.
            </summary>
        </member>
        <member name="P:Infragistics.IRecyclableElement.OwnerPanel">
            <summary>
            Gets/sets the <see cref="T:System.Windows.Controls.Panel"/> that owns this element. 
            </summary>
        </member>
        <member name="T:Infragistics.IRecyclableElementHost">
            <summary>
            Interface implemented by a panel that hosts the elements for <see cref="T:Infragistics.IRecyclableElement"/> items.
            </summary>
        </member>
        <member name="M:Infragistics.IRecyclableElementHost.OnElementAttached(Infragistics.ISupportRecycling,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Invoked when an element is associated with an item in the panel
            </summary>
            <param name="element">The element being associated with an item</param>
            <param name="item">The item represented by the specified element</param>
            <param name="isNewlyRealized">True if the element is new; false if the element is being recycled</param>
        </member>
        <member name="M:Infragistics.IRecyclableElementHost.OnElementReleased(Infragistics.ISupportRecycling,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Invoked when an element is detached from an item.
            </summary>
            <param name="element">The element being released</param>
            <param name="item">The item that was represented by the element</param>
            <param name="isRemoved">True if the element is being removed from the children; otherwise false if the element is being kept for potential recycling later</param>
        </member>
        <member name="M:Infragistics.IRecyclableElementHost.ShouldRemove(Infragistics.ISupportRecycling,System.Windows.FrameworkElement)">
            <summary>
            Invoked when an element being released is to be considered for recycling.
            </summary>
            <param name="element">The element being released</param>
            <param name="item">The item that was represented by the element</param>
            <returns>Return true to indicate that the element should be removed from the panel; otherwise return false to allow the element to be recyled.</returns>
        </member>
        <member name="T:Infragistics.RecyclingManager">
            <summary>
            An object that manages all recycling for an application.
            </summary>
        </member>
        <member name="M:Infragistics.RecyclingManager.AttachElement(Infragistics.ISupportRecycling,System.Windows.Controls.Panel)">
            <summary>
            Attaches an element to the given <see cref="T:Infragistics.ISupportRecycling"/> object. 
            If there aren't any available elements of the needed type, a new object will be generated. 
            If the object already has an attached element, then nothing will be done.
            Note: the element can only be attached to the specified panel. 
            </summary>
            <returns>True if the item was newly created and added to the children collection of the panel.</returns>
        </member>
        <member name="M:Infragistics.RecyclingManager.ReleaseElement(Infragistics.ISupportRecycling,System.Windows.Controls.Panel)">
            <summary>
            Removes the attached element from the <see cref="T:Infragistics.ISupportRecycling"/> object, and marks the
            element as available, assuming the object wasn't marked dirty.
            Note: the element is only reusuable for the specified panel. 
            </summary>
        </member>
        <member name="M:Infragistics.RecyclingManager.ReleaseAll(System.Windows.Controls.Panel)">
            <summary>
            Releases all the elements from a given panel and from the cache.
            </summary>
            <param name="parent">The panel whose cached children are to be removed</param>
        </member>
        <member name="M:Infragistics.RecyclingManager.ReleaseAll(System.Windows.Controls.Panel,System.String)">
            <summary>
            Removes all elements from the contain panel, and from the cache.
            </summary>
            <param name="parent">Panel whose children are to be released</param>
            <param name="id">The id under which the children were cached.</param>
        </member>
        <member name="M:Infragistics.RecyclingManager.ReleaseAll(System.Windows.Controls.Panel,System.Type)">
            <summary>
            Removes all elements from the contain panel, and from the cache.
            </summary>
            <param name="parent">Panel whose children are to be released</param>
            <param name="t">The type under which the children were cached.</param>
        </member>
        <member name="M:Infragistics.RecyclingManager.ReleaseAllAvailable(System.Windows.Controls.Panel)">
            <summary>
            Removes all unused elements from the containing panel.
            </summary>
            <param name="parent">Panel whose children are to be released</param>
        </member>
        <member name="M:Infragistics.RecyclingManager.ItemFromElement(System.Windows.FrameworkElement)">
            <summary>
            Returns the <see cref="T:Infragistics.ISupportRecycling"/> instance associated with a given element.
            </summary>
            <param name="element">The element whose associated item is to be returned.</param>
            <returns>The associated item or null if the item was released or the element is not associated with an item</returns>
        </member>
        <member name="M:Infragistics.RecyclingManager.GetRecentlyAvailableElements(System.Windows.Controls.Panel,System.Boolean)">
            <summary>
            Gets the unused elements of a specific panel. 
            </summary>
            <param name="panel">The panel whose recently released elements are to be returned</param>
            <param name="release">True to clear the list</param>
            <returns>A list of elements that have been released and are not currently associated with an item since the last call to GetRecentlyAvailableElements where <paramref name="release"/> was true</returns>
        </member>
        <member name="M:Infragistics.RecyclingManager.GetAvailableElements(System.Windows.Controls.Panel)">
            <summary>
            Gets the unused elements of a specific panel. 
            </summary>
            <param name="panel">The panel whose unused Children are to be returned.</param>
            <returns>A list of elements in the Children collection of the panel that have been marked for recycling.</returns>
        </member>
        <member name="P:Infragistics.RecyclingManager.Manager">
            <summary>
            A global Manager that manages all recycling for an application.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Primitives.IResourceProviderClient">
            <summary>
            Used to notify <see cref="T:Infragistics.Controls.Primitives.ResourceProvider"/> client elements that the resources may have changed
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.IResourceProviderClient.OnResourcesChanged">
            <summary>
            Called when resources have changed or when the <see cref="T:Infragistics.Controls.Primitives.ResourceProvider"/> attached property has changed.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Primitives.ResourceProvider">
            <summary>
            Abstract base class that exposes an indexer to retrieve values based on a key.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProvider.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Infragistics.Controls.Primitives.ResourceProvider"/>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.ResourceProvider.ResourceProviderProperty">
            <summary>
            Identifies the ResourceProvider attached dependency property
            </summary>
            <seealso cref="M:Infragistics.Controls.Primitives.ResourceProvider.GetResourceProvider(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Controls.Primitives.ResourceProvider.SetResourceProvider(System.Windows.DependencyObject,Infragistics.Controls.Primitives.ResourceProvider)"/>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProvider.GetResourceProvider(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the attached ResourceProvider DependencyProperty.
            </summary>
            <param name="target">The object whose value is to be returned</param>
            <seealso cref="F:Infragistics.Controls.Primitives.ResourceProvider.ResourceProviderProperty"/>
            <seealso cref="M:Infragistics.Controls.Primitives.ResourceProvider.SetResourceProvider(System.Windows.DependencyObject,Infragistics.Controls.Primitives.ResourceProvider)"/>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProvider.SetResourceProvider(System.Windows.DependencyObject,Infragistics.Controls.Primitives.ResourceProvider)">
            <summary>
            Sets the value of the attached ResourceProvider DependencyProperty.
            </summary>
            <param name="target">The object whose value is to be modified</param>
            <param name="value">The new value</param>
            <seealso cref="F:Infragistics.Controls.Primitives.ResourceProvider.ResourceProviderProperty"/>
            <seealso cref="M:Infragistics.Controls.Primitives.ResourceProvider.GetResourceProvider(System.Windows.DependencyObject)"/>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProvider.InvalidateResources">
            <summary>
            Called to invalidate any cached values
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProvider.OnSystemColorsChanged">
            <summary>
            Called when the system colors have changed
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProvider.Item(System.Object)">
            <summary>
            Indexer that takes an object/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProvider.Item(System.String)">
            <summary>
            Indexer that takes a string 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProvider.IsHighContrast">
            <summary>
            Returns  true if the system theme is a high contrast theme (read-only).
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProvider.ResourceVersion">
            <summary>
            Returns a version number that will get bumped every time <see cref="M:Infragistics.Controls.Primitives.ResourceProvider.InvalidateResources"/> is called.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProvider.IsHighContrastStatic">
            <summary>
            Gets whether the system should render controls with high contrast.
            </summary>
            <remarks>The conditions to determine this are consistant with Office2007.</remarks>
        </member>
        <member name="T:Infragistics.Controls.Primitives.ResourceProvider`1">
            <summary>
            Abstract base class that exposes an indexer to retrieve values based on an enum.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProvider`1.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Infragistics.Controls.Primitives.ResourceProvider"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProvider`1.GetResource(`0)">
            <summary>
            Returns a value for a specific id
            </summary>
            <param name="id">The id of the resource</param>
            <returns>The resource identified by the id or null.</returns>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProvider`1.Item(System.Object)">
            <summary>
            Indexer takes a string or a key/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProvider`1.Item(System.String)">
            <summary>
            Indexer that takes a string 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProvider`1.Item(`0)">
            <summary>
            Indexer that takes an enum
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1">
            <summary>
            Abstract base class that exposes an indexer to retrieve values based on an enum from a <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.GetResource(`0)">
            <summary>
            Returns a value for a specific id
            </summary>
            <param name="id">The id of the resource</param>
            <returns>The resource identified by the id or null.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.InvalidateResources">
            <summary>
            Called to invalidate any cached resources
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.BeginInit">
            <summary>
            Called when object initialization is beginning
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.EndInit">
            <summary>
            Called when object initialization has ended
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.IsResourceValid(`0,System.Object)">
            <summary>
            Returns true if this is a valid resource
            </summary>
            <param name="id">The id of the resource</param>
            <param name="resource">The resource that was found</param>
            <returns>True if the resource is valid, otherwise false</returns>
            <remarks>
            <para class="body">For example, if the id represents a Brush and a Thickness is found then this method should return false.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.IsHighContrastSupported">
            <summary>
            Determines whether controls will be rendered in high contrast based on the current system settings (read-only).
            </summary>
            <remarks>
            <para class="body">If the system theme is a high contrast theme and this property is left to its default valu of true then high contrast resources will be returned by the indexers.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.ResourceOverrides">
            <summary>
            Gets/sets an optional <see cref="T:System.Windows.ResourceDictionary"/> that contains resources keyed by the enum values of T that will be used instead of the the corresponding defalse values.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> In WPF the x:Key used for the resoure can either be the enum value or its exact string equivalent. 
            In Silverlight however, since that framework only supports keys that are strings or Types, you can only use the string equivalent as the key.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.ResourceOverridesHighContrast">
            <summary>
            Gets/sets an optional <see cref="T:System.Windows.ResourceDictionary"/> that contains resources keyed by the enum values of T that will be used instead of the the corresponding defalse values.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> In WPF the x:Key used for the resoure can either be the enum value or its exact string equivalent. 
            In Silverlight however, since that framework only supports keys that are strings or Types, you can only use the string equivalent as the key.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.DefaultResources">
            <summary>
            Gets/sets a <see cref="T:System.Windows.ResourceDictionary"/> that contains the default resources for all values of T. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.DefaultResourcesHighContrast">
            <summary>
            Gets/sets a <see cref="T:System.Windows.ResourceDictionary"/> that contains the default resources for all values of T. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.IsLoading">
            <summary>
            Returns true between calls to <see cref="M:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.BeginInit"/> and <see cref="M:Infragistics.Controls.Primitives.ResourceProviderWithOverrides`1.EndInit"/>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Primitives.ResourceStringBase">
            <summary>
            Abstract base class that represents a string resource
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceStringBase.#ctor">
            <summary>
            Instantiates a new instance of a <see cref="T:Infragistics.Controls.Primitives.ResourceStringBase"/> derived class
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceStringBase.ToString">
            <summary>
            Returns the string representation of this object
            </summary>
            <returns>The <see cref="P:Infragistics.Controls.Primitives.ResourceStringBase.Value"/>  property</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ResourceStringBase.InvalidateCachedResources">
            <summary>
            Clears any cached resource strings and notifies all derived class instances that their values may have changed.
            </summary>
            <remarks>
            <para class="note"><b>Note:</b> this method is called automatically when registering custom resources.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceStringBase.ResourceName">
            <summary>
            Gets/sets the resource idenifier
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ResourceStringBase.Value">
            <summary>
            Returns the loaded string (read-only)
            </summary>
        </member>
        <member name="T:Infragistics.Collections.ISparseArrayItem">
            <summary>
            This interface can be implemented on items to be contained in the sparse 
            array to get a fast IndexOf operation.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ISparseArrayItem.GetOwnerData(Infragistics.Collections.SparseArray)">
            <summary>
            Gets the owner data of the item.
            </summary>
            <param name="context">The sparse array context.</param>
            <remarks>
            <p class="body"><b>GetOwnerData</b> and <see cref="M:Infragistics.Collections.ISparseArrayItem.SetOwnerData(System.Object,Infragistics.Collections.SparseArray)"/> methods are used by the <see cref="T:Infragistics.Collections.SparseArray"/> implementation to maintain a transparent piece of data. It uses this data to provide efficient IndexOf operation.</p>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.ISparseArrayItem.SetOwnerData(System.Object,Infragistics.Collections.SparseArray)">
            <summary>
            Sets the owner data of the item.
            </summary>
            <param name="ownerData"></param>
            <param name="context">The sparse array context.</param>
            <remarks>
            <p class="body"><see cref="M:Infragistics.Collections.ISparseArrayItem.GetOwnerData(Infragistics.Collections.SparseArray)"/> and <b>SetOwnerData</b> methods are used by the <see cref="T:Infragistics.Collections.SparseArray"/> implementation to maintain a transparent piece of data. It uses this data to provide efficient IndexOf operation.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Collections.ISparseArrayMultiItem">
            <summary>
            ISparseArrayMultiItem interface.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ISparseArrayMultiItem.GetItemAtScrollIndex(System.Int32)">
            <summary>
            Returns a descendant item at the specified index. The returned item 
            doesn't necessarily have to be an immediate child.
            </summary>
            <param name="scrollIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.ISparseArrayMultiItem.ScrollCount">
            <summary>
            Gets the scroll count of this item. If the scroll count is 0 then item 
            is considered hidden otherwise it's considered visible. Scroll count must 
            be a non-negative number.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.ICreateItemCallback">
            <summary>
            ICreateItemCallback interface.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.ICreateItemCallback.CreateItem(Infragistics.Collections.SparseArray,System.Int32)">
            <summary>
            Returns a new item to be assigned to a location in the array. CreateItem should not 
            set the new item at the location in the array. Array and relativeIndex are provided 
            for information only. Also the implementation should not modify array in any way 
            otherwise results will be undefined.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.SparseArray">
            <summary>
            SparseArray class.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class with the default factor
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class
            </summary>
            <param name="useOwnerData">If true then either all items should implement ISparseArrayItem interface or the derived class should override <see cref="M:Infragistics.Collections.SparseArray.GetOwnerData(System.Object)"/> and <see cref="M:Infragistics.Collections.SparseArray.SetOwnerData(System.Object,System.Object)"/> methods to maintain owner data for items.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class .
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class.
            </summary>
            <param name="factor"></param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Int32,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class.
            </summary>
            <param name="factor"></param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
            <param name="useOwnerData">If true then all the items must implement ISparseArrayItem interface.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Boolean,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.SparseArray"/> class.
            </summary>
            <param name="manageScrollCounts"></param>
            <param name="factor"></param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.#ctor(System.Int32,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="factor"></param>
            <param name="growthFactor"></param>
            <param name="useOwnerData"></param>
            <param name="manageScrollCounts"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Expand(System.Int32)">
            <summary>
            Expands the array to the new count. New count must be greater than or equal to the 
            current count. This has the same logical effect as adding new count - current count 
            number of null items at the end of the array.
            </summary>
            <param name="newCount"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Add(System.Object)">
            <summary>
            Adds the speicifed item at the end of the collection.
            </summary>
            <param name="item"></param>
            <returns>The index at which the item was added.</returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the specified location in the array.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.AddRange(System.Collections.ICollection)">
            <summary>
            Adds items in the specified collection to the end of the collection.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts items in the specified collection to the collection at the specified index.
            </summary>
            <param name="index"></param>
            <param name="items"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Move(System.Object,System.Int32)">
            <summary>
            Moves the specified item to a new location.
            </summary>
            <param name="item">Item to move.</param>
            <param name="newIndex">New location of the item.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the itemIndex to newIndex.
            </summary>
            <param name="itemIndex">Item at this index will be moved.</param>
            <param name="newIndex">Item will be moved to this index.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.IndexOf(System.Object)">
            <summary>
            Retruns the index of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes count number of items starting at the specified index in the array.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Remove(System.Object)">
            <summary>
            Removes the specified item. If the item doesn't exist in the collection, it does nothing.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Contains(System.Object)">
            <summary>
            Returns true if the specified item is contained in the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Clear">
            <summary>
            Removes all items from the array.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements from this collection to the specified array starting at index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.CopyTo(System.Array,System.Int32,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Copies all the elements from this collection to the specified array starting at index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.ToArray">
            <summary>
            Returns a new array containing all the elements of this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.ToArray(System.Type)">
            <summary>
            Returns a new array of specified type containing all the elements of this collection.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index. If the item at the specified index is null 
            and createItemCallback parameter is non-null, it will call CreateItem on the 
            callback to create it and set it on the array at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItem(System.Int32,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Gets the item at the specified index. If the item at the specified index is null 
            and createItemCallback parameter is non-null, it will call CreateItem on the 
            callback to create it and set it on the array at the specified index.
            </summary>
            <param name="index"></param>
            <param name="createItemCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Reverse">
            <summary>
            Reverses the order of items in the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of items in the specified range.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Sort">
            <summary>
            Sorts the array.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the array.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.SortGeneric``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the array using generic array to achieve slightly better performance.
            </summary>
            <typeparam name="T">The array is assumed to contain objects of type T.</typeparam>
            <param name="comparer">Comparer to compare the elements of the array with.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.Compact">
            <summary>
            Removes data structures allocated for empty slots in the sparse array.
            </summary>
            <remarks>
            <para class="body">
            Over time setting non-null slots to null can result in sparse array holding onto
            data structures that are not necessary since all the associated slots are null
            values. Calling this method will cause the sparse array to release those data 
            structures.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetOwnerData(System.Object)">
            <summary>
            Returns the owner data of the item. Derived class can override <b>GetOwnerData</b> and <b>SetOwnerData</b> to support owner data without having to implement ISparseArrayItem interface on the items.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.SetOwnerData(System.Object,System.Object)">
            <summary>
            Sets the owner data on item. Derived class can override <b>GetOwnerData</b> and <b>SetOwnerData</b> to support owner data without having to implement ISparseArrayItem interface on the items.
            </summary>
            <param name="item"></param>
            <param name="ownerData"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetVisibleCount">
            <summary>
            Returns the visible count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetScrollCount">
            <summary>
            Returns the scroll count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetVisibleIndexOf(Infragistics.Collections.ISparseArrayMultiItem)">
            <summary>
            Returns the visible index associted with the specified item. Item must be contained 
            within the array. If the item is hidden, that is it's ScrollCount is 0, the this
            method returns -1.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetVisibleIndexOf(Infragistics.Collections.ISparseArrayMultiItem,System.Boolean)">
            <summary>
            Returns the visible index associted with the specified item. Item must be contained 
            within the array.
            </summary>
            <param name="item"></param>
            <param name="ignoreItemHiddenState">If false then returns -1 if the item is hidden. 
            If true, returns the visible index of item as it would have been if it were visible.
            This parameter doesn't have any effect on the returned value if the item is not hidden.
            </param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetVisibleIndexOf(System.Int32,System.Boolean)">
            <summary>
            Gets the visible index of the item at the specified index. If the item hasn't been allocated
            yet then it assumes it's visible.
            </summary>
            <param name="itemIndex">Index of the item in the sparse array.</param>
            <param name="ignoreItemHiddenState">If false and the item is hidden, returns -1. Otherwise returns
            the visible index as if it were visible.</param>
            <returns>Visible index.</returns>
            <remarks>
            <para class="body">
            This method is typically used when the item at a specific index hasn't been allocated yet
            and one needs to calculate its visible index.
            </para>
            </remarks>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetScrollIndexOf(Infragistics.Collections.ISparseArrayMultiItem)">
            <summary>
            Gets the scroll index of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetScrollIndexOf(Infragistics.Collections.ISparseArrayMultiItem,System.Boolean)">
            <summary>
            Gets the scroll index of the specified item.
            </summary>
            <param name="item"></param>
            <param name="ignoreItemHiddenState">If false then returns -1 if the item is hidden. 
            If true, returns the visible index of item as it would have been if it were visible.
            This parameter doesn't have any effect on the returned value if the item is not hidden.
            </param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItemAtVisibleIndexOffset(Infragistics.Collections.ISparseArrayMultiItem,System.Int32,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns offset'th visible item from startItem. StartItem can be hidden in which case
            it will start from the next visible item. Offset can be 0. If the resulting visible
            index is out of bounds, returns null.
            </summary>
            <param name="startItem"></param>
            <param name="offset"></param>
            <param name="createItemCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItemAtVisibleIndex(System.Int32,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns the item at the specified visible index. This method returns null if the visible index is out of bounds.
            </summary>
            <param name="visibleIndex">Visible index at which to get the item.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified visible index if none exists at that visible index.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItemAtScrollIndex(System.Int32,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns the item at the specified scroll index. This method returns null if the scroll index is out of bounds.
            </summary>
            <param name="scrollIndex">Scroll index at which to get the item.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified scroll index if none exists at that scroll index.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItemContainingScrollIndex(System.Int32@,Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns the item at the specified scroll index. This method returns null if the scroll index is out of bounds.
            </summary>
            <param name="scrollIndex">Scroll index at which to get the item. It will be modified to be the offset into the item's descendants.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified scroll index if none exists at that scroll index.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetItemAtScrollIndexHelper(System.Int32,Infragistics.Collections.ICreateItemCallback,System.Boolean,System.Int32@)">
            <summary>
            Returns the item at the specified scroll index. This method returns null if the scroll index is out of bounds.
            </summary>
            <param name="scrollIndex">Visible index at which to get the item.</param>
            <param name="createItemCallback">Optional call back to create the item at the specified scroll index if none exists at that scroll index.</param>
            <param name="traverseHierarchy">If false then the method return the item in this sparse array that contains the 
            specified scroll index. If true then it may traverse down the sparse array hierarchy to get the item at the
            specified scroll index from a sparse array that's at a lower level.</param>
            <param name="offsetIntoItem">If traverseHierarchy is false then this will be set to the scroll index relative 
            to the returned item.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.NotifyItemScrollCountChanged(Infragistics.Collections.ISparseArrayMultiItem)">
            <summary>
            Whenever a scroll count of an item contained within this collection is changed, 
            the collection must be notified of the change. If not notified of such a change,
            behavior of various scroll and visible index related methods will be undefined.
            </summary>
            <param name="item">Item whose scroll count changed.</param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.DirtyScrollCountInfo">
            <summary>
            Dirties scroll count info for the whole collection so next time it will be re-calculated.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.OnScrollCountChanged">
            <summary>
            Called by the sparse array whenever visible count or scroll count changes or is dirtied. Default implementation does nothing. This may get called multiple times for the same change as well as may get called even when the count doesn't change but is simply dirtied.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.OnItemCreated(System.Object,System.Int32)">
            <summary>
            Called when the sparese array creates an item by calling CreateItem
            on the ICreateItemCallback instance that gets passed into the method
            that initiates the creatio of the item (like GetItem method for example).
            </summary>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.OnDeserializationComplete">
            <summary>
            Sets the owner data on all the items contained in the tree. Typically you do not 
            need to call this as the sprase array automatically manages the owner data as you
            add and remove items. This is useful if you deserialize the sparse array and
            need to make sure that the owner data are set properly on the contained items.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetVisibleItems(Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns all the visible items. New items will be created to fill null slots via
            createItemCallback parameter if it's non-null.
            </summary>
            <param name="createItemCallback">Used to create items to fill null slots. If null, null items will be skipped.</param>
            <returns>Visible items in this sparse array.</returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetEnumerator">
            <summary>
            Returns an instance of IEnumerator that can be used to enumerate through all the 
            elements of this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.SparseArray.GetEnumerator(Infragistics.Collections.ICreateItemCallback)">
            <summary>
            Returns an instance of IEnumerator that can be used to enumerate through all the 
            elements of this collection. New elements will be created to fill null slots via
            createItemCallback parameter if it's non-null.
            </summary>
            <param name="createItemCallback"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.Count">
            <summary>
            Retruns the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.IsSynchronized">
            <summary>
            Indicates whether this collection is synchronized. Always returns false.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize thread access.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.NonNullItems">
            <summary>
            Returns a new instance of enumerable that can be used to enumerate through only the non-null items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.SparseArray.InCalculatingScrollCount">
            <summary>
            Indicates whether the sparse array is currently in the process of calculating its scroll count.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.SparseArray.VisibleItemsEnumerator">
            <summary>
            Enumerates visible items in the sparse array. If createItemCallback is specified,
            new items are created to fill null slots otherwise null slots are ignored even
            though they are considered to be visible.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Primitives.SystemResourceId">
            <summary>
            An enum that identifies system colors and associated brushes for use by <see cref="T:Infragistics.Controls.Primitives.SystemResourceProvider"/>
            </summary>
            <seealso cref="T:Infragistics.Controls.Primitives.SystemResourceProvider"/>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ActiveBorderBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.ActiveBorderColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ActiveBorderColor">
            <summary>
            The SystemColors.ActiveBorderColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ActiveCaptionBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.ActiveCaptionColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ActiveCaptionColor">
            <summary>
            The SystemColors.ActiveCaptionColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ActiveCaptionTextBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.ActiveCaptionTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ActiveCaptionTextColor">
            <summary>
            The SystemColors.ActiveCaptionTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.AppWorkspaceBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.AppWorkspaceColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.AppWorkspaceColor">
            <summary>
            The SystemColors.AppWorkspaceColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.ControlColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlColor">
            <summary>
            The SystemColors.ControlColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlDarkBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.ControlDarkColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlDarkColor">
            <summary>
            The SystemColors.ControlDarkColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlDarkDarkBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.ControlDarkDarkColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlDarkDarkColor">
            <summary>
            The SystemColors.ControlDarkDarkColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlLightBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.ControlLightColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlLightColor">
            <summary>
            The SystemColors.ControlLightColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlLightLightBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.ControlLightLightColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlLightLightColor">
            <summary>
            The SystemColors.ControlLightLightColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlTextBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.ControlTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ControlTextColor">
            <summary>
            The SystemColors.ControlTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.DesktopBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.DesktopColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.DesktopColor">
            <summary>
            The SystemColors.DesktopColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.GrayTextBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.GrayTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.GrayTextColor">
            <summary>
            The SystemColors.GrayTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.HighlightBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.HighlightColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.HighlightColor">
            <summary>
            The SystemColors.HighlightColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.HighlightTextBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.HighlightTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.HighlightTextColor">
            <summary>
            The SystemColors.HighlightTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.InfoBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.InfoColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.InfoColor">
            <summary>
            The SystemColors.InfoColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.InfoTextBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.InfoTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.InfoTextColor">
            <summary>
            The SystemColors.InfoTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.InactiveBorderBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.InactiveBorderColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.InactiveBorderColor">
            <summary>
            The SystemColors.InactiveBorderColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.InactiveCaptionBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.InactiveCaptionColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.InactiveCaptionColor">
            <summary>
            The SystemColors.InactiveCaptionColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.InactiveCaptionTextBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.InactiveCaptionTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.InactiveCaptionTextColor">
            <summary>
            The SystemColors.InactiveCaptionTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.MenuBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.MenuColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.MenuColor">
            <summary>
            The SystemColors.MenuColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.MenuTextBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.MenuTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.MenuTextColor">
            <summary>
            The SystemColors.MenuTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ScrollBarBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.ScrollBarColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.ScrollBarColor">
            <summary>
            The SystemColors.ScrollBarColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.WindowBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.WindowColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.WindowColor">
            <summary>
            The SystemColors.WindowColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.WindowFrameBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.WindowFrameColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.WindowFrameColor">
            <summary>
            The SystemColors.WindowFrameColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.WindowTextBrush">
            <summary>
            A SolidColorBrush created using the SystemColors.WindowTextColor color.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.SystemResourceId.WindowTextColor">
            <summary>
            The SystemColors.WindowTextColor color.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Primitives.SystemResourceProvider">
            <summary>
            Class that exposes an indexer to retrieve system colors and their associated brushes identified by <see cref="T:Infragistics.Controls.Primitives.SystemResourceId"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.SystemResourceProvider.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Infragistics.Controls.Primitives.SystemResourceProvider"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.SystemResourceProvider.GetResource(Infragistics.Controls.Primitives.SystemResourceId)">
            <summary>
            Returns a value for a specific id
            </summary>
            <param name="id">The id of the resource</param>
            <returns>The resource identified by the id or null.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.SystemResourceProvider.InvalidateResources">
            <summary>
            Called to invalidate any cached values
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.SystemResourceProvider.OnSystemColorsChanged">
            <summary>
            Called when the system colors have changed
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.SystemResourceProvider.VerifyCachedResources">
            <summary>
            Checks all cached resources to make sure that they are still valid. 
            </summary>
            <remarks>
            <para class="note"><b>Note</b>: if any resources are invalid then all instances of <see cref="T:Infragistics.Controls.Primitives.SystemResourceProvider"/> will bump their <see cref="P:Infragistics.Controls.Primitives.ResourceProvider.ResourceVersion"/> property and raise a property change notification for their indexer ('Item[]').</para>
            </remarks>
            <returns>True is all cached resources are still valid or false if any one of them was cleared because it wasn't still valid.</returns>
        </member>
        <member name="T:Infragistics.Collections.TypedEnumerable`1">
            <summary>
            Typed enumerable that wraps a non-typed enumerable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.Collections.TypedEnumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Constructor.
            </summary>
            <param name="e">Enumerable</param>
        </member>
        <member name="T:Infragistics.Controls.Primitives.ValueConverterGroup">
            <summary>
            Custom value converter where the results are based upon the value converters in the <see cref="P:Infragistics.Controls.Primitives.ValueConverterGroup.Converters"/> collection
            </summary>
            <remarks>
            <p class="body">This value converter will enuerate the converters in the <see cref="P:Infragistics.Controls.Primitives.ValueConverterGroup.Converters"/> collection when its 
            Convert and ConvertBack method are invoked. The first converter that returns a value other than DependencyProperty.UnsetValue will 
            be returned from the method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ValueConverterGroup.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Primitives.ValueConverterGroup"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ValueConverterGroup.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the result of the first converter in the <see cref="P:Infragistics.Controls.Primitives.ValueConverterGroup.Converters"/> collection that returns a value for the specified parameters.
            </summary>
            <param name="value">The value to convert</param>
            <param name="targetType">The destination type of the conversion</param>
            <param name="parameter">The parameter for the conversion</param>
            <param name="culture">The culture to use during the conversion</param>
            <returns>The result of the first converter to return a value; otherwise DependencyProperty.UnsetValue if there is no converted value.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.ValueConverterGroup.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the result of the first converter in the <see cref="P:Infragistics.Controls.Primitives.ValueConverterGroup.Converters"/> collection that returns a value for the specified parameters.
            </summary>
            <param name="value">The value to convert</param>
            <param name="targetType">The destination type of the conversion</param>
            <param name="parameter">The parameter for the conversion</param>
            <param name="culture">The culture to use during the conversion</param>
            <returns>The result of the first converter to return a value; otherwise DependencyProperty.UnsetValue if there is no converted value.</returns>
        </member>
        <member name="P:Infragistics.Controls.Primitives.ValueConverterGroup.Converters">
            <summary>
            The collection of converters that will be used to convert the value.
            </summary>
        </member>
        <member name="T:Infragistics.VisualStateUtilities">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:Infragistics.VisualStateUtilities.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:Infragistics.Collections.WeakDictionary`2">
            <summary>
            IDictionary implementation that manages keys and/or values as weak references so they can be
            garbage collected.
            </summary>
            <typeparam name="TKey">Type of keys</typeparam>
            <typeparam name="TValue">Type of values</typeparam>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.#ctor(System.Boolean,System.Boolean,System.Int32,System.Single,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakDictionary`2"/>.
            </summary>
            <param name="manageKeysAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="manageValuesAsWeakReferences">Specifies whether to manage keys as weak references.</param>
            <param name="initialCapacity">Initial capacity.</param>
            <param name="loadFactor">Specifies load factor. Must be greater than 0 and less than or equal to 1.</param>
            <param name="keyComparer">Comparer for compring keys.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.CreateKeyWeakReference(`0)">
            <summary>
            Creates a weak reference for the key.
            </summary>
            <param name="key">Key object.</param>
            <returns>Weak reference to the key.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.CreateValueWeakReference(`1)">
            <summary>
            Creates a weak reference for the key.
            </summary>
            <param name="value">Value object.</param>
            <returns>Weak reference to the value.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.ExpandCollapseHelper(System.Boolean)">
            <summary>
            Expands or contracts the size of storage based on the new count after an operation,
            like add, remove or clear, is performed.
            </summary>
            <param name="expandOnly">Specifies that the storage should only be expanded, and not contracted.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry to the dictionary. If an entry with the specified key already exists, 
            this method throws an exception.
            </summary>
            <param name="key">Key of the entry to add.</param>
            <param name="value">Value to associate with the key.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Clear">
            <summary>
            Removes all entries from the dictionary.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Compact(System.Boolean)">
            <summary>
            Removes entries from the dictionary where keys are no longer alive (have been garbage 
            collected). Note that keys can get garbage collected during the process of compacting 
            and therefore it's not guarrenteed that all the entries in the dictionary will be 
            with live keys after this operation is completed.
            </summary>
            <param name="removeEntriesWithNullValues">Whether to also remove entries where
            value is null or has been garbage collected.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if an entry with the specified key exists in the dictionary.
            </summary>
            <param name="key">Key to check for existence.</param>
            <returns>Returns true if an entry with the specified key exists in the dictionary.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key. Does nothing if the specified key doesn't exist.
            </summary>
            <param name="key">Key of the entry to remove.</param>
            <returns>True if an entry was removed. False if entry with the specified key was not found.</returns>
        </member>
        <member name="M:Infragistics.Collections.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key. If the entry doesn't exist, returns false.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key. Set will add an entry for the key 
            if it doesn't already exist.
            </summary>
            <param name="key">Value associated with this key will be returned.</param>
            <returns>Value associated with the specified key.</returns>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Count">
            <summary>
            Returns the number of entries in the dictionary. Note that this will not take into account 
            any garbage collected items - they will be included in the count.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Keys">
            <summary>
            Returns the keys in the dictionary. Only keys with non-null values are returned.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.Values">
            <summary>
            Returns the values in the dictionary. Only values with non-null keys are returned.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
            <summary>
            Returns the keys in the dictionary.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
            <summary>
            Returns the values in the dictionary.
            </summary>
        </member>
        <member name="T:Infragistics.Collections.WeakList`1">
            <summary>
            A strongly typed list class that manages items using WeakReferences so the items in this list
            can be garbage collected. Items collected by garbage collector will be replaced
            by null. The <see cref="M:Infragistics.Collections.WeakList`1.Compact"/> method can be used to remove entries
            from the list that have been garbage collected.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds specified items to the list.
            </summary>
            <param name="items">Items to add to the list.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Compact">
            <summary>
            Removes entries from the list that are no longer alive. Note that entries can
            get garbase collected during the process of compacting and therefore it's not
            guarrenteed that all the items will remain alive after this method returns.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Contains(`0)">
            <summary>
            Returns true if the specified item is contained within this list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items from the list to the specified array starting at index location in the specified array.
            </summary>
            <param name="array">The array to which to copy items.</param>
            <param name="index">The location in the array at which to start copying.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.GetEnumerator">
            <summary>
            Returns an enumerator for iterating the live items.
            </summary>
            <returns>An enumerator for the <see cref="T:Infragistics.Collections.WeakList`1"/></returns>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item. If the item doesn't exist then returns -1.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified item at the specified location in the list.
            </summary>
            <param name="index">The location at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from the list. If the item doesn't 
            exist in the list then this method does nothing.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.RemoveAt(System.Int32)">
            <summary>
            Removes item at specified index.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a contiguous block of items from the collection.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for enumerating this list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified location.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.SyncRoot">
            <summary>
            Returns the object with which to syncrhonize.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Returns true if the list is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Returns true if the list is fixed size.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.System#Collections#IList#IsReadOnly">
            <summary>
            Returns true if the list is read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Returns true if this list is syncrhonized.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Enumerator.#ctor(Infragistics.Collections.WeakList{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="list">List to enumerate.</param>
        </member>
        <member name="M:Infragistics.Collections.WeakList`1.Enumerator.MoveNext">
            <summary>
            Moves to next item.
            </summary>
            <returns>Returns false if the enumerator is exhausted.</returns>
        </member>
        <member name="P:Infragistics.Collections.WeakList`1.Enumerator.Current">
            <summary>
            Returns the current item.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.WeakSet`1.#ctor">
            <summary>
            Constructor. Initializes a new instance of <see cref="T:Infragistics.Collections.WeakSet`1"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Primitives.XamlHelper">
            <summary>
            Static class with attached properties to help with cross platform development with WPF and Silverlight.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Primitives.XamlHelper.CanContentScrollProperty">
            <summary>
            Identifies the CanContentScroll attached dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.GetCanContentScroll(System.Windows.DependencyObject)">
            <summary>
            Used to change the CanContentScroll value of a ScrollViewer in WPF.
            </summary>
            <param name="d">The object whose value is to be returned</param>
            <seealso cref="F:Infragistics.Controls.Primitives.XamlHelper.CanContentScrollProperty"/>
            <seealso cref="M:Infragistics.Controls.Primitives.XamlHelper.SetCanContentScroll(System.Windows.DependencyObject,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.SetCanContentScroll(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the attached CanContentScroll DependencyProperty.
            </summary>
            <param name="d">The object whose value is to be modified</param>
            <param name="value">The new value</param>
            <seealso cref="F:Infragistics.Controls.Primitives.XamlHelper.CanContentScrollProperty"/>
            <seealso cref="M:Infragistics.Controls.Primitives.XamlHelper.GetCanContentScroll(System.Windows.DependencyObject)"/>
        </member>
        <member name="F:Infragistics.Controls.Primitives.XamlHelper.FocusableProperty">
            <summary>
            Identifies the Focusable attached dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.GetFocusable(System.Windows.DependencyObject)">
            <summary>
            Used to change the Focusable value of a UIElement in WPF.
            </summary>
            <param name="d">The object whose value is to be returned</param>
            <seealso cref="F:Infragistics.Controls.Primitives.XamlHelper.FocusableProperty"/>
            <seealso cref="M:Infragistics.Controls.Primitives.XamlHelper.SetFocusable(System.Windows.DependencyObject,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.SetFocusable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the attached Focusable DependencyProperty.
            </summary>
            <param name="d">The object whose value is to be modified</param>
            <param name="value">The new value</param>
            <seealso cref="F:Infragistics.Controls.Primitives.XamlHelper.FocusableProperty"/>
            <seealso cref="M:Infragistics.Controls.Primitives.XamlHelper.GetFocusable(System.Windows.DependencyObject)"/>
        </member>
        <member name="F:Infragistics.Controls.Primitives.XamlHelper.StaysOpenProperty">
            <summary>
            Identifies the WPF Popup StaysOpen attached dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.GetStaysOpen(System.Windows.DependencyObject)">
            <summary>
            Used to change the StaysOpen value of a Popup in WPF.
            </summary>
            <param name="d">The object whose value is to be returned</param>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.SetStaysOpen(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the attached StaysOpen DependencyProperty.
            </summary>
            <param name="d">The object whose value is to be modified</param>
            <param name="value">The new value</param>
        </member>
        <member name="F:Infragistics.Controls.Primitives.XamlHelper.AllowsTransparencyProperty">
            <summary>
            Identifies the WPF Popup AllowsTransparency attached dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.GetAllowsTransparency(System.Windows.DependencyObject)">
            <summary>
            Used to change the AllowsTransparency value of a popup in WPF.
            </summary>
            <param name="d">The object whose value is to be returned</param>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.SetAllowsTransparency(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the attached AllowsTransparency DependencyProperty.
            </summary>
            <param name="d">The object whose value is to be modified</param>
            <param name="value">The new value</param>
        </member>
        <member name="F:Infragistics.Controls.Primitives.XamlHelper.SnapsToDevicePixelsProperty">
            <summary>
            Identifies the SnapsToDevicePixels attached dependency property
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.GetSnapsToDevicePixels(System.Windows.DependencyObject)">
            <summary>
            Used to change the SnapsToDevicePixels value of a UIElement in WPF.
            </summary>
            <param name="d">The object whose value is to be returned</param>
            <seealso cref="F:Infragistics.Controls.Primitives.XamlHelper.SnapsToDevicePixelsProperty"/>
            <seealso cref="M:Infragistics.Controls.Primitives.XamlHelper.SetSnapsToDevicePixels(System.Windows.DependencyObject,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.SetSnapsToDevicePixels(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the attached SnapsToDevicePixels DependencyProperty.
            </summary>
            <param name="d">The object whose value is to be modified</param>
            <param name="value">The new value</param>
            <seealso cref="F:Infragistics.Controls.Primitives.XamlHelper.SnapsToDevicePixelsProperty"/>
            <seealso cref="M:Infragistics.Controls.Primitives.XamlHelper.GetSnapsToDevicePixels(System.Windows.DependencyObject)"/>
        </member>
        <member name="F:Infragistics.Controls.Primitives.XamlHelper.UpdateBindingOnTextPropertyChangedProperty">
            <summary>
            Identifies the UpdateBindingOnTextPropertyChanged attached dependency property which can be set on a TextBox
            to control whether changes to the TextBox's Text property forces an immediate update of the binding Target the same way
            that an UpdateSourceTrigger = PropertyChanged works in WPF.
            </summary>
            <seealso cref="M:Infragistics.Controls.Primitives.XamlHelper.GetUpdateBindingOnTextPropertyChanged(System.Windows.DependencyObject)"/>
            <seealso cref="M:Infragistics.Controls.Primitives.XamlHelper.SetUpdateBindingOnTextPropertyChanged(System.Windows.DependencyObject,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.GetUpdateBindingOnTextPropertyChanged(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the attached UpdateBindingOnTextPropertyChanged DependencyProperty.
            </summary>
            <param name="d">The object whose value is to be returned</param>
            <seealso cref="F:Infragistics.Controls.Primitives.XamlHelper.UpdateBindingOnTextPropertyChangedProperty"/>
            <seealso cref="M:Infragistics.Controls.Primitives.XamlHelper.SetUpdateBindingOnTextPropertyChanged(System.Windows.DependencyObject,System.Boolean)"/>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.SetUpdateBindingOnTextPropertyChanged(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the attached UpdateBindingOnTextPropertyChanged DependencyProperty.
            </summary>
            <param name="d">The object whose value is to be modified</param>
            <param name="value">The new value</param>
            <seealso cref="F:Infragistics.Controls.Primitives.XamlHelper.UpdateBindingOnTextPropertyChangedProperty"/>
            <seealso cref="M:Infragistics.Controls.Primitives.XamlHelper.GetUpdateBindingOnTextPropertyChanged(System.Windows.DependencyObject)"/>
        </member>
        <member name="T:Infragistics.Controls.Primitives.XamlHelper.NullableConverter`1">
            <summary>
            Custom converter for converting a nullable type to/from string.
            </summary>
            <typeparam name="T">The value type that is the underlying type for the nullable</typeparam>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.NullableConverter`1.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Primitives.XamlHelper.NullableConverter`1"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.NullableConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type <typeparamref name="T"/>.
            </summary>
            <param name="context">An object that provides format context</param>
            <param name="sourceType">The type to convert from</param>
            <returns>True for <typeparamref name="T"/> and string.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.NullableConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of type <typeparamref name="T"/> to the specified destination type.
            </summary>
            <param name="context">An object that provides format context</param>
            <param name="destinationType">The type to which to convert an instance of <typeparamref name="T"/></param>
            <returns>True for <typeparamref name="T"/> and string.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.NullableConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to the type <typeparamref name="T"/>
            </summary>
            <param name="context">Provide format context</param>
            <param name="culture">The culture to use in the conversion</param>
            <param name="value">The source value to convert</param>
            <returns>A nullable object of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.NullableConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts an instance of <typeparamref name="T"/> to the specified destination type
            </summary>
            <param name="context">Provides format context</param>
            <param name="culture">The culture to use in the conversion</param>
            <param name="value">The instance to convert</param>
            <param name="destinationType">The destination type</param>
            <returns>An instance of the specified destination type for the specified value of type <typeparamref name="T"/></returns>
        </member>
        <member name="T:Infragistics.Controls.Primitives.XamlHelper.DateTimeTypeConverter">
            <summary>
            Custom converter for converting a DateTime type to/from string.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.DateTimeTypeConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Primitives.XamlHelper.DateTimeTypeConverter"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.DateTimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to DateTime.
            </summary>
            <param name="context">An object that provides format context</param>
            <param name="sourceType">The type to convert from</param>
            <returns>True for DateTime and string.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.DateTimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert a DateTime to the specified destination type.
            </summary>
            <param name="context">An object that provides format context</param>
            <param name="destinationType">The type to which to a DateTime</param>
            <returns>True for DateTime and string.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.DateTimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to the DateTime
            </summary>
            <param name="context">Provide format context</param>
            <param name="culture">The culture to use in the conversion</param>
            <param name="value">The source value to convert</param>
            <returns>A DateTime</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.DateTimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a DateTime to the specified destination type
            </summary>
            <param name="context">Provides format context</param>
            <param name="culture">The culture to use in the conversion</param>
            <param name="value">The instance to convert</param>
            <param name="destinationType">The destination type</param>
            <returns>An instance of the specified destination type for the specified DateTime</returns>
        </member>
        <member name="T:Infragistics.Controls.Primitives.XamlHelper.Int32TypeConverter">
            <summary>
            Custom converter for converting a Int32 type to/from string.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.Int32TypeConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Primitives.XamlHelper.Int32TypeConverter"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.Int32TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to DateTime.
            </summary>
            <param name="context">An object that provides format context</param>
            <param name="sourceType">The type to convert from</param>
            <returns>True for DateTime and string.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.Int32TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert a DateTime to the specified destination type.
            </summary>
            <param name="context">An object that provides format context</param>
            <param name="destinationType">The type to which to a DateTime</param>
            <returns>True for DateTime and string.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.Int32TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to the DateTime
            </summary>
            <param name="context">Provide format context</param>
            <param name="culture">The culture to use in the conversion</param>
            <param name="value">The source value to convert</param>
            <returns>A DateTime</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.Int32TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a DateTime to the specified destination type
            </summary>
            <param name="context">Provides format context</param>
            <param name="culture">The culture to use in the conversion</param>
            <param name="value">The instance to convert</param>
            <param name="destinationType">The destination type</param>
            <returns>An instance of the specified destination type for the specified DateTime</returns>
        </member>
        <member name="T:Infragistics.Controls.Primitives.XamlHelper.SingleTypeConverter">
            <summary>
            Custom converter for converting a Single type to/from string.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.SingleTypeConverter.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Controls.Primitives.XamlHelper.SingleTypeConverter"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.SingleTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to DateTime.
            </summary>
            <param name="context">An object that provides format context</param>
            <param name="sourceType">The type to convert from</param>
            <returns>True for DateTime and string.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.SingleTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert a DateTime to the specified destination type.
            </summary>
            <param name="context">An object that provides format context</param>
            <param name="destinationType">The type to which to a DateTime</param>
            <returns>True for DateTime and string.</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.SingleTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to the DateTime
            </summary>
            <param name="context">Provide format context</param>
            <param name="culture">The culture to use in the conversion</param>
            <param name="value">The source value to convert</param>
            <returns>A DateTime</returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.XamlHelper.SingleTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a DateTime to the specified destination type
            </summary>
            <param name="context">Provides format context</param>
            <param name="culture">The culture to use in the conversion</param>
            <param name="value">The instance to convert</param>
            <param name="destinationType">The destination type</param>
            <returns>An instance of the specified destination type for the specified DateTime</returns>
        </member>
        <member name="T:Infragistics.Collections.BindableItemCollection`1">
            <summary>
            A Collection that contains items that are bound to a DataSource. 
            Note: all items might not exist in the collection at a given time, as it only pulls down items as they're requested.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Infragistics.Collections.CollectionBase`1">
            <summary>
            A base collection class that provides hooks for derived classes to override base functionality.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Infragistics.ICollectionBase`1">
            <summary>
            A base collection interface that provides hooks for derived classes to override base functionality.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Infragistics.ICollectionBase">
            <summary>
            A base collection interface that provides hooks for derived classes to override base functionality.
            </summary>
        </member>
        <member name="M:Infragistics.ICollectionBase.AddItemSilently(System.Int32,System.Object)">
            <summary>
            Adds the item at the specified index, without triggering any events. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.ICollectionBase.RemoveItemSilently(System.Int32)">
            <summary>
            Removes the item at the specified index, without triggering any events. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ICollectionBase.ResetItemsSilently">
            <summary>
            Removes all items from the collection without firing any events.
            </summary>
        </member>
        <member name="M:Infragistics.ICollectionBase`1.AddItemSilently(System.Int32,`0)">
            <summary>
            Adds the item at the specified index, without triggering any events. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.CollectionBase`1"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.OnNotifyCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when this collection changes.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.AddItem(System.Int32,`0)">
            <summary>
            Adds the item at the specified index. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.InsertItem(System.Int32,`0)">
            <summary>
            Adds an item to the collection at a given index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.AddItemSilently(System.Int32,`0)">
            <summary>
            Adds the item at the specified index, without triggering any events. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.OnItemAdded(System.Int32,`0)">
            <summary>
            Invoked when an Item is added at the specified index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.RemoveItemSilently(System.Int32)">
            <summary>
            Removes the item at the specified index, without triggering any events. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.OnItemRemoved(System.Int32,`0)">
            <summary>
            Invoked when an Item is removed from the collection.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.ResetItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.ResetItemsSilently">
            <summary>
            Removes all items from the collection without firing any events.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.OnResetItems">
            <summary>
            Invoked when all items are cleared from a collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.ReplaceItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index with the specified item.
            </summary>
            <param name="index"></param>
            <param name="newItem"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.GetCount">
            <summary>
            Retrieves the amount of items in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.OnPropertyChanged(System.String)">
            <summary>
            Occurs when a property changes.
            </summary>
            <param name="propertyName">The name of the changed property.</param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Add(`0)">
            <summary>
            Adds the item to the end of the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Contains(`0)">
            <summary>
            Determines if the collection contains the specified item.
            </summary>
            <param name="item"></param>
            <returns>True if the item is in the collection.</returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Remove(`0)">
            <summary>
            Removes the specified item. 
            </summary>
            <param name="item"></param>
            <returns>True if the item was removed.</returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.GetEnumerator">
            <summary>
            Gets the <see cref="T:System.Collections.IEnumerator"/> for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to the specified array, starting at the specified index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Infragistics.Collections.CollectionBase`1"/> and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBase`1.Dispose">
            <summary>
            Releases the unmanaged and managed resources used by the <see cref="T:Infragistics.Collections.CollectionBase`1"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.CollectionBase`1.Items">
            <summary>
            Gets the unerlying collection used to store all items.
            </summary>
        </member>
        <member name="E:Infragistics.Collections.CollectionBase`1.CollectionChanged">
            <summary>
            Fired when the collection changes.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.CollectionBase`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Collections.CollectionBase`1.Count">
            <summary>
            Gets the amount of items in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Collections.CollectionBase`1.IsReadOnly">
            <summary>
            Gets whether or not the collection is read only.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.BindableItemCollection`1.#ctor(Infragistics.IProvideDataItems{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.BindableItemCollection`1"/> class.
            </summary>
            <param name="owner">The object that will actually be providing the items of the collection.</param>
        </member>
        <member name="M:Infragistics.Collections.BindableItemCollection`1.GetCount">
            <summary>
            Retrieves the amount of items in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.BindableItemCollection`1.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.BindableItemCollection`1.AddBoundItem(System.Int32,`0)">
            <summary>
            Adds the item at the specified index. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.BindableItemCollection`1.AddItem(System.Int32,`0)">
            <summary>
            Adds the unbound item at the specified index. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.BindableItemCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Adds an item to the collection at a given index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Collections.BindableItemCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
            <returns>True if the item was removed.</returns>
        </member>
        <member name="M:Infragistics.Collections.BindableItemCollection`1.CreateItem">
            <summary>
            Creates a new object with a default underlying data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.BindableItemCollection`1.CreateItem(System.Object)">
            <summary>
            Creates a new object using the inputted data object.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.BindableItemCollection`1.RemoveRange(System.Collections.Generic.IList{`0})">
            <summary>
            Removes the specified list of items.
            </summary>
            <param name="itemsToRemove"></param>
        </member>
        <member name="T:Infragistics.Collections.CollectionBaseEnumerator`1">
            <summary>
            An <see cref="T:System.Collections.IEnumerator"/>  for the <see cref="T:Infragistics.Collections.CollectionBase`1"/> class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.Collections.CollectionBaseEnumerator`1.#ctor(Infragistics.Collections.CollectionBase{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Collections.CollectionBaseEnumerator`1"/> class.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Infragistics.Collections.CollectionBaseEnumerator`1.System#Collections#IEnumerator#MoveNext">
            <summary>
            Gets the next item in the Enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Collections.CollectionBaseEnumerator`1.System#Collections#IEnumerator#Reset">
            <summary>
             Resets the Enumerator.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.CollectionBaseEnumerator`1.Dispose">
            <summary>
            Disposes the <see cref="T:Infragistics.Collections.CollectionBaseEnumerator`1"/>
            </summary>
        </member>
        <member name="T:Infragistics.Collections.IKeyedItem">
            <summary>
            Classes should implement this interface to be used in KeyedItemsCollection
            </summary>
        </member>
        <member name="P:Infragistics.Collections.IKeyedItem.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="T:Infragistics.Collections.KeyedItemsCollection`1">
            <summary>
            Represents a modifiable collection of <see cref="T:Infragistics.Collections.IKeyedItem"/> objects.
            </summary>
            <remarks>The <see cref="T:Infragistics.Collections.IKeyedItem"/>s in KeyedItemsCollection can be accessed either via key or integer index.</remarks>
            <seealso cref="T:Infragistics.Collections.IKeyedItem"/>
        </member>
        <member name="M:Infragistics.Collections.KeyedItemsCollection`1.#ctor">
            <summary>
            Initialize a new KeyedChildsCollection
            </summary>
            <remarks>
            <p class="note"><b>Note: </b>An instance of this class is automatically created by the parent control. You do not normally need to create an instance of this class.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Collections.KeyedItemsCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts a new <see cref="T:Infragistics.Collections.IKeyedItem"/> at the specified index in the collection.
            </summary>
            <param name="index">The index at which to insert the IKeyedItem/&gt;</param>
            <param name="item">The IKeyedItem to insert in the collection</param>
        </member>
        <member name="M:Infragistics.Collections.KeyedItemsCollection`1.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Collections.KeyedItemsCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes an  <see cref="T:Infragistics.Collections.IKeyedItem"/> at the specified index.
            </summary>
            <param name="index">The index of the item in the collection to be removed.</param>
        </member>
        <member name="M:Infragistics.Collections.KeyedItemsCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces an item at the specified index in the collection 
            </summary>
            <param name="index">Index of the item to replace</param>
            <param name="item">The item to insert into the collection.</param>
        </member>
        <member name="M:Infragistics.Collections.KeyedItemsCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event
            </summary>
            <param name="e">The argument providing information about the collection change</param>
        </member>
        <member name="M:Infragistics.Collections.KeyedItemsCollection`1.ContainsKey(System.String)">
            <summary>
            Determines whether KeyedItemsCollection contains an <see cref="T:Infragistics.Collections.IKeyedItem"/> with the specified key
            </summary>
            <param name="key">The key if the <see cref="T:Infragistics.Collections.IKeyedItem"/> to check</param>
            <returns>True if the IKeyedItem with the specified key exists, otherwise false</returns>
        </member>
        <member name="M:Infragistics.Collections.KeyedItemsCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="P:Infragistics.Collections.KeyedItemsCollection`1.Item(System.String)">
            <summary>
            Returns the <see cref="T:Infragistics.Collections.IKeyedItem"/> with the specified key.
            </summary>
            <param name="key">The key</param>
            <returns>The <see cref="T:Infragistics.Collections.IKeyedItem"/> with the specified key or null if an <see cref="T:Infragistics.Collections.IKeyedItem"/> with the specified key was not found.</returns>
        </member>
        <member name="T:Infragistics.Collections.ReadOnlyKeyedChildsCollection`1">
            <summary>
            A read-only collection of <see cref="T:Infragistics.Collections.IKeyedItem"/>s.
            </summary>
            <seealso cref="T:Infragistics.Collections.IKeyedItem"/>
        </member>
        <member name="M:Infragistics.Collections.ReadOnlyKeyedChildsCollection`1.#ctor(Infragistics.Collections.KeyedItemsCollection{`0})">
            <summary>
            Creates a readonly Collection of IKeyedItem items from source collection
            </summary>
            <param name="keyedItemsCollection">Source KeyedItemsCollection</param>
        </member>
        <member name="T:Infragistics.CommandBase">
            <summary>
            The base class for commands.
            </summary>
        </member>
        <member name="M:Infragistics.CommandBase.OnCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:Infragistics.CommandBase.CanExecute(System.Object)">
            <summary>
            Returns True if the command can run at this time.
            </summary>
            <param name="parameter">The object where the command originated.</param>
            <returns>True if the command is executable.</returns>
        </member>
        <member name="M:Infragistics.CommandBase.Execute(System.Object)">
            <summary>
            Runs the command with the given parameter.
            </summary>
            <param name="parameter">An object containing any parameters for the command.</param>
        </member>
        <member name="M:Infragistics.CommandBase.Execute(Infragistics.Controls.CommandSource,Infragistics.ICommandTarget)">
            <summary>
            Runs the command with the given parameter.
            </summary>		
            <param name="source">The CommandSource that initiated the Command. </param>
            <param name="target">The object that is the target of the command.</param>
        </member>
        <member name="P:Infragistics.CommandBase.CommandSource">
            <summary>
            The CommandSource object that originated the command.
            </summary>
        </member>
        <member name="E:Infragistics.CommandBase.CanExecuteChanged">
            <summary>
            Event handler for the CanExecuteChanged event.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Commanding">
            <summary>
            An object that contains attached properties for hooking up commands to <see cref="T:System.Windows.FrameworkElement"/> objects.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Commanding.CommandProperty">
            <summary>
            An attached property that Gets/Sets the <see cref="T:Infragistics.Controls.CommandSource"/> that should be attached to a <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Commanding.GetCommand(System.Windows.FrameworkElement)">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.CommandSource"/> attached to a specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Commanding.SetCommand(System.Windows.FrameworkElement,Infragistics.Controls.CommandSource)">
            <summary>
            Sets the <see cref="T:Infragistics.Controls.CommandSource"/> that should be attached to the specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
            <param name="element"></param>
            <param name="command"></param>
        </member>
        <member name="F:Infragistics.Controls.Commanding.CommandsProperty">
            <summary>
            Gets a collection of <see cref="T:Infragistics.Controls.CommandSource"/> objects that should be attached to a specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Commanding.GetCommands(System.Windows.FrameworkElement)">
            <summary>
            Gets a collection of <see cref="T:Infragistics.Controls.CommandSource"/> objects that should be attached to a specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Commanding.SetCommands(System.Windows.FrameworkElement,Infragistics.CommandSourceCollection)">
            <summary>
            Sets a collection of <see cref="T:Infragistics.Controls.CommandSource"/> objects that should be attached to a specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
            <param name="elem"></param>
            <param name="commands"></param>
        </member>
        <member name="F:Infragistics.Controls.Commanding.CommandTargetProperty">
            <summary>
            An attached property that Gets/Sets the CommandTarget that should be attached to a <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Commanding.GetCommandTarget(System.Windows.FrameworkElement)">
            <summary>
            Gets the <see cref="T:Infragistics.ICommandTarget"/> that commands should be triggered off of. 
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Commanding.SetCommandTarget(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Sets the <see cref="T:Infragistics.ICommandTarget"/> that commands should be triggered off of.
            </summary>
            <param name="element"></param>
            <param name="commandTarget"></param>
        </member>
        <member name="T:Infragistics.CommandSourceManager">
            <summary>
            A static class that manages all registered <see cref="T:Infragistics.ICommandTarget"/> and <see cref="T:Infragistics.Controls.CommandSource"/> objects of an application.
            </summary>
        </member>
        <member name="M:Infragistics.CommandSourceManager.RegisterCommandTarget(Infragistics.ICommandTarget)">
            <summary>
            Registers the specified <see cref="T:Infragistics.ICommandTarget"/> with the <see cref="T:Infragistics.CommandSourceManager"/>
            </summary>
            <param name="target"></param>
            <remarks>
            Once registered, if a <see cref="T:Infragistics.Controls.CommandSource"/> is unable to resolve a target from walking up the VisualTree,
            it will turn to the <see cref="T:Infragistics.CommandSourceManager"/> to find all <see cref="T:Infragistics.ICommandTarget"/> objects that support the 
            given <see cref="T:System.Windows.Input.ICommand"/>
            </remarks>
        </member>
        <member name="M:Infragistics.CommandSourceManager.UnregisterCommandTarget(Infragistics.ICommandTarget)">
            <summary>
            Unregisters the specified <see cref="T:Infragistics.ICommandTarget"/> with the <see cref="T:Infragistics.CommandSourceManager"/>
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Infragistics.CommandSourceManager.GetTargets(System.Windows.Input.ICommand)">
            <summary>
            Gets a list of registered <see cref="T:Infragistics.ICommandTarget"/> objects that support the specified command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.CommandSourceManager.NotifyCanExecuteChanged(System.Type)">
            <summary>
            An <see cref="T:Infragistics.ICommandTarget"/> will generally invoke this method to notify all 
            registered commands that have the specific Target to check and see if it still can execute.
            </summary>
            <param name="commandType"></param>
        </member>
        <member name="M:Infragistics.CommandSourceManager.RegisterCommandSource(Infragistics.Controls.CommandSource,System.Windows.FrameworkElement)">
            <summary>
            Registers the specified CommandSource with the <see cref="T:Infragistics.CommandSourceManager"/>
            </summary>
            <param name="source"></param>
            <param name="elem"></param>
            <remarks>
            This method actually associates the source with a given element and resolves and attaches the event to the element.
            </remarks>
        </member>
        <member name="M:Infragistics.CommandSourceManager.UnregisterCommandSource(Infragistics.Controls.CommandSource)">
            <summary>
            Removes the source from the CommandSourceManager, and also removes the attached event handler.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Infragistics.Controls.CommandSource">
            <summary>
            An object that describes what kind of Command should be attached to a particular object, and what should trigger the command.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.CommandSource.ParameterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.CommandSource.Parameter"/> dependency property. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.CommandSource.ResolveCommand">
            <summary>
            Resolves the <see cref="T:System.Windows.Input.ICommand"/> that this <see cref="T:Infragistics.Controls.CommandSource"/> represents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.CommandSource.ResolveParameter(Infragistics.ICommandTarget)">
            <summary>
            This method resolves the parameter that should be passed to the <see cref="T:System.Windows.Input.ICommand"/>.  
            It will use the specified parameter and check with the specified <see cref="T:Infragistics.ICommandTarget"/> to 
            see what parameter should be used. 
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.CommandSource.Execute(Infragistics.ICommandTarget,System.Boolean)">
            <summary>
            Invokes the <see cref="T:System.Windows.Input.ICommand"/> that is attached to this <see cref="T:Infragistics.Controls.CommandSource"/>
            </summary>
            <param name="target">The <see cref="T:Infragistics.ICommandTarget"/> that the command should be invoked on. </param>
            <param name="canExecute">Whether or not that the <see cref="T:System.Windows.Input.ICommand"/> can exectue.</param>
        </member>
        <member name="M:Infragistics.Controls.CommandSource.InvokeCommand(System.Boolean)">
            <summary>
            Invokes the <see cref="T:System.Windows.Input.ICommand"/> attached to the <see cref="T:Infragistics.Controls.CommandSource"/>
            </summary>
            <param name="execute">Whether or not the <see cref="T:System.Windows.Input.ICommand"/> can exectue. </param>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.EventName">
            <summary>
            Gets/Sets the name of an event that should trigger a command. 
            </summary>
            <remarks>
            For example, if you were setting the CommandSource for a button, you might want to set the EventName to "Click"
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.SourceElement">
            <summary>
            Gets the <see cref="T:System.Windows.FrameworkElement"/> that this command represents.
            </summary>
            <remarks>
            If you were to attach the <see cref="T:Infragistics.Controls.CommandSource"/> to a <see cref="T:System.Windows.Controls.Button"/>, this property would return that Button.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.Target">
            <summary>
            This is the <see cref="T:Infragistics.ICommandTarget"/> object that command should be triggered on. 
            </summary>
            <remarks>
            If not explicitly set, the Commanding Framework will walk up the VisualTree from the <see cref="P:Infragistics.Controls.CommandSource.SourceElement"/>
            until it finds an object that implements <see cref="T:Infragistics.ICommandTarget"/>
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.TargetName">
            <summary>
            If no target is resolved, then the Command will look for Globally registered targets. If this property is set, 
            it will look for an ICommandTarget that is a FrameworkElement and has the specified name.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.Parameter">
            <summary>
            If the Command that this <see cref="T:Infragistics.Controls.CommandSource"/> is supposed to trigger, requries additional information. 
            The information can be passed through this property.
            </summary>		
        </member>
        <member name="P:Infragistics.Controls.CommandSource.ParameterBinding">
            <summary>
            Gets/Sets the Binding that will determine the parameter for this <see cref="T:Infragistics.Controls.CommandSource"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.ParameterResolved">
            <summary>
            Gets the actual parameter that was set. 
            If a ParameterBinding was setting, it will return the binding value. 
            If it wasn't set, it will return the value in the Parameter property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.Command">
            <summary>
            Gets the <see cref="T:System.Windows.Input.ICommand"/> that this <see cref="T:Infragistics.Controls.CommandSource"/> represents.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.Handled">
            <summary>
            This should only be used by the <see cref="T:System.Windows.Input.ICommand"/> to handle the Event that triggered the command, so that it
            stops bubbling. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.AllowEventHandling">
            <summary>
            Gets/Sets if the Event for the attached command, should be Handled.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.EventHandler">
            <summary>
            Gets/Sets the EventHandler that was created based off of the <see cref="P:Infragistics.Controls.CommandSource.EventName"/> property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.CommandSource.OriginEventArgs">
            <summary>
            Gets the event argument that started the event 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.CommandSource.CommandSourceBindingContext.ValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.CommandSource.CommandSourceBindingContext.Value"/> dependency property. 
            </summary>
        </member>
        <member name="T:Infragistics.CommandSourceCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Controls.CommandSource"/> objects which support a command.
            </summary>
        </member>
        <member name="M:Infragistics.CommandSourceCollection.AddItem(System.Int32,Infragistics.Controls.CommandSource)">
            <summary>
            Registers the <see cref="T:Infragistics.Controls.CommandSource"/> object with the <see cref="T:Infragistics.CommandSourceManager"/> and adds the object to the collection.
            </summary>
            <param name="index">The index location to add the object to.</param>
            <param name="item">The object to be added.</param>
        </member>
        <member name="M:Infragistics.CommandSourceCollection.RemoveItem(System.Int32)">
            <summary>
            Unregisters the <see cref="T:Infragistics.Controls.CommandSource"/> object with the <see cref="T:Infragistics.CommandSourceManager"/> and removes the object to the collection.
            </summary>
            <param name="index">The index location to add the object to.</param>
            <returns>True if the object is removed.</returns>
        </member>
        <member name="M:Infragistics.CommandSourceCollection.ResetItems">
            <summary>
            Unregisters all <see cref="T:Infragistics.Controls.CommandSource"/> objects from the <see cref="T:Infragistics.CommandSourceManager"/>
            </summary>
        </member>
        <member name="P:Infragistics.CommandSourceCollection.Element">
            <summary>
            Gets / sets the framework element which the command is attached to.
            </summary>
        </member>
        <member name="T:Infragistics.ICommandTarget">
            <summary>
            Used to designate objects which expect a Command to be executed against it.
            </summary>
        </member>
        <member name="M:Infragistics.ICommandTarget.SupportsCommand(System.Windows.Input.ICommand)">
            <summary>
            Returns if the object will support a given command type.
            </summary>
            <param name="command">The command to be validated.</param>
            <returns>True if the object recognizes the command as actionable against it.</returns>
        </member>
        <member name="M:Infragistics.ICommandTarget.GetParameter(Infragistics.Controls.CommandSource)">
            <summary>
            Returns the object that defines the parameters necessary to execute the command.
            </summary>
            <param name="source">The CommandSource object which defines the command to be executed.</param>
            <returns>The object necessary for the command to complete.</returns>
        </member>
        <member name="T:Infragistics.FormattingRuleCollection`1">
            <summary>
            A collection of IRule objects which need a chance to gather data during the databinding process.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Infragistics.FormattingRuleCollection`1.GetRulesForStage(Infragistics.EvaluationStage)">
            <summary>
            Returns a collection of rules which need to be processed at the given stage.
            </summary>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.FilterContext">
            <summary>
            A nongeneric abstract class representing a filter on an object.
            Cast up to CustomFilter<![CDATA[<T>]]> to get an expression representing the filter.
            </summary>
        </member>
        <member name="M:Infragistics.FilterContext.CreateGenericFilter(Infragistics.CachedTypedInfo,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Creates a FilterContext instanced typed to the object type of the data being processed.
            </summary>
            <param name="cachedTypeInfo">The data object type that will be processed over.</param>
            <param name="fieldDataType">The field data type that will be processed on.</param>
            <param name="caseSensitive">True if case sensitivity should be applied.  Only used for string fieldDataTypes.</param>
            <param name="fromDateColumn">True if this filter was created by a DateColumn and will perform some extra actions to filter out time aspect.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.FilterContext.CreateExpression(System.String,Infragistics.ComparisonOperator,System.Object,System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.Linq.Expressions.Expression"/>
            </summary>
            <param name="fieldName"></param>
            <param name="op"></param>
            <param name="value"></param>
            <param name="caseSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.FilterContext.CreateExpression(System.String,Infragistics.ComparisonOperator,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Linq.Expressions.Expression"/>
            </summary>
            <param name="fieldName"></param>
            <param name="op"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.FilterContext.CreateExpression(Infragistics.ConditionCollection)">
            <summary>
            Creates a new <see cref="T:System.Linq.Expressions.Expression"/>
            </summary>
            <param name="conditionGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.FilterContext.CreateExpression(Infragistics.RecordFilterCollection)">
            <summary>
            Creates a new <see cref="T:System.Linq.Expressions.Expression"/>
            </summary>
            <param name="conditionGroup"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.FilterContext.CaseSensitive">
            <summary>
            Gets if the filters being built will be case sensitive or not.
            </summary>
        </member>
        <member name="P:Infragistics.FilterContext.FieldDataType">
            <summary>
            The <see cref="T:System.Type"/> of the field being filtered on.
            </summary>
        </member>
        <member name="P:Infragistics.FilterContext.FromDateColumn">
            <summary>
            Gets if the filter being build is for the Date Column.  If so then we will use some ranging logic when
            building filters since the Date column does not support time.
            </summary>
        </member>
        <member name="P:Infragistics.FilterContext.CachedTypedInfo">
            <summary>
            The CachedTypedInfo for the opeartion
            </summary>
        </member>
        <member name="T:Infragistics.FilterContext`1">
            <summary>
            A <see cref="T:Infragistics.FilterContext"/> object typed to a particular object.
            </summary>
            <typeparam name="TDataObject">The type of the object that will be processed against.</typeparam>
        </member>
        <member name="M:Infragistics.FilterContext`1.#ctor(System.Type,System.Boolean,System.Boolean,Infragistics.CachedTypedInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.FilterContext"/> class.
            </summary>
            <param name="fieldDataType"></param>
            <param name="caseSensitive"></param>
            <param name="fromDateColumn"></param>
            <param name="cti"></param>
        </member>
        <member name="M:Infragistics.FilterContext`1.OrElseExpression``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Combines two <see cref="T:System.Linq.Expressions.Expression"/> objects with a OR Expression.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which is the combination of the two inputs.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.AndAlsoExpression``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Combines two <see cref="T:System.Linq.Expressions.Expression"/> objects with a AND Expression.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which is the combination of the two inputs.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.ExclusiveOrExpression``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Combines two <see cref="T:System.Linq.Expressions.Expression"/> objects with a XOR Expression.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which is the combination of the two inputs.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateDateTimeTimeExcludedEqualsExpression``1(System.String,System.Object)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for equality.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateEqualsExpression``1(System.String,System.Object)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for equality.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateNotEqualsExpression``1(System.String,System.Object)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for inequality.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateGreaterThanExpression``1(System.String,System.Object)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for greater than the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateGreaterThanOrEqualsExpression``1(System.String,System.Object)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for greater than or equal the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateLessThanExpression``1(System.String,System.Object)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for less than the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateLessThanOrEqualsExpression``1(System.String,System.Object)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for less than or equal the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateContainsCaseInsensitiveExpressionFromObject``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive contains against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStringExpression``1(System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Boolean}})">
            <summary>
            Builds an expression for analyzing string
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="booleanStringExpression">A <![CDATA[Expression<Func<string, bool>>]]> which will analyze a string.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateEqualsCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive equals against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateNotEqualsCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive inequality against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStartsWithExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case sensitive starts with against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStartsWithCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive starts with against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateEndsWithExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case sensitive ends with against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateEndsWithCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive ends with against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateContainsExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case sensitive contains against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateContainsCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive contains against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateDoesNotContainExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case sensitive does not contain against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateDoesNotContainCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive does not contain against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStringGreaterThanExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case sensitive greater than against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStringGreaterThanCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive greater than against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStringGreaterThanOrEqualExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case sensitive greater than or equal against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStringGreaterThanOrEqualCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive greater than or equal against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStringLessThanExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case sensitive less than against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStringLessThanCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive less than against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStringLessThanOrEqualExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case sensitive less than or equal against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStringLessThanOrEqualCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive less than or equal against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStringEmptyExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for empty strings values.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateStringNotEmptyExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for nonempty strings values.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateDoesNotStartWithExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case sensitive does not starts with against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateDoesNotStartWithCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive does not starts with against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateDoesNotEndWithExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case sensitive does not ends with against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateDoesNotEndWithCaseInsensitiveExpression``1(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for case insensitive does not ends with against the inputted value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="value">The value that will be analyzed against.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateExpression(Infragistics.ConditionCollection)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> based on all the terms in the <see cref="T:Infragistics.ConditionCollection"/>.
            </summary>
            <param name="conditionGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateExpression(Infragistics.RecordFilterCollection)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> from the <see cref="T:Infragistics.RecordFilterCollection"/>
            </summary>
            <param name="conditionGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateExpression(System.String,Infragistics.ComparisonOperator,System.Object)">
            <summary>
            Creates an expression based on the <see cref="T:Infragistics.ComparisonOperator"/>.
            </summary>
            <param name="fieldName"></param>
            <param name="op"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateExpression(System.String,Infragistics.ComparisonOperator,System.Object,System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.Linq.Expressions.Expression"/>
            </summary>
            <param name="fieldName"></param>
            <param name="op"></param>
            <param name="value"></param>
            <param name="caseSensitive"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateCaseInsensitiveStringExpression(System.String,Infragistics.ComparisonOperator,System.Object)">
            <summary>
            Returns an <see cref="T:System.Linq.Expressions.Expression"/> for a case insensitive string operation.
            </summary>
            <param name="fieldName"></param>
            <param name="op"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateCaseSensitiveStringExpression(System.String,Infragistics.ComparisonOperator,System.Object)">
            <summary>
            Returns an <see cref="T:System.Linq.Expressions.Expression"/> for a case sensitive string operation.
            </summary>
            <param name="fieldName"></param>
            <param name="op"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateObjectExpression(System.String,Infragistics.ComparisonOperator,System.Object)">
            <summary>
            Returns an <see cref="T:System.Linq.Expressions.Expression"/> for a object operation.
            </summary>
            <param name="fieldName"></param>
            <param name="op"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateObjectExpression``1(System.String,System.Linq.Expressions.Expression{System.Func{System.Object,System.Boolean}})">
            <summary>
            Builds an expression for analyzing object
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="booleanObjectExpression">A <![CDATA[Expression<Func<object, bool>>]]> which will analyze an object.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateThisWeekExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for this week.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateNextWeekExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for next week.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateLastWeekExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for last week.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateThisMonthExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for this Month.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateNextMonthExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for next Month.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateLastMonthExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for last Month.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateThisYearExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for this Year.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateNextYearExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for next Year.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateLastYearExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for last Year.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateThisQuarterExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for this Quarter.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateNextQuarterExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for next Quarter.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateLastQuarterExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for last Quarter.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateYearToDateExpression``1(System.String)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for year to date.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateDateRangeExpression``1(System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that evaluates for date ranges.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="includeStartDate"></param>
            <param name="excludedEndDate"></param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateMonthExpression``1(System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that will evaluate an object's DateTime field for a particular month value.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName">The property that will be evaluated on.</param>
            <param name="month">The int month value which will be filterd for.</param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="M:Infragistics.FilterContext`1.CreateQuarterYearIndependentExpression``1(System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> that will evaluate an object's DateTime field for a particular quarter.
            </summary>
            <typeparam name="TDataObjectType">The object type that the <see cref="T:System.Linq.Expressions.Expression"/> will be applied over.</typeparam>
            <param name="fieldName"></param>
            <param name="quarter"></param>
            <returns>An <see cref="T:System.Linq.Expressions.Expression"/> which will evaluate for the condition.</returns>
        </member>
        <member name="T:Infragistics.GroupByContext">
            <summary>
            An object that encapsulates the GroupBy functionality used by the <see cref="T:Infragistics.DataManagerBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.GroupByContext.CreateGenericCustomGroup(Infragistics.CachedTypedInfo,System.String,System.Object)">
            <summary>
            Creates a Generic instance of the <see cref="T:Infragistics.GroupByContext"/>.
            </summary>
            <param name="cti">The type of data to create the GroupByContext from.</param>
            <param name="propertyName">The name of the property, that the data should be grouped by.</param>
            <param name="comparer">The IEqualityComparer that will be used to perform the grouping</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.GroupByContext.CreateGenericCustomGroup(Infragistics.CachedTypedInfo,System.Object,System.Windows.Data.IValueConverter,System.Object)">
            <summary>
            Creates a Generic instance of the <see cref="T:Infragistics.GroupByContext"/>.
            </summary>
            <param name="cti">The type of data to create the GroupByContext from.</param>
            <param name="comparer"></param>
            <param name="converter"></param>
            <param name="converterParam"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.GroupByContext.Group``1(System.Linq.IQueryable{``0})">
            <summary>
            Groups the specified <see cref="T:System.Linq.IQueryable"/> by the property this data represents.
            </summary>
            <typeparam name="T">The typeof data that needs to be grouped.</typeparam>
            <param name="query">A colleciton of data to group by.</param>
            <returns>Collection of <see cref="T:Infragistics.GroupByDataContext"/> objects.</returns>
        </member>
        <member name="P:Infragistics.GroupByContext.PropertyName">
            <summary>
            Gets the name of the property that data should be grouped by.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByContext.Summaries">
            <summary>
            Gets a list of the summaries that should be applied to Children.
            </summary>
        </member>
        <member name="T:Infragistics.GroupByContext`1">
            <summary>
            An object that encapsulates the GroupBy functionality used by the <see cref="T:Infragistics.DataManagerBase"/>
            </summary>
            <typeparam name="TColumnType">The type of data that should be grouped by.</typeparam>
        </member>
        <member name="M:Infragistics.GroupByContext`1.#ctor(System.String,System.Object,Infragistics.CachedTypedInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.GroupByContext"/>.
            </summary>
            <param name="propertyName"></param>
            <param name="comparer"></param>
            <param name="cti"></param>
        </member>
        <member name="M:Infragistics.GroupByContext`1.#ctor(System.Object,System.Windows.Data.IValueConverter,System.Object,Infragistics.CachedTypedInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.GroupByContext"/>.
            </summary>
            <param name="comparer"></param>
            <param name="converter"></param>
            <param name="converterParam"></param>
            <param name="cti"></param>
        </member>
        <member name="M:Infragistics.GroupByContext`1.Group``1(System.Linq.IQueryable{``0})">
            <summary>
            Groups the specified <see cref="T:System.Linq.IQueryable"/> by the property this data represents.
            </summary>
            <typeparam name="T">Type typeof data that needs to be grouped.</typeparam>
            <param name="query">A colleciton of data to group by.</param>
            <returns>Collection of <see cref="T:Infragistics.GroupByDataContext"/> objects.</returns>
        </member>
        <member name="P:Infragistics.GroupByContext`1.Comparer">
            <summary>
            Gets the Comparer that will be used to perform the grouping.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByContext`1.Converter">
            <summary>
            Gets the <see cref="T:System.Windows.Data.IValueConverter"/> which will be used to evaluate the GroupBy.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByContext`1.ConverterParameter">
            <summary>
            The parameter applied to the <see cref="P:Infragistics.GroupByContext`1.Converter"/>.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByContext`1.CachedTypedInfo">
            <summary>
            The CachedTypedInfo for the operation.
            </summary>
        </member>
        <member name="T:Infragistics.GroupByDataContext">
            <summary>
            An object that contains the informaton of data that has been grouped by the <see cref="T:Infragistics.GroupByContext"/>
            </summary>
        </member>
        <member name="P:Infragistics.GroupByDataContext.Value">
            <summary>
            Gets the value of the that the data has been grouped by.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByDataContext.Records">
            <summary>
            Gets a collection of data that belongs to this particular grouping.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByDataContext.Count">
            <summary>
            Gets the total amount of records in this particular grouping.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByDataContext.DisplayValue">
            <summary>
            Gets the string representation of the value, with the Count appended to it. 
            </summary>
        </member>
        <member name="P:Infragistics.GroupByDataContext.SummaryLookupResults">
            <summary>
            Gets a lookup table of the SummaryResults based on a column key.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByDataContext.SummaryResults">
            <summary>
            Summary results for that were specified for all fields.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByDataContext.GroupBySummaryLookupResults">
            <summary>
            Gets a lookup table of the GroupBySummaryResults based on a column key.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByDataContext.GroupBySummaryResults">
            <summary>
            Summary Results specific to the particular field that this GroupByContext represents.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByDataContext.Summaries">
            <summary>
            Gets a list of the summaries that should be applied to Children.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByDataContext.GroupBySummaries">
            <summary>
            Gets a list of the summaries that should be applied specifically for GroupBy.
            </summary>
        </member>
        <member name="P:Infragistics.GroupByDataContext.TypedInfo">
            <summary>
            Gets/Sets the TypedInfo for the object.
            </summary>
        </member>
        <member name="T:Infragistics.InformationContext">
            <summary>
            A context object used to get data from the data for secondary features.
            </summary>
        </member>
        <member name="F:Infragistics.InformationContext.ToUpperMethod">
            <summary>
            A <see cref="T:System.Reflection.MethodInfo"/> object containing a method that will convert text to a globalized string for case insensitive sorting.
            </summary>
        </member>
        <member name="F:Infragistics.InformationContext.IsNullOrEmptyMethod">
            <summary>
            A <see cref="T:System.Reflection.MethodInfo"/> object containing a method that will validate if an inputted string is null or empty. 
            </summary>
        </member>
        <member name="M:Infragistics.InformationContext.CreateGenericInformationContext(Infragistics.CachedTypedInfo,System.String,System.Boolean,System.Boolean,System.Object,System.Boolean)">
            <summary>
            Creates a typed <see cref="T:Infragistics.InformationContext"/> object.
            </summary>
            <param name="cti"></param>
            <param name="propertyName"></param>
            <param name="sortAscending"></param>
            <param name="caseSensitive"></param>
            <param name="comparer"></param>
            <param name="fromDateColumn"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.InformationContext.GetDistinctValues(System.Collections.IEnumerable)">
            <summary>
            Gets an <see cref="T:System.Collections.IList"/> of distinct values from the inputted <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.InformationContext.GetCompleteValuesList(System.Collections.IEnumerable)">
            <summary>
            Returns an <see cref="T:System.Collections.IList"/> of objects from this <see cref="T:Infragistics.InformationContext"/>.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.InformationContext.PropertyName">
            <summary>
            Gets the name of the property that will be processed for information.
            </summary>
        </member>
        <member name="P:Infragistics.InformationContext.DataType">
            <summary>
            Gets the Type of the data object being processed.
            </summary>
        </member>
        <member name="P:Infragistics.InformationContext.PropertyType">
            <summary>
            Gets the Type of the objects provided by the property.
            </summary>
        </member>
        <member name="P:Infragistics.InformationContext.CaseSensitive">
            <summary>
            Gets if case sensitivity should be used when generating the list.
            </summary>
        </member>
        <member name="P:Infragistics.InformationContext.SortAscending">
            <summary>
            Gets if the generated list should be sorted.
            </summary>
        </member>
        <member name="P:Infragistics.InformationContext.Comparer">
            <summary>
            Gets the Comparer that should be used for sorting.
            </summary>
        </member>
        <member name="P:Infragistics.InformationContext.Lambda">
            <summary>
            Gets the <see cref="T:System.Linq.Expressions.LambdaExpression"/> which is used to generate the list.
            </summary>
        </member>
        <member name="P:Infragistics.InformationContext.FromDateColumn">
            <summary>
            Gets if the unique list being build is for the Date Column.  If so then we will use some ranging logic when
            building unique list since the Date column does not support time.
            </summary>
        </member>
        <member name="T:Infragistics.InformationContext`2">
            <summary>
            A class of <see cref="T:Infragistics.InformationContext"/> objects generically typed.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TColumnType"></typeparam>
        </member>
        <member name="M:Infragistics.InformationContext`2.#ctor(System.String,System.Boolean,System.Boolean,System.Object,System.Boolean,Infragistics.CachedTypedInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InformationContext"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.InformationContext`2.GetDistinctValues(System.Collections.IEnumerable)">
            <summary>
            Gets an <see cref="T:System.Collections.IList"/> of distinct values from the inputted <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.InformationContext`2.GetDistinctValues(System.Linq.IQueryable{`0})">
            <summary>
            Gets an <see cref="T:System.Collections.IList"/> of distinct values from the inputted <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.InformationContext`2.GetDistinctValues(System.Linq.IQueryable)">
            <summary>
            Gets an <see cref="T:System.Collections.IList"/> of distinct values from the inputted <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.InformationContext`2.GetCompleteValuesList(System.Collections.IEnumerable)">
            <summary>
            Returns an <see cref="T:System.Collections.IList"/> of objects from this <see cref="T:Infragistics.InformationContext"/>.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.InformationContext`2.GetCompleteValuesList(System.Linq.IQueryable)">
            <summary>
            Returns an <see cref="T:System.Collections.IList"/> of objects from this <see cref="T:Infragistics.InformationContext"/>.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.InformationContext`2.GetCompleteValuesList(System.Linq.IQueryable{`0})">
            <summary>
            Returns an <see cref="T:System.Collections.IList"/> of objects from this <see cref="T:Infragistics.InformationContext"/>.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.MergedDataContext">
            <summary>
            An object that encapsulates the Merged Data functionality used by the <see cref="T:Infragistics.DataManagerBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.MergedDataContext.CreateGenericCustomMerge(Infragistics.CachedTypedInfo,System.String,System.Object)">
            <summary>
            Creates a Generic instance of the <see cref="T:Infragistics.MergedDataContext"/>.
            </summary>
            <param name="cti">The type of data to create the MergedDataContext from.</param>
            <param name="propertyName">The name of the property, that the data should be merged by.</param>
            <param name="comparer">The IEqualityComparer that will be used to perform the mergin</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.MergedDataContext.CreateGenericCustomMerge(Infragistics.CachedTypedInfo,System.Object,System.Windows.Data.IValueConverter,System.Object)">
            <summary>
            Creates a Generic instance of the <see cref="T:Infragistics.MergedDataContext"/>.
            </summary>
            <param name="cti">The type of data to create the MergedDataContext from.</param>
            <param name="comparer"></param>
            <param name="converter"></param>
            <param name="converterParam"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.MergedDataContext.Merge(System.Linq.IQueryable,System.Collections.Generic.List{Infragistics.MergedDataContext},Infragistics.SummaryDefinitionCollection)">
            <summary>
            Merges the specified <see cref="T:System.Linq.IQueryable"/> by the property this data represents.
            </summary>
            <param name="query"></param>
            <param name="mdcs"></param>
            <param name="summaries"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.MergedDataContext.Merge(System.Linq.IQueryable,System.Collections.Generic.List{Infragistics.MergedDataContext},Infragistics.MergeDelegate{System.Object,System.Collections.IEnumerable,Infragistics.MergedDataContext,System.Object,Infragistics.MergedColumnInfo,System.Object},Infragistics.MergedColumnInfo)">
            <summary>
            Merges the specified <see cref="T:System.Linq.IQueryable"/> by the property this data represents.
            </summary>
            <param name="q"></param>
            <param name="mdcs"></param>
            <param name="method"></param>
            <param name="parentMCI"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.MergedDataContext.PropertyName">
            <summary>
            Gets the name of the property that data should be merged by.
            </summary>
        </member>
        <member name="P:Infragistics.MergedDataContext.SortContext">
            <summary>
            Gets/Sets the CurrentSort that will be applied when the data is merged by a particular field.
            </summary>
        </member>
        <member name="P:Infragistics.MergedDataContext.SortAscending">
            <summary>
            Gets/Sets the sort direction that should be applied to the field that the underlying data has been merged by.
            </summary>
        </member>
        <member name="P:Infragistics.MergedDataContext.MergedObject">
            <summary>
            The Object the merged operation is performed on.
            </summary>
        </member>
        <member name="T:Infragistics.MergedDataContext`2">
            <summary>
            An object that encapsulates the Merging functionality used by the <see cref="T:Infragistics.DataManagerBase"/>
            </summary>
            <typeparam name="T">The data object that the field belongs to.</typeparam>
            <typeparam name="TColumnType">The type of data that should be merged by.</typeparam>
        </member>
        <member name="M:Infragistics.MergedDataContext`2.#ctor(System.String,System.Object,Infragistics.CachedTypedInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.MergedDataContext"/>.
            </summary>
            <param name="propertyName"></param>
            <param name="comparer"></param>
            <param name="typedInfo"></param>
        </member>
        <member name="M:Infragistics.MergedDataContext`2.#ctor(System.Object,System.Windows.Data.IValueConverter,System.Object,Infragistics.CachedTypedInfo)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.MergedDataContext"/>.
            </summary>
            <param name="comparer"></param>
            <param name="converter"></param>
            <param name="converterParam"></param>
            <param name="typedInfo"></param>
        </member>
        <member name="M:Infragistics.MergedDataContext`2.Merge(System.Linq.IQueryable,System.Collections.Generic.List{Infragistics.MergedDataContext},Infragistics.SummaryDefinitionCollection)">
            <summary>
            Merges the specified <see cref="T:System.Linq.IQueryable"/> by the property this data represents.
            </summary>
            <param name="query"></param>
            <param name="mdcs"></param>
            <param name="summaries"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.MergedDataContext`2.Merge(System.Linq.IQueryable,System.Collections.Generic.List{Infragistics.MergedDataContext},Infragistics.MergeDelegate{System.Object,System.Collections.IEnumerable,Infragistics.MergedDataContext,System.Object,Infragistics.MergedColumnInfo,System.Object},Infragistics.MergedColumnInfo)">
            <summary>
            Merges the specified <see cref="T:System.Linq.IQueryable"/> by the property this data represents.
            </summary>
            <param name="iquery"></param>
            <param name="mdcs"></param>
            <param name="method"></param>
            <param name="parentMCI"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.MergedDataContext`2.OnGrouping(System.Object,System.Collections.IEnumerable,Infragistics.MergedDataContext,System.Object,Infragistics.MergedColumnInfo)">
            <summary>
            Invoked by the GroupBy query, this will recurse through all MergeDataContexts and Invoke their merge method.
            </summary>
            <param name="key"></param>
            <param name="list"></param>
            <param name="nextMergeDataContext"></param>
            <param name="mergedObject"></param>
            <param name="parentMCI"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.MergedDataContext`2.AppendColumnInfoToRowInfo(`0,Infragistics.MergedColumnInfo,System.Int32,System.Int32,System.Object)">
            <summary>
            Takes the given MergedColumnInfo, and determines if needs to create a new MergedRowInfo or use and existing one, then appends itself to that RowInfo
            </summary>
            <param name="data"></param>
            <param name="mci"></param>
            <param name="index"></param>
            <param name="lastIndex"></param>
            <param name="mergedObject"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.MergedDataContext`2.Comparer">
            <summary>
            Gets the Comparer that will be used to perform the merging.
            </summary>
        </member>
        <member name="P:Infragistics.MergedDataContext`2.Converter">
            <summary>
            Gets the <see cref="T:System.Windows.Data.IValueConverter"/> which will be used to evaluate the merge.
            </summary>
        </member>
        <member name="P:Infragistics.MergedDataContext`2.ConverterParameter">
            <summary>
            The parameter applied to the <see cref="P:Infragistics.MergedDataContext`2.Converter"/>.
            </summary>
        </member>
        <member name="P:Infragistics.MergedDataContext`2.Summaries">
            <summary>
            A collection of summaries that should be applied to each subset of merged groupings.
            </summary>
        </member>
        <member name="P:Infragistics.MergedDataContext`2.TypedInfo">
            <summary>
            Gets/Sets the TypedInfo for the object.
            </summary>
        </member>
        <member name="T:Infragistics.MergedRowInfo">
            <summary>
            An object that stores the merge information for a particualr data row from an items source.
            </summary>
        </member>
        <member name="M:Infragistics.MergedRowInfo.Equals(System.Object)">
            <summary>
            Does an equals comparison on the underlying data, not the MergedRowInfo object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.MergedRowInfo.MergedGroups">
            <summary>
            A collection of MergeColumnInfo that this row has been merged by.
            </summary>
        </member>
        <member name="P:Infragistics.MergedRowInfo.Data">
            <summary>
            The underlying data object that this row object represents
            </summary>
        </member>
        <member name="P:Infragistics.MergedRowInfo.IsLastRowInGroup">
            <summary>
            A lookup table for whether a specific key of a MergedColumnInfo, that this row is the last one in its grouping.
            </summary>
        </member>
        <member name="P:Infragistics.MergedRowInfo.IsFirstRowInGroup">
            <summary>
            A lookup table for whether a specific key of a MergedColumnInfo, that this row is the first one in its grouping.
            </summary>
        </member>
        <member name="T:Infragistics.MergedColumnInfo">
            <summary>
            An object that represents a particular field that the data has been merged by. 
            </summary>
        </member>
        <member name="P:Infragistics.MergedColumnInfo.Key">
            <summary>
            Gets the unique key that this particualr field grouping represents.
            </summary>
        </member>
        <member name="P:Infragistics.MergedColumnInfo.Children">
            <summary>
            Gets the collection of child rows that belong to this grouping, who all share the same value for the field as the Key
            </summary>
        </member>
        <member name="P:Infragistics.MergedColumnInfo.ParentMergedColumnInfo">
            <summary>
            The MergedColumnInfo who this grouping falls under, null if its the root. 
            </summary>
        </member>
        <member name="P:Infragistics.MergedColumnInfo.DataType">
            <summary>
            Gets the Type of the underling data row.
            </summary>
        </member>
        <member name="P:Infragistics.MergedColumnInfo.Summaries">
            <summary>
            Gets a list of the summaries that should be applied to Children.
            </summary>
        </member>
        <member name="P:Infragistics.MergedColumnInfo.SummaryResultCollection">
            <summary>
            When this collection is acccessed it will lazily perform the summaries for this particular MergedColumnInfo based on the children.
            </summary>
        </member>
        <member name="P:Infragistics.MergedColumnInfo.MergingObject">
            <summary>
            The object used to create this merging.
            </summary>
        </member>
        <member name="P:Infragistics.MergedColumnInfo.TypedInfo">
            <summary>
            Gets/Sets the TypedInfo for the object.
            </summary>
        </member>
        <member name="T:Infragistics.MergeDelegate`6">
            <summary>
            Custom deletage used to pass information in the MergedDataContext.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="in1"></param>
            <param name="in2"></param>
            <param name="in3"></param>
            <param name="in4"></param>
            <param name="in5"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.SortContext">
            <summary>
            A nongeneric abstract class representing a sort on a property.
            Cast up to CurrentSort<![CDATA[<T>]]> to get an expression representing the sort.
            </summary>
        </member>
        <member name="F:Infragistics.SortContext.ToUpperMethod">
            <summary>
            A MethodInfo object containging a method that will convert text to a globalized string for case insensitive sorting.
            </summary>
        </member>
        <member name="M:Infragistics.SortContext.CreateGenericSort(Infragistics.CachedTypedInfo,System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
            Initalizes a new CurrentSort<![CDATA[<T>]]> and returns it as type CurrentSort.
            </summary>
            <param name="cachedTypeInfo">The type of the CurrentSort<![CDATA[<T>]]> to create.</param>
            <param name="propertyName">The name of the property that the created sort should be sorting.</param>
            <param name="sortAscending">True if the sort should sort the property in ascending order.</param>
            <param name="isCaseSensitiveSort">True if the sort should be considered case sensitive.  Only used for string fields.</param>
            <param name="comparer">An IComparer<![CDATA[<T>]]> which will be used instead of the default sorting.</param>
            <returns>A new CustomFilter which is also of type CurrentSort<![CDATA[<T>]]>.</returns>
        </member>
        <member name="M:Infragistics.SortContext.CreateGenericSort(Infragistics.CachedTypedInfo,System.Boolean,System.Object,System.Windows.Data.IValueConverter,System.Object)">
            <summary>
            Initalizes a new CurrentSort<![CDATA[<T>]]> and returns it as type CurrentSort.
            </summary>
            <param name="cachedTypeInfo">The type of the CurrentSort<![CDATA[<T>]]> to create.</param>
            <param name="sortAscending">True if the sort should sort the property in ascending order.</param>
            <param name="comparer">An IComparer<![CDATA[<T>]]> which will be used instead of the default sorting.</param>
            <param name="converter"></param>
            <param name="converterParam"></param>
            <returns>A new CustomFilter which is also of type CurrentSort<![CDATA[<T>]]>.</returns>
        </member>
        <member name="M:Infragistics.SortContext.Sort``1(System.Linq.IQueryable{``0})">
            <summary>
            Sorts a given IQueryable based on the currently sorted column.
            </summary>
            <param name="query">The IQueryable that should be sorted.</param>		
            <returns>A sorted IOrderedQueryable, sorted on the currently sorted property.</returns>
        </member>
        <member name="M:Infragistics.SortContext.AppendSort``1(System.Linq.IOrderedQueryable{``0})">
            <summary>
            Appends to this sort to the IOrderedQueryable sort
            </summary>
            <param name="query">The existing query that already has a sort on it.</param>		
            <returns>A sorted IOrderedQueryable, sorted on the currently sorted property.</returns>
        </member>
        <member name="P:Infragistics.SortContext.SortPropertyName">
            <summary>
            Gets a string describing the column which is sorted.
            </summary>
        </member>
        <member name="P:Infragistics.SortContext.SortAscending">
            <summary>
            Gets if the current sort is sorted ascending or descending.
            </summary>
        </member>
        <member name="P:Infragistics.SortContext.PropertyType">
            <summary>
            Gets the type of the property that is being sorted on.
            </summary>
        </member>
        <member name="P:Infragistics.SortContext.DataType">
            <summary>
            Gets the type of the object that is being sorted.
            </summary>
        </member>
        <member name="P:Infragistics.SortContext.CaseSensitiveSort">
            <summary>
            Gets if the sort will be case sensitive.  Only applies to string columns.
            </summary>
        </member>
        <member name="T:Infragistics.SortContext`2">
            <summary>
            A generic class to describe a custom sort on a property given the type of object and column type.
            </summary>
            <typeparam name="T">The type of object that is sorted by this sort.</typeparam>
            <typeparam name="TColumnType">The column type that is sorted by this sort.</typeparam>
        </member>
        <member name="M:Infragistics.SortContext`2.#ctor(System.String,System.Boolean,System.Boolean,System.Object,Infragistics.CachedTypedInfo)">
            <summary>
            Initalizes a new instance of the CurrentSort class.
            </summary>
            <param name="propertyName">The name of the property to be sorted.</param>
            <param name="sortAscending">True if the property should be sorted ascending.</param>
            <param name="caseSensitiveSort">True if the sort should be case sensitive.  Only applies to string columns.</param>
            <param name="comparer">A custom IComparer<![CDATA[<T>]]> object, generic typed to the data type of the data in the column.  If non null this will take precedence over case sensitivity.</param>
            <param name="cachedTypeInfo"/>
        </member>
        <member name="M:Infragistics.SortContext`2.#ctor(System.String,System.Boolean,System.Boolean,Infragistics.CachedTypedInfo)">
            <summary>
            Initalizes a new instance of the CurrentSort class.
            </summary>
            <param name="propertyName">The name of the property to be sorted.</param>
            <param name="sortAscending">True if the property should be sorted ascending.</param>
            <param name="caseSensitiveSort">True if the sort should be case sensitive.  Only applies to string columns.</param>
            <param name="cachedTypeInfo"/>
        </member>
        <member name="M:Infragistics.SortContext`2.#ctor(System.Boolean,System.Object,System.Windows.Data.IValueConverter,System.Object,Infragistics.CachedTypedInfo)">
            <summary>
            Initalizes a new instance of the CurrentSort class.
            </summary>
            <param name="sortAscending">True if the property should be sorted ascending.</param>
            <param name="comparer"></param>
            <param name="converter"></param>
            <param name="converterParam"></param>
            <param name="cachedTypeInfo"></param>
        </member>
        <member name="M:Infragistics.SortContext`2.Sort``1(System.Linq.IQueryable{``0})">
            <summary>
            Sorts a given IQueryable based on the currently sorted column.
            </summary>
            <param name="query">The IQueryable that should be sorted.</param>		
            <returns>A sorted IQueryable, sorted on the currently sorted property.</returns>
        </member>
        <member name="M:Infragistics.SortContext`2.AppendSort``1(System.Linq.IOrderedQueryable{``0})">
            <summary>
            Appends to this sort to the IOrderedQueryable sort
            </summary>
            <param name="query">The existing query that already has a sort on it.</param>		
            <returns>A sorted IOrderedQueryable, sorted on the currently sorted property.</returns>
        </member>
        <member name="P:Infragistics.SortContext`2.Lambda">
            <summary>
            Gets the current LambdaExpression describing this sort.
            </summary>
        </member>
        <member name="P:Infragistics.SortContext`2.Comparer">
            <summary>
            A IComparer<![CDATA[<T>]]> object with the generic type set to the DataType of the field being sorted on.
            </summary>
        </member>
        <member name="P:Infragistics.SortContext`2.Converter">
            <summary>
            A IValueConverter<![CDATA[<T>]]> object which can be used to derive values from the data.
            </summary>
        </member>
        <member name="P:Infragistics.SortContext`2.ConverterParameter">
            <summary>
            The object to be used as the ConverterParameter for the <see cref="P:Infragistics.SortContext`2.Converter"/>.
            </summary>
        </member>
        <member name="F:Infragistics.ValObj.ValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.ValObj.Value"/> dependency property. 
            </summary>
        </member>
        <member name="T:Infragistics.SummaryContext">
            <summary>
            A nongeneric abstract class representing a summary on an object.
            </summary>
        </member>
        <member name="M:Infragistics.SummaryContext.CreateGenericSummary(Infragistics.CachedTypedInfo,System.String,Infragistics.LinqSummaryOperator)">
            <summary>
            Creates a SummaryContext instanced typed to the object type of the data being processed.
            </summary>
            <param name="cachedTypeInfo">The <see cref="T:Infragistics.CachedTypedInfo"/> object which has the type info for this method.</param>
            <param name="propertyName">The field data type that will be processed on.</param>
            <param name="linqSummary">The LINQ statement which will be used.</param>
            <returns></returns>		
        </member>
        <member name="M:Infragistics.SummaryContext.Execute(System.Linq.IQueryable)">
            <summary>
            Performs a LINQ based summary on the inputted query.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.SummaryContext.Maximum(System.Linq.IQueryable)">
            <summary>
            Executes a LINQ based Maximum summary.
            </summary>
            <param name="query">The IQueryable to execute the summary against.</param>
            <returns>The value of the summation.</returns>
        </member>
        <member name="M:Infragistics.SummaryContext.Minimum(System.Linq.IQueryable)">
            <summary>
            Executes a LINQ based Minimum summary.
            </summary>
            <param name="query">The IQueryable to execute the summary against.</param>
            <returns>The value of the summation.</returns>
        </member>
        <member name="M:Infragistics.SummaryContext.Sum(System.Linq.IQueryable)">
            <summary>
            Executes a LINQ based Sum summary.
            </summary>
            <param name="query">The IQueryable to execute the summary against.</param>
            <returns>The value of the summation.</returns>
        </member>
        <member name="M:Infragistics.SummaryContext.Count(System.Linq.IQueryable)">
            <summary>
            Executes a LINQ based Count summary.
            </summary>
            <param name="query">The IQueryable to execute the summary against.</param>
            <returns>The value of the summation.</returns>
        </member>
        <member name="M:Infragistics.SummaryContext.Average(System.Linq.IQueryable)">
            <summary>
            Executes a LINQ based Average summary.
            </summary>
            <param name="query">The IQueryable to execute the summary against.</param>
            <returns>The value of the summation.</returns>
        </member>
        <member name="P:Infragistics.SummaryContext.FieldName">
            <summary>
            Gets the name of the property on the data object that will be summed on.
            </summary>
        </member>
        <member name="P:Infragistics.SummaryContext.LinqSummary">
            <summary>
            Gets the LinqSummaryOperator associated with this <see cref="T:Infragistics.SummaryContext"/>.
            </summary>
        </member>
        <member name="T:Infragistics.SummaryContext`2">
            <summary>
            A generic class representing a summary on an object.
            </summary>
            <typeparam name="TObjectType">The type of the object which will be summed on.</typeparam>
            <typeparam name="TColumnType">The type of the field that will be summed on.</typeparam>
        </member>
        <member name="M:Infragistics.SummaryContext`2.#ctor(System.String,Infragistics.LinqSummaryOperator,Infragistics.CachedTypedInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.SummaryContext"/>
            </summary>
            <param name="propertyName"></param>
            <param name="linqSummary"></param>
            <param name="cti"></param>
        </member>
        <member name="M:Infragistics.SummaryContext`2.Maximum(System.Linq.IQueryable)">
            <summary>
            Executes a LINQ based Maximum summary.
            </summary>
            <param name="query">The IQueryable to execute the summary against.</param>
            <returns>The value of the summation.</returns>
        </member>
        <member name="M:Infragistics.SummaryContext`2.Minimum(System.Linq.IQueryable)">
            <summary>
            Executes a LINQ based Minimum summary.
            </summary>
            <param name="query">The IQueryable to execute the summary against.</param>
            <returns>The value of the summation.</returns>
        </member>
        <member name="M:Infragistics.SummaryContext`2.Sum(System.Linq.IQueryable)">
            <summary>
            Executes a LINQ based Sum summary.
            </summary>
            <param name="query">The IQueryable to execute the summary against.</param>
            <returns>The value of the summation.</returns>
        </member>
        <member name="M:Infragistics.SummaryContext`2.Average(System.Linq.IQueryable)">
            <summary>
            Executes a LINQ based Average summary.
            </summary>
            <param name="query">The IQueryable to execute the summary against.</param>
            <returns>The value of the summation.</returns>
        </member>
        <member name="M:Infragistics.SummaryContext`2.Count(System.Linq.IQueryable)">
            <summary>
            Executes a LINQ based Count summary.
            </summary>
            <param name="query">The IQueryable to execute the summary against.</param>
            <returns>The value of the summation.</returns>
        </member>
        <member name="P:Infragistics.SummaryContext`2.CachedTypedInfo">
            <summary>
            The CachedTypedInfo for the opeartion
            </summary>
        </member>
        <member name="T:Infragistics.DataField">
            <summary>
            Represents a given field of an object.
            </summary>
        </member>
        <member name="M:Infragistics.DataField.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DataField"/> class.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="type">Type of the field</param>        
        </member>
        <member name="P:Infragistics.DataField.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:Infragistics.DataField.FieldType">
            <summary>
            Gets or sets the type of the field.
            </summary>
        </member>
        <member name="P:Infragistics.DataField.AutoGenerate">
            <summary>
            Gets/sets whether this field should be automatically generated.
            </summary>
        </member>
        <member name="P:Infragistics.DataField.DisplayName">
            <summary>
            Gets/Sets the text that should be used to display the field.
            </summary>
        </member>
        <member name="P:Infragistics.DataField.GroupName">
            <summary>
            Gets/Sets the text that should be displayed for a field when its grouped.
            </summary>
        </member>
        <member name="P:Infragistics.DataField.Order">
            <summary>
            Gets/Sets the order in which the AutoGenerated field should be displayed
            </summary>
        </member>
        <member name="P:Infragistics.DataField.FormatString">
            <summary>
            For fields that display text, this gets/sets the format string that should be used for them.
            </summary>
        </member>
        <member name="P:Infragistics.DataField.ApplyFormatStringInEditMode">
            <summary>
            If a FormatString is set, this Gets/Sets whether to apply this formatstring in edit mode.
            </summary>
        </member>
        <member name="P:Infragistics.DataField.NullDisplayText">
            <summary>
            If the value for a field is null, this gets/Sets the text that should be displayed instead.
            </summary>
        </member>
        <member name="P:Infragistics.DataField.ConvertEmptyStringToNull">
            <summary>
             If the value of a string is empty, this gets/sets whether to display that string as null
            </summary>
        </member>
        <member name="P:Infragistics.DataField.AllowEdit">
            <summary>
            Gets/Sets whether a field is editable in edit mode.
            </summary>
        </member>
        <member name="P:Infragistics.DataField.AllowEditingForAddNew">
            <summary>
            Gets/sets if a field is editable in the AddNewRow.
            </summary>
        </member>
        <member name="T:Infragistics.DataFieldComparer">
            <summary>
            Used to sort the DataFields in the order of their Order property.
            </summary>
        </member>
        <member name="T:Infragistics.CachedTypedInfo">
            <summary>
            Object used to store the Type, and in WPF the PropertyDescriptors for a Type.
            </summary>
        </member>
        <member name="P:Infragistics.CachedTypedInfo.CachedType">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="T:Infragistics.DataManagerBase">
            <summary>
            Wraps an IEnumerable to get items while using IList or IQueryable to improve performance if available.
            </summary>
        </member>
        <member name="M:Infragistics.DataManagerBase.CreateDataManager(System.Collections.IEnumerable)">
            <summary>
            Creates a generic data manager of the type of the first object in the source.
            </summary>
            <param name="dataSource">The source that the created manager should manage.</param>
            <returns>A new DataManagerBase.</returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.CreateDataManager(System.Collections.IEnumerable,Infragistics.DataManagerProvider)">
            <returns></returns>
            <summary>
            Creates a generic data manager of the type of the first object in the source.
            </summary>
            <param name="dataSource">The source that the created manager should manage.</param>
            <param name="provider">The <see cref="T:Infragistics.DataManagerProvider"/> that will be used to Generate a DataManager.</param>
            <returns>A new DataManagerBase.</returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.ResolveCollectionType(System.Collections.IEnumerable)">
            <summary>
            Resolves the underlying type of the item that the specified collection contains.
            </summary>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.ResolveItemType(System.Collections.IEnumerable)">
            <summary>
            Resolves the underlying type of the item that the specified collection contains.
            </summary>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.BuildPropertyExpressionFromPropertyName(System.String,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Builds a <see cref="T:System.Linq.Expressions.Expression"/> for complex property names such as Address.Street1 or Items[FirstName]
            </summary>
            <param name="propertyName"></param>
            <param name="paramExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.BuildPropertyExpressionFromPropertyName(System.String,System.Linq.Expressions.ParameterExpression,Infragistics.CachedTypedInfo,System.Type,System.Object)">
            <summary>
            Builds a <see cref="T:System.Linq.Expressions.Expression"/> for complex property names such as Address.Street1 or Items[FirstName]
            </summary>
            <param name="propertyName"></param>
            <param name="paramExpression"></param>
            <param name="cachedTypedInfo"/>
            <param name="propertyType"/>
            <param name="defaultValue"/>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.ResolvePropertyTypeFromPropertyName(System.String,Infragistics.CachedTypedInfo)">
            <summary>
            Resolves the type of a property for complex properties such as Address.Stree1.
            </summary>
            <param name="propertyName"></param>
            <param name="rootType"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.ResolveValueFromPropertyPath(System.String,System.Object)">
            <summary>
            Walks the property tree of an object to resolve properties such as Address.Street1 or Items[FirstName] 
            </summary>
            <param name="propertyPath"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.ResolvePropertyInfoFromPropretyPath(System.String,System.Object)">
            <summary>
            Walks through the property tree of an object to resolve the propretyInfo 
            </summary>
            <param name="propertyPath"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.FilterItems(System.Collections.IList)">
            <summary>
            Filters a list of items using the filter operands applied on the <see cref="T:Infragistics.DataManagerBase"/>.
            </summary>
            <param name="items">The items.</param>
            <returns>Filtered list or null if filtering cannot be applied.</returns>
            <remarks>
            This method is added solely for the purpose of fast adding of an item in sorted/filtered list.
            </remarks>
        </member>
        <member name="M:Infragistics.DataManagerBase.UpdateCachedDataManipulations(System.Object,System.Boolean)">
            <summary>
            Updates the cached data manipulations.
            </summary>
            <param name="item">The item.</param>
            <param name="isAdding">if set to <c>true</c> the item will be added to the cached lists, otherwise removed.</param>
        </member>
        <member name="M:Infragistics.DataManagerBase.ResolveIndexForInsertOrDelete(System.Object,System.Boolean)">
            <summary>
            Resolves the index for insert or delete or return null if the Filtered DataSource is not supproeted.
            </summary>
            <param name="data">The data.</param>
            <param name="isAdding"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.GenerateNewObject">
            <summary>
            Creates a new object with of <see cref="P:Infragistics.DataManagerBase.DataType"/> type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.GetRecord(System.Int32)">
            <summary>
            Returns an object in the data source at a given index, after applying the sort and filter.
            </summary>
            <param name="recordIndex">The index of the item to find.</param>
            <returns>The object at that index.</returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.ResolveIndexForRecord(System.Object)">
            <summary>
            Looks through the filtered DataSource for the index of the item specified. 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.InsertRecord(System.Int32,System.Object)">
            <summary>
            Adds inputted object to the datasource at the given index
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Infragistics.DataManagerBase.AddRecord(System.Object)">
            <summary>
            Adds inputted object to the datasource
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Infragistics.DataManagerBase.RemoveRecord(System.Object)">
            <summary>
            Removes a record from the datasource.
            </summary>
            <param name="value"></param>
            <returns>True if the record was removed, false otherwise.</returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.GetDataProperties">
            <summary>
            Returns an IEnumerable of <see cref="T:Infragistics.DataField"/>'s that describe the different fields in this object.
            </summary>
            <returns>An IEnumerable of the DataField's for all the properties of the object.</returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.Reset">
            <summary>
            Clears out any stored information on the previous DataSource.
            </summary>
        </member>
        <member name="M:Infragistics.DataManagerBase.UpdateData">
            <summary>
            Clears the underlying cached data, and triggeres all data operations to be applied again.
            </summary>
        </member>
        <member name="M:Infragistics.DataManagerBase.CancelEdit">
            <summary>
            Wraps the IEditableCollectionVie.CancelEdit method
            </summary>
            <returns>Returns true if it's an IEditableCollectionView</returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.CommitEdit">
            <summary>
            Wraps the IEditableCollectionVie.CommitEdit method
            </summary>
            <returns>Returns true if it's an IEditableCollectionView</returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.EditItem(System.Object)">
            <summary>
            Wraps the IEditableCollectionVie.EditItem method
            </summary>
            <param name="item"></param>
            <returns>Returns true if it's an IEditableCollectionView</returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.RefreshSummaries">
            <summary>
            Reevaluates the summaries for the ItemsSource bound to this <see cref="T:Infragistics.DataManagerBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.DataManagerBase.UpdateCurrentItem(System.Object)">
            <summary>
            Moves the <see cref="T:System.ComponentModel.ICollectionView"/> current item pointer to the inputted item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.DataManagerBase.GenerateDataField(System.Reflection.PropertyInfo)">
            <summary>
            Creates a <see cref="T:Infragistics.DataField"/> object, which contains information about a specific property.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.SetDataSource(System.Collections.IEnumerable)">
            <summary>
            Sets the <see cref="P:Infragistics.DataManagerBase.DataSource"/> while registering for change notification.
            </summary>
            <param name="source">The IEnumerable to set the DataSource to.</param>
        </member>
        <member name="M:Infragistics.DataManagerBase.GetDataSource">
            <summary>
            Gets the <see cref="P:Infragistics.DataManagerBase.DataSource"/> associated with this <see cref="T:Infragistics.DataManagerBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.DataManagerBase.ResolveCount">
            <summary>
            Determines the size of the collection by walking through the DataSource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.ResolveRecord(System.Int32)">
            <summary>
            Resolve the specified record at a given index. 
            </summary>
            <param name="recordIndex"></param>
            <returns></returns>
            <remarks> This method only gets called, if the data source isn't of type IList.</remarks>
        </member>
        <member name="M:Infragistics.DataManagerBase.ResolveFilteredSortedPagedDataSource">
            <summary>
            Uses the existing paging, sorting, and filtering information to build a cached object for the
            DataManagerBase to use.
            </summary>
        </member>
        <member name="M:Infragistics.DataManagerBase.ClearCachedDataSource(System.Boolean)">
            <summary>
            Clears any cached information that the manager keeps.
            </summary>
        </member>
        <member name="M:Infragistics.DataManagerBase.OnDataSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Triggered when the underlying data source's data is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.DataManagerBase.SetSortedFilteredDataSource(System.Collections.IList)">
            <summary>
            Used to update the sorted, filtered, paged, and grouped data source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Infragistics.DataManagerBase.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event.
            </summary>
            <param name="e">Data about the collection being changed.</param>
        </member>
        <member name="M:Infragistics.DataManagerBase.OnResolvingData(Infragistics.DataAcquisitionEventArgs)">
            <summary>
            Raises the <see cref="E:Infragistics.DataManagerBase.ResolvingData"/> event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Infragistics.DataManagerBase.OnNewObjectGeneration">
            <summary>
            Raises the <see cref="E:Infragistics.DataManagerBase.NewObjectGeneration"/> event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManagerBase.OnDataUpdated">
            <summary>
            Raises the <see cref="E:Infragistics.DataManagerBase.DataUpdated"/> event.
            </summary>
        </member>
        <member name="M:Infragistics.DataManagerBase.OnCurrentItemChanged(System.Object)">
            <summary>
            Raises the <see cref="E:Infragistics.DataManagerBase.CurrentItemChanged"/> event.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Infragistics.DataManagerBase.Sort">
            <summary>
            Gets an observable collection of sorts, from primary sort to final sort.
            Sorts after the first are only applied if all the previous sorts were equal.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.ConditionalFormattingRules">
            <summary>
            Gets / sets the collection of conditional formatting rules which will be requesting data.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.Filters">
            <summary>
            Gets / sets the <see cref="T:Infragistics.RecordFilterCollection"/> which will be applied to the records during the databinding.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.Summaries">
            <summary>
            Gets / sets the <see cref="T:Infragistics.SummaryDefinitionCollection"/> which will be applied to the records during the databinding.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.SummaryResultCollection">
            <summary>
            The collection of <see cref="T:Infragistics.SummaryResult"/> objects that will be populated by the <see cref="T:Infragistics.DataManagerBase"/>.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.SummaryExecution">
            <summary>
            Gets / sets the <see cref="P:Infragistics.DataManagerBase.SummaryExecution"/> which will determine where the summaries should be calculated by default.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.GroupByObject">
            <summary>
            Gets/Sets the object in which the data that this <see cref="T:Infragistics.DataManagerBase"/> represents, should be grouped by.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.GroupBySortContext">
            <summary>
            Gets/Sets the CurrentSort that will be applied when the data is Grouped by a particular field.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.GroupBySortAscending">
            <summary>
            Gets/Sets the sort direction that should be applied to the field that the underlying data has been grouped by.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.CurrentPage">
            <summary>
            Gets / sets the index of the page of data which should be retrieved from the manager.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.PageSize">
            <summary>
            Gets / sets how many records constitute a page of data
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.EnablePaging">
            <summary>
            Gets / sets whether paging should be used by the manager.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.DataSource">
            <summary>
            Gets or sets the IEnumerable that this <see cref="T:Infragistics.DataManagerBase"/> manages.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.OriginalDataSource">
            <summary>
            Gets or sets the IEnumerable that this <see cref="T:Infragistics.DataManagerBase"/> manages without converting types.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.PageCount">
            <summary>
            Gets the total number of pages available in the data source based on page size.  If 
            <see cref="P:Infragistics.DataManagerBase.EnablePaging"/> is false, this will report 1. 
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.CollectionType">
            <summary>
            The <see cref="T:System.Type"/> that the collection is designed to hold.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.CachedCollectionType">
            <summary>
            A cached version of CollectionType.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.DataType">
            <summary>
            Returns type of data that this IEnumerable represents. 
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.CachedType">
            <summary>
            Gets/Sets a cached version of the <see cref="P:Infragistics.DataManagerBase.DataType"/>.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.CachedTypedInfo">
            <summary>
            Gets/Sets a cached version of the <see cref="P:Infragistics.DataManagerBase.DataType"/>.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.TotalRecordCount">
            <summary>
            Gets the total number of records available from the datasource.
            </summary>
            <remarks>
            This excludes filtering, paging and grouping. 
            </remarks>
        </member>
        <member name="P:Infragistics.DataManagerBase.RecordCount">
            <summary>
            Gets the number of records that can be currently displayed.
            </summary>
            <remarks>
            This takes into account filtering, paging and grouping. 
            </remarks>
        </member>
        <member name="P:Infragistics.DataManagerBase.ICollectionViewData">
            <summary>
            Gets the underlying data source as an <see cref="T:System.ComponentModel.ICollectionView"/>. If the datasource isn't an ICollectionView, null is returned.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.IFilteredCollectionViewData">
            <summary>
            Gets the underlying data source as an <see cref="T:Infragistics.IFilteredCollectionView"/>. If the datasource isn't an IFilteredCollectionView, null is returned.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.IPagedCollectionViewData">
            <summary>
            Gets the underlying data source as an <see cref="T:Infragistics.IPagedCollectionView"/>. If the datasource isn't an IPagedCollectionView, null is returned.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.IListData">
            <summary>
            Gets the underlying data source as an <see cref="T:System.Collections.IList"/>. If the datasource isn't an IList, null is returned.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.IEditableCollectionViewData">
            <summary>
            Gets the underlying data source as an <see cref="T:System.ComponentModel.IEditableCollectionView"/>. If the datasource isn't an IEditableCollectionView, null is returned.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.SupportsDataManipulations">
            <summary>
            Gets/ sets whether data manipulations such as Sorting are supported on this particular data manager.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.SuspendInvalidateDataSource">
            <summary>
            Gets / sets if the DataManager should be prevented from invaliating it's cached data stores, so that 
            multiple actions can be built up and executed at one time.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.AllowCollectionViewOverrides">
            <summary>
            Gets/Sets whether this <see cref="T:Infragistics.DataManagerBase"/> is allowed to set properties for sorting and grouping if DataSource is an ICollectionView
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.MergeDataContexts">
            <summary>
            Gets the list of <see cref="T:Infragistics.MergedDataContext"/> objects, that the manager should be displaying the data as. 
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.SupportsEditing">
            <summary>
            Gets whether editing is supported by the collection.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.SortedFilteredDataSource">
            <summary>
            Gets/sets a cached list of sorted items.
            </summary>		
        </member>
        <member name="P:Infragistics.DataManagerBase.IsSortedFilteredDataSourceCalculated">
            <summary>
            Gets/ sets whether the the SortedFilteredDataSource needs to be recalculated.
            </summary>
        </member>
        <member name="P:Infragistics.DataManagerBase.Defer">
            <summary>
            Prevents operations from happening when the control is in an inconsistant state.
            </summary>
        </member>
        <member name="E:Infragistics.DataManagerBase.CollectionChanged">
            <summary>
            Occurs when the data source has changed and it implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
        </member>
        <member name="E:Infragistics.DataManagerBase.ResolvingData">
            <summary>
            Event raised when paging, filtering, sorting, or groupby actions are changed.
            </summary>
        </member>
        <member name="E:Infragistics.DataManagerBase.NewObjectGeneration">
            <summary>
            Event raised when the <see cref="T:Infragistics.DataManagerBase"/> is attempting to create a new instance of the <see cref="P:Infragistics.DataManagerBase.CachedType"/> object.
            </summary>
        </member>
        <member name="E:Infragistics.DataManagerBase.DataUpdated">
            <summary>
            Event raised when the underlying data changes.
            </summary>
        </member>
        <member name="E:Infragistics.DataManagerBase.CurrentItemChanged">
            <summary>
            Event raised when the currentItem changes.
            </summary>
        </member>
        <member name="T:Infragistics.TypelessDataManager">
            <summary>
            Wraps an IEnumerable to get items while using IList or IQueryable to improve performance if available.
            This particular DataManager doesn't support Sorting, Filtering, or Paging.
            </summary>
            <remarks>
            Currently this DataManager is only used if the underlying data is an Anonymous type.
            </remarks>
        </member>
        <member name="M:Infragistics.TypelessDataManager.SetDataSource(System.Collections.IEnumerable)">
            <summary>
            Sets the <see cref="P:Infragistics.DataManagerBase.DataSource"/> while registering for change notification.
            </summary>
            <param name="source">The IEnumerable to set the DataSource to.</param>
        </member>
        <member name="T:Infragistics.DataManager`1">
            <summary>
            Wraps an IEnumerable to get items while using IList or IQueryable to improve performance if available.
            </summary>
            <typeparam name="T">The type of the IEnumerable<![CDATA[<T>]]> that this data manager manages.</typeparam>
        </member>
        <member name="M:Infragistics.DataManager`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DataManagerBase"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.DataManager`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DataManagerBase"/> class and sets the <see cref="P:Infragistics.DataManagerBase.DataSource"/>.
            </summary>
            <param name="dataSource">The datasource that this datamanager should manage.</param>
        </member>
        <member name="M:Infragistics.DataManager`1.RefreshSummaries">
            <summary>
            Reevaluates the summaries for the ItemsSource bound to this <see cref="T:Infragistics.DataManagerBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.DataManager`1.SetDataSource(System.Collections.IEnumerable)">
            <summary>
            Sets the <see cref="P:Infragistics.DataManagerBase.DataSource"/> while registering for change notification.
            </summary>
            <param name="source">The IEnumerable to set the DataSource to.</param>
        </member>
        <member name="M:Infragistics.DataManager`1.GetDataSource">
            <summary>
            Gets the <see cref="P:Infragistics.DataManagerBase.DataSource"/> associated with this <see cref="T:Infragistics.DataManagerBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.DataManager`1.ResolveRecord(System.Int32)">
            <summary>
            Resolve the specified record at a given index. 
            </summary>
            <param name="recordIndex"></param>
            <returns></returns>
            <remarks> This method only gets called, if the data source isn't of type IList.</remarks>
        </member>
        <member name="M:Infragistics.DataManager`1.ResolveCount">
            <summary>
            Determines the size of the collection by walking through the DataSource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.DataManager`1.OnResolvingData(Infragistics.DataAcquisitionEventArgs)">
            <summary>
            Raises the ResolvingData event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Infragistics.DataManager`1.ClearCachedDataSource(System.Boolean)">
            <summary>
            Clears any cached information that the manager keeps.
            </summary>
        </member>
        <member name="M:Infragistics.DataManager`1.OnDataSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Triggered when the underlying data source's data is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.DataManager`1.ResolveFilteredSortedPagedDataSource">
            <summary>
            Uses the existing paging, sorting, and filtering information to build a cached object for the
            DataManagerBase to use.
            </summary>
        </member>
        <member name="M:Infragistics.DataManager`1.FilterItems(System.Collections.IList)">
            <summary>
            Filters a list of items using the filter operands applied on the <see cref="T:Infragistics.DataManagerBase"/>.
            </summary>
            <param name="items">The items.</param>
            <returns>Filtered list or null if filtering cannot be applied.</returns>
            <remarks>
            This method is added solely for the purpose of fast adding of an item in sorted/filtered list.
            </remarks>
        </member>
        <member name="M:Infragistics.DataManager`1.ApplyClientDataManipulations">
            <summary>
            Applies all Clientside related data manipulations, such as sorting, paging, groupBy and filtering.
            </summary>
        </member>
        <member name="M:Infragistics.DataManager`1.ApplyClientDataManipulations(System.Boolean)">
            <summary>
            Applies all Clientside related data manipulations, such as sorting, paging, groupBy and filtering.
            </summary>
            <param name="setSortedFilteredDataSource">True if the internal filtered datasource should be set.</param>
        </member>
        <member name="M:Infragistics.DataManager`1.BuildMergedGroupings(System.Collections.Generic.List{Infragistics.MergedRowInfo},System.Collections.ObjectModel.ReadOnlyObservableCollection{System.Object},System.Collections.Generic.List{Infragistics.MergedColumnInfo},Infragistics.MergedDataContext,System.Collections.Generic.Dictionary{Infragistics.MergedColumnInfo,System.Boolean})">
            <summary>
            Goes through each grouping returned by an ICollectionView, and flattens it out for merged information.
            </summary>
            <param name="mris"></param>
            <param name="groups"></param>
            <param name="mcis"></param>
            <param name="mdc"></param>
            <param name="lastMciLookup"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.LogicalOperator">
            <summary>
            And enumeration of available operators.
            </summary>
        </member>
        <member name="F:Infragistics.LogicalOperator.And">
            <summary>
            Performs a logical AND operation.
            </summary>
        </member>
        <member name="F:Infragistics.LogicalOperator.Or">
            <summary>
            Performs a logical OR operation.
            </summary>
        </member>
        <member name="T:Infragistics.ComparisonOperator">
            <summary>
            Enum describing operators which can be used for filtering.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.Equals">
            <summary>
            An equality compare is executed.  With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.NotEquals">
            <summary>
            An non equality compare is executed.  With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.GreaterThan">
            <summary>
            A GreaterThan compare is executed. With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.GreaterThanOrEqual">
            <summary>
            A greater than or equal compare is executed.  With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.LessThan">
            <summary>
            A less than compare is executed.  With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.LessThanOrEqual">
            <summary>
            A less than or equal compare is executed.  With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.StartsWith">
            <summary>
            Evaluates if a string begins with a compared value. With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DoesNotStartWith">
            <summary>
            Evaluates if a string does not begin with a compared value. With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.EndsWith">
            <summary>
            Evaluates if a string ends with a compared value. With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DoesNotEndWith">
            <summary>
            Evaluates if a string does not end with a compared value. With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.Contains">
            <summary>
            Evaluates if a string contains a compared value. With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DoesNotContain">
            <summary>
            Evaluates if a string does not contain a compared value. With string values, a case sensitivity flag may effect the result.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeAfter">
            <summary>
            Evaluates if a DateTime object comes after a given input.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeBefore">
            <summary>
            Evaluates if a DateTime object comes prior to a given input.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeToday">
            <summary>
            Evaluates if a DateTime value is today.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeTomorrow">
            <summary>
            Evaluates if a DateTime value is tomorrow.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeYesterday">
            <summary>
            Evaluates if a DateTime value is yesterday.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeThisWeek">
            <summary>
            Evaluates if a DateTime value is in this week.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeNextWeek">
            <summary>
            Evaluates if a DateTime value is in next week.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeLastWeek">
            <summary>
            Evaluates if a DateTime value is in last week.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeThisMonth">
            <summary>
            Evaluates if a DateTime value is in this month.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeLastMonth">
            <summary>
            Evaluates if a DateTime value is in last month.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeNextMonth">
            <summary>
            Evaluates if a DateTime value is in next month.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeThisYear">
            <summary>
            Evaluates if a DateTime value is in this year.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeLastYear">
            <summary>
            Evaluates if a DateTime value is in last year.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeNextYear">
            <summary>
            Evaluates if a DateTime value is in next year.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeYearToDate">
            <summary>
            Evaluates if a DateTime value is in the current year up to today's date.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeLastQuarter">
            <summary>
            Evaluates if a DateTime value is in the last quarter.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeThisQuarter">
            <summary>
            Evaluates if a DateTime value is in this quarter.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeNextQuarter">
            <summary>
            Evaluates if a DateTime value is in the next quarter.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeJanuary">
            <summary>
            Evaluates that a DateTime is in January.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeFebruary">
            <summary>
            Evaluates that a DateTime is in February.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeMarch">
            <summary>
            Evaluates that a DateTime is in March.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeApril">
            <summary>
            Evaluates that a DateTime is in April.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeMay">
            <summary>
            Evaluates that a DateTime is in May.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeJune">
            <summary>
            Evaluates that a DateTime is in June.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeJuly">
            <summary>
            Evaluates that a DateTime is in July.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeAugust">
            <summary>
            Evaluates that a DateTime is in August.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeSeptember">
            <summary>
            Evaluates that a DateTime is in Sepember.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeOctober">
            <summary>
            Evaluates that a DateTime is in October.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeNovember">
            <summary>
            Evaluates that a DateTime is in November.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeDecember">
            <summary>
            Evaluates that a DateTime is in December.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeQuarter1">
            <summary>
            Evaluates that a DateTime is in the first quarter.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeQuarter2">
            <summary>
            Evaluates that a DateTime is in the second quarter.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeQuarter3">
            <summary>
            Evaluates that a DateTime is in the third quarter.
            </summary>
        </member>
        <member name="F:Infragistics.ComparisonOperator.DateTimeQuarter4">
            <summary>
            Evaluates that a DateTime is in the forth quarter.
            </summary>
        </member>
        <member name="T:Infragistics.LinqSummaryOperator">
            <summary>
            An enum used by summary to designate that a LINQ summary should be use.
            </summary>
        </member>
        <member name="F:Infragistics.LinqSummaryOperator.Count">
            <summary>
            Use the LINQ Count summary
            </summary>
        </member>
        <member name="F:Infragistics.LinqSummaryOperator.Minimum">
            <summary>
            Use the LINQ Minimum summary.
            </summary>
        </member>
        <member name="F:Infragistics.LinqSummaryOperator.Maximum">
            <summary>
            Use the LINQ Maximum summary.
            </summary>
        </member>
        <member name="F:Infragistics.LinqSummaryOperator.Sum">
            <summary>
            Use the LINQ Sum summary.
            </summary>
        </member>
        <member name="F:Infragistics.LinqSummaryOperator.Average">
            <summary>
            Use the LINQ Average summary.
            </summary>
        </member>
        <member name="T:Infragistics.SummaryExecution">
            <summary>
            Enum that is used to determine when a summary should be calculated.
            </summary>
        </member>
        <member name="F:Infragistics.SummaryExecution.PriorToFilteringAndPaging">
            <summary>
            Summary is executed prior to paging and filtering.
            </summary>
        </member>
        <member name="F:Infragistics.SummaryExecution.AfterFilteringBeforePaging">
            <summary>
            Summary is executed prior to paging but after filtering.
            </summary>
        </member>
        <member name="F:Infragistics.SummaryExecution.AfterFilteringAndPaging">
            <summary>
            Summary is executed after paging and filtering.
            </summary>
        </member>
        <member name="T:Infragistics.EvaluationStage">
            <summary>
            Enumeration which lists when conditional formatting data will be gathered.
            </summary>
        </member>
        <member name="F:Infragistics.EvaluationStage.None">
            <summary>
            GatherData will not be called.
            </summary>
        </member>
        <member name="F:Infragistics.EvaluationStage.PriorToFilteringAndPaging">
            <summary>
            GatherData will be called prior to filtering and paging.
            </summary>
        </member>
        <member name="F:Infragistics.EvaluationStage.AfterFilteringBeforePaging">
            <summary>
            GatherData will be called after filtering and before paging.
            </summary>
        </member>
        <member name="F:Infragistics.EvaluationStage.AfterFilteringAndPaging">
            <summary>
            GatherData will be called after filtering and after paging.
            </summary>
        </member>
        <member name="T:Infragistics.HandleableEventArgs">
            <summary>
            Event argument for events in which the user wants to mark the event handled.
            </summary>
        </member>
        <member name="P:Infragistics.HandleableEventArgs.Handled">
            <summary>
            Gets / sets if the event is to be considered handled.
            </summary>
        </member>
        <member name="T:Infragistics.HandleableObjectGenerationEventArgs">
            <summary>
            Event argument used when the DataManager has a request for a new data object.
            </summary>
        </member>
        <member name="P:Infragistics.HandleableObjectGenerationEventArgs.NewObject">
            <summary>
            Gets / sets the instance of the object that will be used by the DataManager rather then attempting to create a new instance of the object using the default constructor.
            </summary>
        </member>
        <member name="P:Infragistics.HandleableObjectGenerationEventArgs.ObjectType">
            <summary>
            Gets the <see cref="T:System.Type"/> of object that the DataManager is handling. 
            </summary>
        </member>
        <member name="P:Infragistics.HandleableObjectGenerationEventArgs.CollectionType">
            <summary>
            Gets the <see cref="T:System.Type"/> which is contained in the underlying collection.
            </summary>
        </member>
        <member name="T:Infragistics.DataAcquisitionEventArgs">
            <summary>
            Event argument used when the DataManager is processing its data 
            </summary>
        </member>
        <member name="P:Infragistics.DataAcquisitionEventArgs.DataSource">
            <summary>
            Gets / sets the IList that will be applied to the data manager.
            </summary>
        </member>
        <member name="P:Infragistics.DataAcquisitionEventArgs.EnablePaging">
            <summary>
            Gets if the DataManager expects paged data.
            </summary>
        </member>
        <member name="P:Infragistics.DataAcquisitionEventArgs.PageSize">
            <summary>
            Gets the maximum number of rows expected by the DataManager.  		
            </summary>
            <remarks>
            Used primarily when EnablePaging is true.
            </remarks>
        </member>
        <member name="P:Infragistics.DataAcquisitionEventArgs.CurrentPage">
            <summary>
            Gets the current page index
            </summary>
        </member>
        <member name="P:Infragistics.DataAcquisitionEventArgs.CurrentSort">
            <summary>
            Gets a collection <see cref="T:Infragistics.SortContext"/> which will be applied.
            </summary>
        </member>
        <member name="P:Infragistics.DataAcquisitionEventArgs.GroupByContext">
            <summary>
            Gets the GroupBy that will be applied to the data.
            </summary>
        </member>
        <member name="P:Infragistics.DataAcquisitionEventArgs.Filters">
            <summary>
            Gets a collection that lists what filters will be applied.
            </summary>
        </member>
        <member name="T:Infragistics.InvalidEnumeratorException">
            <summary>
            An <see cref="T:System.Exception"/> that is thrown when the GetEnumerator method of the IEnumerable returns null for the <see cref="T:Infragistics.DataManagerBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.InvalidEnumeratorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InvalidEnumeratorException"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.InvalidEnumeratorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InvalidEnumeratorException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
        </member>
        <member name="M:Infragistics.InvalidEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InvalidEnumeratorException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="T:Infragistics.DataSourceDoesNotSupportIListException">
            <summary>
            An <see cref="T:System.Exception"/> that is thrown when the GetEnumerator method of the IEnumerable returns null for the <see cref="T:Infragistics.DataManagerBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.DataSourceDoesNotSupportIListException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DataSourceDoesNotSupportIListException"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.DataSourceDoesNotSupportIListException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DataSourceDoesNotSupportIListException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
        </member>
        <member name="M:Infragistics.DataSourceDoesNotSupportIListException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DataSourceDoesNotSupportIListException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="T:Infragistics.DataObjectTypeMismatchException">
            <summary>
            An <see cref="T:System.Exception"/> that is thrown when the GetEnumerator method of the IEnumerable returns null for the <see cref="T:Infragistics.DataManagerBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.DataObjectTypeMismatchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DataObjectTypeMismatchException"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.DataObjectTypeMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DataObjectTypeMismatchException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
        </member>
        <member name="M:Infragistics.DataObjectTypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.DataObjectTypeMismatchException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="T:Infragistics.RequireEmptyConstructorException">
            <summary>
            An <see cref="T:System.Exception"/> that is thrown when the GetEnumerator method of the IEnumerable returns null for the <see cref="T:Infragistics.DataManagerBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.RequireEmptyConstructorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.RequireEmptyConstructorException"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.RequireEmptyConstructorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.RequireEmptyConstructorException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
        </member>
        <member name="M:Infragistics.RequireEmptyConstructorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.RequireEmptyConstructorException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="T:Infragistics.DataManagerProvider">
            <summary>
            An abstract class, that provides information to create a custom DataManager.
            </summary>
        </member>
        <member name="M:Infragistics.DataManagerProvider.ResolveDataManagerType">
            <summary>
            Returns the type of the DataManager that it represents, so that it can be created indirectly.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.ComparisonCondition">
            <summary>
            Represents a <see cref="T:Infragistics.ComparisonConditionBase"/> object that is based on a <see cref="T:Infragistics.ComparisonOperator"/> operator.
            </summary>
        </member>
        <member name="T:Infragistics.ComparisonConditionBase">
            <summary>
            A base class for ComparisonConditions for filtering.
            </summary>
        </member>
        <member name="T:Infragistics.IFilterCondition">
            <summary>
            Interface that defines an object that can participate in filtering.
            </summary>
        </member>
        <member name="T:Infragistics.IExpressConditions">
            <summary>
            An interface which will be used by filtering to generate the expression to be applied.
            </summary>
        </member>
        <member name="M:Infragistics.IExpressConditions.GetCurrentExpression(Infragistics.FilterContext)">
            <summary>
            Creates an expression based on a given <see cref="T:Infragistics.FilterContext"/>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IExpressConditions.GetCurrentExpression">
            <summary>
            Creates an expression. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.IFilterCondition.Parent">
            <summary>
            The <see cref="T:Infragistics.IRecordFilter"/> object that ultimately is the parent of this object.
            </summary>
        </member>
        <member name="M:Infragistics.ComparisonConditionBase.GetCurrentExpression(Infragistics.FilterContext)">
            <summary>
            Generates the current expression for this <see cref="T:Infragistics.ComparisonConditionBase"/> using the inputted context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ComparisonConditionBase.GetCurrentExpression">
            <summary>
            Generates the current expression for this <see cref="T:Infragistics.ComparisonConditionBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ComparisonConditionBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Infragistics.ComparisonConditionBase.Parent">
            <summary>
            The <see cref="T:Infragistics.IRecordFilter"/> object that ultimately is the parent of this object.
            </summary>
        </member>
        <member name="E:Infragistics.ComparisonConditionBase.PropertyChanged">
            <summary>
            Event raised when a property on this object changes.
            </summary>
        </member>
        <member name="M:Infragistics.ComparisonCondition.GetCurrentExpression(Infragistics.FilterContext)">
            <summary>
            Generates the current expression for this <see cref="T:Infragistics.ComparisonConditionBase"/> using the inputted context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ComparisonCondition.GetCurrentExpression">
            <summary>
            Generates the current expression for this <see cref="T:Infragistics.ComparisonConditionBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.ComparisonCondition.Operator">
            <summary>
            Gets / sets the <see cref="T:Infragistics.ComparisonCondition"/> that should be applied.
            </summary>
        </member>
        <member name="P:Infragistics.ComparisonCondition.FilterValue">
            <summary>
            Gets / sets the value that will be used to build the filter.
            </summary>
        </member>
        <member name="P:Infragistics.ComparisonCondition.CaseSensitive">
            <summary>
            Gets / sets if the filter that will be built from this term will be case sensitive.		
            </summary>
            <remarks >
            This value is only used for string columns.
            </remarks>
        </member>
        <member name="T:Infragistics.ConditionCollection">
            <summary>
            A collection of <see cref="T:Infragistics.IFilterCondition"/> objects which represent a group of conditions bound by a <see cref="P:Infragistics.ConditionCollection.LogicalOperator"/>
            </summary>
        </member>
        <member name="T:Infragistics.IGroupFilterConditions">
            <summary>
            Interface that describes and object that can contain other IFilterCondition objects and will generate an expression for all of them.
            </summary>
        </member>
        <member name="P:Infragistics.IGroupFilterConditions.LogicalOperator">
            <summary>
            The <see cref="P:Infragistics.IGroupFilterConditions.LogicalOperator"/> which will be used to combine all the Conditions listed by this group.
            </summary>
        </member>
        <member name="E:Infragistics.IGroupFilterConditions.CollectionItemChanged">
            <summary>
            Event raised when an Item in the Collection is changed.
            </summary>
        </member>
        <member name="T:Infragistics.IProvidePersistenceLookupKeys">
            <summary>
            Some collections have specific keys that identify them. So, when saving and loading, it's important that these properties
            get set first, so that they can be rehydrated instead of destroyed.
            </summary>
        </member>
        <member name="M:Infragistics.IProvidePersistenceLookupKeys.GetLookupKeys">
            <summary>
            Gets a list of keys that each object in the collection has. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IProvidePersistenceLookupKeys.CanRehydrate(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Looks through the keys, and determines that all the keys are in the collection, and that the same about of objects are in the collection.
            If this isn't the case, false is returned, and the Control Persistence Framework, will not try to reuse the object that are already in the collection.
            </summary>
            <param name="lookupKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ConditionCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ConditionCollection.RemoveItemSilently(Infragistics.IFilterCondition)">
            <summary>
            Removes the item at the specified index without raising any events.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.ConditionCollection.AddItem(System.Int32,Infragistics.IFilterCondition)">
            <summary>
            Adds the item at the specified index. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.ConditionCollection.ResetItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.ConditionCollection.InsertItem(System.Int32,Infragistics.IFilterCondition)">
            <summary>
            Adds an item to the collection at a given index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.ConditionCollection.ResetItemsSilently">
            <summary>
            Removes all items from the collection without firing any events.
            </summary>
        </member>
        <member name="M:Infragistics.ConditionCollection.GetCurrentExpression">
            <summary>
            Generates the current expression for this <see cref="T:Infragistics.ConditionCollection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ConditionCollection.GetCurrentExpression(Infragistics.FilterContext)">
            <summary>
            Generates the current expression for this <see cref="T:Infragistics.ConditionCollection"/> using the inputted context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ConditionCollection.OnCollectionItemChanged">
            <summary>
            Raises the CollectionItemChanged event.
            </summary>
        </member>
        <member name="M:Infragistics.ConditionCollection.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Infragistics.ConditionCollection.ClearSilently">
            <summary>
            Removes all the elements of the collection without raising any events.
            </summary>
        </member>
        <member name="M:Infragistics.ConditionCollection.AddItemSilently(Infragistics.IFilterCondition)">
            <summary>
            Adds an element to the collection without raising any events.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.ConditionCollection.GetLookupKeys">
            <summary>
            Gets a list of keys that each object in the collection has. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.ConditionCollection.CanRehydrate(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Looks through the keys, and determines that all the keys are in the collection, and that the same about of objects are in the collection.
            If this isn't the case, false is returned, and the Control Persistence Framework, will not try to reuse the object that are already in the collection.
            </summary>
            <param name="lookupKeys"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.ConditionCollection.Parent">
            <summary>
            Gets the <see cref="T:Infragistics.IRecordFilter"/> object which contains this object.
            </summary>
        </member>
        <member name="P:Infragistics.ConditionCollection.LogicalOperator">
            <summary>
            Gets / sets the <see cref="P:Infragistics.ConditionCollection.LogicalOperator"/> that will be used to combine all the <see cref="T:Infragistics.IFilterCondition"/> objects in this collection.
            </summary>
        </member>
        <member name="E:Infragistics.ConditionCollection.CollectionItemChanged">
            <summary>
            Event raised when an Item in the Collection is changed.
            </summary>
        </member>
        <member name="E:Infragistics.ConditionCollection.PropertyChanged">
            <summary>
            Event raised when a property on this object changes.
            </summary>
        </member>
        <member name="T:Infragistics.CustomComparisonCondition">
            <summary>
            Represents a <see cref="T:Infragistics.ComparisonConditionBase"/> object that is based on a custom Expression object.
            </summary>
        </member>
        <member name="M:Infragistics.CustomComparisonCondition.GetCurrentExpression">
            <summary>
            Generates the current expression for this <see cref="T:Infragistics.ComparisonConditionBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.CustomComparisonCondition.GetCurrentExpression(Infragistics.FilterContext)">
            <summary>
            Generates the current expression for this <see cref="T:Infragistics.ComparisonConditionBase"/> using the inputted context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.CustomComparisonCondition.Expression">
            <summary>
            Gets / sets the Expression that will be used by the filtering statement.
            </summary>
        </member>
        <member name="P:Infragistics.CustomComparisonCondition.FilterValue">
            <summary>
            Gets / sets the value that will be used to build the filter.
            </summary>
        </member>
        <member name="P:Infragistics.CustomComparisonCondition.FilterOperand">
            <summary>
            Get / set the type of the FilterOperand (via string)
            </summary>
        </member>
        <member name="T:Infragistics.IRecordFilter">
            <summary>
            The IRecordFilter interface is used to define objects which will contain a collection of conditions which will build up filters.
            </summary>
        </member>
        <member name="P:Infragistics.IRecordFilter.FieldName">
            <summary>
            The property on the underlying data object which the filter will be applied to.
            </summary>
        </member>
        <member name="P:Infragistics.IRecordFilter.ObjectType">
            <summary>
            The Type of the object that the filter will be applied to.
            </summary>
        </member>
        <member name="P:Infragistics.IRecordFilter.ObjectTypedInfo">
            <summary>
            The Type of the object along with any PropertyDescriptors.
            </summary>
        </member>
        <member name="P:Infragistics.IRecordFilter.FieldType">
            <summary>
            The Type of the property that is being evaluated.
            </summary>
        </member>
        <member name="P:Infragistics.IRecordFilter.Conditions">
            <summary>
            A Collection of Conditions which will be applied to the object.
            </summary>
        </member>
        <member name="T:Infragistics.RecordFilterCollection">
            <summary>
            A CollectionBase of <see cref="T:Infragistics.IRecordFilter"/> objects which combine to give the the current filter.
            </summary>
        </member>
        <member name="M:Infragistics.RecordFilterCollection.GetCurrentExpression(Infragistics.FilterContext)">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> based on the objects current values.
            </summary>
            <param name="context">The <see cref="T:Infragistics.FilterContext"/> object which will be used as a basis for the Expression being built.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RecordFilterCollection.GetCurrentExpression">
            <summary>
            Creates an <see cref="T:System.Linq.Expressions.Expression"/> based on the objects current values.
            </summary>
            <remarks>
            Not used by this object.
            </remarks>
            <exception cref="T:System.NotImplementedException">Will be raised if this method is used.</exception>
        </member>
        <member name="M:Infragistics.RecordFilterCollection.AddItemSilently(Infragistics.IRecordFilter)">
            <summary>
            Adds an element to the collection without invoking any events.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.RecordFilterCollection.AddItem(System.Int32,Infragistics.IRecordFilter)">
            <summary>
            Adds the item at the specified index. 
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.RecordFilterCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.RecordFilterCollection.ResetItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.RecordFilterCollection.InsertItem(System.Int32,Infragistics.IRecordFilter)">
            <summary>
            Adds an item to the collection at a given index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.RecordFilterCollection.OnCollectionItemChanged">
            <summary>
            Raises the <see cref="E:Infragistics.RecordFilterCollection.CollectionItemChanged"/> event.
            </summary>
        </member>
        <member name="M:Infragistics.RecordFilterCollection.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Infragistics.RecordFilterCollection.PropertyChanged"/> event.
            </summary>
            <param propertyName="propertyName"></param>
        </member>
        <member name="P:Infragistics.RecordFilterCollection.LogicalOperator">
            <summary>
            The <see cref="P:Infragistics.RecordFilterCollection.LogicalOperator"/> which will be used to combine all the terms in the <see cref="T:Infragistics.RecordFilterCollection"/>.
            </summary>
        </member>
        <member name="E:Infragistics.RecordFilterCollection.CollectionItemChanged">
            <summary>
            Raised when an Item in collection is modified.
            </summary>
        </member>
        <member name="E:Infragistics.RecordFilterCollection.PropertyChanged">
            <summary>
            Fired when a property changes on the <see cref="T:Infragistics.RecordFilterCollection"/>.
            </summary>
        </member>
        <member name="T:Infragistics.IRule">
            <summary>
            Defines an interface which will participate the data binding so that it can gather data during the
            data processing.
            </summary>
        </member>
        <member name="M:Infragistics.IRule.GatherData(System.Linq.IQueryable)">
            <summary>
            Allows access to the query at the time so that values can be derived off it for the condition.
            </summary>
        </member>
        <member name="P:Infragistics.IRule.RuleExecution">
            <summary>
            Designates at what stage during the data binding the GatherData needs to be evaluated.
            </summary>		
        </member>
        <member name="T:Infragistics.IBindableItem">
            <summary>
            An interface that should be used to describe whether an object was created from a data source or added adhoc. 
            </summary>
        </member>
        <member name="P:Infragistics.IBindableItem.IsDataBound">
            <summary>
            Gets/sets a value that determines if the object was created from a data source or adhoc. 
            </summary>
        </member>
        <member name="T:Infragistics.IProvideDataItems`1">
            <summary>
            An interface that describes a collection of objects.
            </summary>
            <typeparam name="T">The type of object that is being provided.</typeparam>
        </member>
        <member name="M:Infragistics.IProvideDataItems`1.GetDataItem(System.Int32)">
            <summary>
            Resolves the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IProvideDataItems`1.CreateItem">
            <summary>
            Creates a new object with a default underlying data object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IProvideDataItems`1.CreateItem(System.Object)">
            <summary>
            Creates a new object using the inputted data object.
            </summary>
            <param name="dataItem"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IProvideDataItems`1.AddItem(`0)">
            <summary>
            Adds a new object to the collection
            </summary>
            <param name="addedObject"></param>
        </member>
        <member name="M:Infragistics.IProvideDataItems`1.RemoveItem(`0)">
            <summary>
            Removes an object from the collection
            </summary>
            <param name="removedObject"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IProvideDataItems`1.RemoveRange(System.Collections.Generic.IList{`0})">
            <summary>
            Removes the specified range of items from the collection.
            </summary>
            <param name="itemsToRemove"></param>
        </member>
        <member name="M:Infragistics.IProvideDataItems`1.InsertItem(System.Int32,`0)">
            <summary>
            Adds an item to the collection at a given index.
            </summary>
            <param name="index"></param>
            <param name="insertedObject"></param>
        </member>
        <member name="P:Infragistics.IProvideDataItems`1.DataCount">
            <summary>
            Gets the amount of objects in the collection.
            </summary>
        </member>
        <member name="T:Infragistics.IFilteredCollectionView">
            <summary>
            An interface which describes how to provide filtering information to a datasource.
            </summary>
        </member>
        <member name="P:Infragistics.IFilteredCollectionView.CanFilter">
            <summary>
            Whether filtering is supported on a particular datasource.
            </summary>
        </member>
        <member name="P:Infragistics.IFilteredCollectionView.FilterConditions">
            <summary>
            A collection of FilterConditions that should be applied to the datasource.
            </summary>
        </member>
        <member name="T:Infragistics.ISupportLinqSummaries">
            <summary>
            An interface used to designate a summary that can use the LINQ summary structure.
            </summary>
        </member>
        <member name="P:Infragistics.ISupportLinqSummaries.SummaryType">
            <summary>
            Gets the <see cref="T:Infragistics.LinqSummaryOperator"/> which designates which LINQ summary to use.
            </summary>
        </member>
        <member name="P:Infragistics.ISupportLinqSummaries.SummaryContext">
            <summary>
            Gets / sets the <see cref="P:Infragistics.ISupportLinqSummaries.SummaryContext"/> that will be used by the summary framework to build the summary.
            </summary>
        </member>
        <member name="T:Infragistics.SummaryCalculatorBase">
            <summary>
            Provides a base class for SummaryCalculators for the Summary framework.
            </summary>
        </member>
        <member name="P:Infragistics.SummaryCalculatorBase.SummaryExecution">
            <summary>
            Gets the <see cref="P:Infragistics.SummaryCalculatorBase.SummaryExecution"/>, indicating when the summary will be applied.  
            </summary>
            <remarks>
            When overridden, this can be used to indicate when an individual summary should be evaluated.   Depending 
            on when the summary is executed the final result of the evaluation can change.
            </remarks>
        </member>
        <member name="T:Infragistics.SynchronousSummaryCalculator">
            <summary>
            A summary that will be executed during the normal databinding in process.
            </summary>
        </member>
        <member name="M:Infragistics.SynchronousSummaryCalculator.Summarize(System.Linq.IQueryable,System.String)">
            <summary>
            Calculates the summary information from the records provided by the query.
            </summary>
            <param name="data">The LINQ that provides the data which is currently available.</param>
            <param name="fieldKey">The name of the field being acted on.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.SummaryDefinition">
            <summary>
            A class which describes the type of summary being applied.
            </summary>
        </member>
        <member name="F:Infragistics.SummaryDefinition.ColumnKeyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.SummaryDefinition.ColumnKey"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.SummaryDefinition.ColumnKey">
            <summary>
            Gets / sets the key of the column which this filter applies to.
            </summary>
        </member>
        <member name="P:Infragistics.SummaryDefinition.SummaryOperand">
            <summary>
            Get / set the <see cref="T:Infragistics.SummaryOperandBase"/> which designates which summary should be executed.
            </summary>
        </member>
        <member name="T:Infragistics.SummaryDefinitionCollection">
            <summary>
            A collection of <see cref="T:Infragistics.SummaryDefinition"/> objects.
            </summary>
        </member>
        <member name="M:Infragistics.SummaryDefinitionCollection.GetDefinitionsByKey(System.String)">
            <summary>
            Returns a collection of <see cref="T:Infragistics.SummaryDefinition"/> which are applied to a given column based on it's key value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.SummaryDefinitionCollection.GetDefinitionsBySummaryExecution(Infragistics.SummaryExecution)">
            <summary>
            Returns a collection of <see cref="T:Infragistics.SummaryDefinition"/>  based on when the summary is applied during databind.
            </summary>
            <param name="summaryExecution"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.SummaryDefinitionCollection.GetDefinitionsBySummaryExecution(Infragistics.SummaryExecution,System.Boolean)">
            <summary>
            Returns a collection of <see cref="T:Infragistics.SummaryDefinition"/>  based on when the summary is applied during databind.
            </summary>
            <param name="summaryExecution"></param>
            <param name="includeNulls"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.SummaryDefinitionCollection.AddItemSilently(Infragistics.SummaryDefinition)">
            <summary>
            Adds an element to the collection without invoking any events.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Infragistics.SummaryOperandBase">
            <summary>
            A base class for operands that will be used in the Summary framework which contains information 
            which is needed for display.
            </summary>
        </member>
        <member name="M:Infragistics.SummaryOperandBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.SummaryOperandBase"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.SummaryOperandBase.SelectionDisplayLabelProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.SummaryOperandBase.SelectionDisplayLabel"/> dependency property. 
            </summary>
        </member>
        <member name="F:Infragistics.SummaryOperandBase.RowDisplayLabelProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.SummaryOperandBase.RowDisplayLabel"/> dependency property. 
            </summary>
        </member>
        <member name="F:Infragistics.SummaryOperandBase.FormatStringProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.SummaryOperandBase.FormatString"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.SummaryOperandBase.DefaultSelectionDisplayLabel">
            <summary>
            Get's the default text that will be displayed in the drop down for this <see cref="T:Infragistics.SummaryOperandBase"/>
            </summary>
        </member>
        <member name="P:Infragistics.SummaryOperandBase.DefaultRowDisplayLabel">
            <summary>
            Get's the default text that will be displayed in a SummaryRow when this <see cref="T:Infragistics.SummaryOperandBase"/> is selected.
            </summary>
        </member>
        <member name="P:Infragistics.SummaryOperandBase.SelectionDisplayLabel">
            <summary>
            Gets the string that will be displayed in the drop down for this <see cref="T:Infragistics.SummaryOperandBase"/>
            </summary>
        </member>
        <member name="P:Infragistics.SummaryOperandBase.SelectionDisplayLabelResolved">
            <summary>
            Gets the value that will be displayed in the SummaryRow.
            </summary>
        </member>
        <member name="P:Infragistics.SummaryOperandBase.RowDisplayLabel">
            <summary>
            Gets / sets the string that will be displayed in the SummaryRow when this <see cref="T:Infragistics.SummaryOperandBase"/> is selected.
            </summary>
        </member>
        <member name="P:Infragistics.SummaryOperandBase.RowDisplayLabelResolved">
            <summary>
            Gets the value that will be displayed in the SummaryRow.
            </summary>
        </member>
        <member name="P:Infragistics.SummaryOperandBase.FormatString">
            <summary>
            Gets/Sets the format string that will be applied the value of this summary. 
            </summary>
        </member>
        <member name="P:Infragistics.SummaryOperandBase.SummaryCalculator">
            <summary>
            Gets the <see cref="P:Infragistics.SummaryOperandBase.SummaryCalculator"/> which will be used to calculate the summary.
            </summary>
        </member>
        <member name="P:Infragistics.SummaryOperandBase.LinqSummaryOperator">
            <summary>
            Gets the operator that will be associated with this operand.
            </summary>						
        </member>
        <member name="P:Infragistics.SummaryOperandBase.IsApplied">
            <summary>
            Gets / sets if the summary should processed for this summary operand.
            </summary>
        </member>
        <member name="T:Infragistics.SummaryResult">
            <summary>
            An object that contains the information related to an executed summary.
            </summary>
        </member>
        <member name="M:Infragistics.SummaryResult.#ctor(Infragistics.SummaryDefinition,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.SummaryResult"/> class.
            </summary>
            <param name="definition">The <see cref="P:Infragistics.SummaryResult.SummaryDefinition"/> that was used to generate this result.</param>
            <param name="value">The generated value of the result.</param>
        </member>
        <member name="P:Infragistics.SummaryResult.SummaryDefinition">
            <summary>
            Gets the <see cref="P:Infragistics.SummaryResult.SummaryDefinition"/> that was used to generate the result
            </summary>
        </member>
        <member name="P:Infragistics.SummaryResult.Value">
            <summary>
            Gets the value generated by the <see cref="P:Infragistics.SummaryResult.SummaryDefinition"/> when last evaluated.
            </summary>
        </member>
        <member name="T:Infragistics.SummaryResultCollection">
            <summary>
            A collection of <see cref="T:Infragistics.SummaryResult"/> objects which are used to display summary data.
            </summary>
        </member>
        <member name="P:Infragistics.SummaryResultCollection.Item(Infragistics.SummaryOperandBase)">
            <summary>
            Gets the <see cref="T:Infragistics.SummaryResult"/> for a given <see cref="T:Infragistics.SummaryOperandBase"/>.
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.CancellableEventArgs">
            <summary>
            An event argument object with a boolean flag added to track if the event is cancelled.
            </summary>
        </member>
        <member name="P:Infragistics.CancellableEventArgs.Cancel">
            <summary>
            Gets/sets if the event should be cancelled.
            </summary>
        </member>
        <member name="T:Infragistics.CurrentItemEventArgs">
            <summary>
            An event argument object with the item that was currently set.
            </summary>
        </member>
        <member name="P:Infragistics.CurrentItemEventArgs.Item">
            <summary>
            Gets the data object of the newly set current item.
            </summary>
        </member>
        <member name="T:Infragistics.Animation">
            <summary>
            An object that can help to animate anything that needs animating via events.
            </summary>
        </member>
        <member name="M:Infragistics.Animation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Animation"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Animation.Play">
            <summary>
            Resets the Time to 1 and starts the Animation.
            </summary>
        </member>
        <member name="M:Infragistics.Animation.Continue">
            <summary>
            Resumes the animation if it was stopped before finishing. 
            </summary>
        </member>
        <member name="M:Infragistics.Animation.Stop">
            <summary>
            Ends the currently running animation.
            </summary>
        </member>
        <member name="M:Infragistics.Animation.OnTick">
            <summary>
            Called each step in the Animation.
            </summary>
        </member>
        <member name="M:Infragistics.Animation.OnComplete">
            <summary>
            Called when the animation has reached its end.
            </summary>
        </member>
        <member name="P:Infragistics.Animation.Duration">
            <summary>
            Gets/sets how many steps should be taken for the Start value to reach the End value.
            </summary>
        </member>
        <member name="P:Infragistics.Animation.IsPlaying">
            <summary>
            Gets whether or not the Animation is currently running.
            </summary>
        </member>
        <member name="P:Infragistics.Animation.Time">
            <summary>
            Gets/ sets the current step the animation is in.
            </summary>
        </member>
        <member name="P:Infragistics.Animation.EasingFunction">
            <summary>
            Gets/ sets the easing function that will be used to calculate the animation.
            </summary>
        </member>
        <member name="E:Infragistics.Animation.Tick">
            <summary>
            Fired for each step in the Animation.
            </summary>
        </member>
        <member name="E:Infragistics.Animation.Complete">
            <summary>
            Fired when the animation has reached the end.
            </summary>
        </member>
        <member name="T:Infragistics.AnimationEventArgs">
            <summary>
            The EventArgs that are passed into the <see cref="E:Infragistics.Animation.Tick"/> event.
            </summary>
        </member>
        <member name="P:Infragistics.AnimationEventArgs.Value">
            <summary>
            The value for the next step in the <see cref="T:Infragistics.Animation"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Primitives.BoolToVisibilityConverter">
            <summary>
            Represents the converter that converts Boolean values to and from Visibility enumeration values.. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Primitives.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Primitives.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:Infragistics.InvalidEventNameException">
            <summary>
            An <see cref="T:System.Exception"/> that is thrown when and invalid event name is given to a <see cref="T:Infragistics.Controls.CommandSource"/>
            </summary>
        </member>
        <member name="M:Infragistics.InvalidEventNameException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InvalidEventNameException"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.InvalidEventNameException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InvalidEventNameException"/> class.
            </summary>
            <param name="eventName"></param>
            <param name="elementType"></param>
        </member>
        <member name="M:Infragistics.InvalidEventNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InvalidEventNameException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
        </member>
        <member name="M:Infragistics.InvalidEventNameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.InvalidEventNameException"/> class.
            </summary>
            <param name="message">The message that should be displayed.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="T:Infragistics.Imaging.EncodingProperty">
            <summary>
             Base class for EncodingProperties in <see cref="T:Infragistics.Imaging.IImageEncoder">the IImageEncoder interface</see>/&gt;
            </summary>
        </member>
        <member name="T:Infragistics.Imaging.IImageEncoder">
            <summary>
            An interface used to encode images. The implementations are in the Imaging assembly.
            </summary>
        </member>
        <member name="M:Infragistics.Imaging.IImageEncoder.Encode(System.Windows.Media.Imaging.BitmapSource,System.Collections.Generic.IList{Infragistics.Imaging.EncodingProperty},System.IO.Stream)">
            <summary>
            Encodes the specified image in the stream.
            </summary>
            <param name="image">The image.</param>
            <param name="encodingProperties">A list of encoding properties. Each encoder provides subclasses of EncodingProperty with their specific ones. If it's null, default values will be used. </param>
            <param name="stream">The stream where the image will be serialized to</param>
        </member>
        <member name="P:Infragistics.Imaging.IImageEncoder.ImageFormat">
            <summary>
            Gets the image format supported by the encoder.
            </summary>
            <value>The image format.</value>
        </member>
        <member name="T:Infragistics.Imaging.ImageFormat">
            <summary>
            Class equivalent to System.Drawing.ImageFormat used for Imaging support
            </summary>
        </member>
        <member name="F:Infragistics.Imaging.ImageFormat.Dib">
            <summary>
            Static variable for Dib image format
            </summary>
        </member>
        <member name="F:Infragistics.Imaging.ImageFormat.Emf">
            <summary>
            Static variable for Emf image format
            </summary>
        </member>
        <member name="F:Infragistics.Imaging.ImageFormat.Gif">
            <summary>
            Static variable for Gif image format
            </summary>
        </member>
        <member name="F:Infragistics.Imaging.ImageFormat.Jpeg">
            <summary>
            Static variable for Jpeg image format
            </summary>
        </member>
        <member name="F:Infragistics.Imaging.ImageFormat.Png">
            <summary>
            Static variable for Png image format
            </summary>
        </member>
        <member name="F:Infragistics.Imaging.ImageFormat.Tiff">
            <summary>
            Static variable for Tiff image format
            </summary>
        </member>
        <member name="M:Infragistics.Imaging.ImageFormat.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Imaging.ImageFormat"/> class.
            </summary>
            <param name="formatGuid">The <see cref="P:Infragistics.Imaging.ImageFormat.Guid"/> used to identify this <see cref="T:Infragistics.Imaging.ImageFormat"/>.</param>
        </member>
        <member name="P:Infragistics.Imaging.ImageFormat.Guid">
            <summary>
            Gets the <see cref="P:Infragistics.Imaging.ImageFormat.Guid"/> that identifies this <see cref="T:Infragistics.Imaging.ImageFormat"/>
            </summary>
        </member>
        <member name="T:Infragistics.Input.GestureEventArgs">
            <summary>
            The base class for all gesture events. Also used by Tap, DoubleTap and Hold.
            </summary>
        </member>
        <member name="M:Infragistics.Input.GestureEventArgs.GetPosition(System.Windows.UIElement)">
            <summary>
            Returns the position of the gesture's starting point relative to a given UIElement.
            </summary>
            <param name="relativeTo">The return value will be relative to this element.</param>
            <returns>The gesture's starting point relative to the given UIElement.</returns>
        </member>
        <member name="M:Infragistics.Input.GestureEventArgs.GetPosition(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Returns the position of a given point relative to a given UIElement.
            </summary>
            <param name="relativeTo">The return value will be relative to this element.</param>
            <param name="point">The point to translate.</param>
            <returns>The given point relative to the given UIElement.</returns>
        </member>
        <member name="P:Infragistics.Input.GestureEventArgs.GestureOrigin">
            <summary>
            The point, in unrotated screen coordinates, where the gesture occurred.
            </summary>
        </member>
        <member name="P:Infragistics.Input.GestureEventArgs.TouchPosition">
            <summary>
            The point, in unrotated screen coordinates, where the first touchpoint is now.
            </summary>
        </member>
        <member name="P:Infragistics.Input.GestureEventArgs.OriginalSource">
            <summary>
            The first hit-testable item under the touch point. Determined by a combination of order in the tree and
            Z-order.
            </summary>
        </member>
        <member name="P:Infragistics.Input.GestureEventArgs.Handled">
            <summary>
            If an event handler sets this to true, it stops event bubbling.
            </summary>
        </member>
        <member name="T:Infragistics.Input.DragStartedGestureEventArgs">
            <summary>
            The event args used in the DragStarted event.
            </summary>
        </member>
        <member name="P:Infragistics.Input.DragStartedGestureEventArgs.Direction">
            <summary>
            The direction of the drag gesture, as determined by the initial drag change.
            </summary>
        </member>
        <member name="T:Infragistics.Input.DragDeltaGestureEventArgs">
            <summary>
            The event args used by the DragDelta event.
            </summary>
        </member>
        <member name="P:Infragistics.Input.DragDeltaGestureEventArgs.HorizontalChange">
            <summary>
            The horizontal (X) change for this drag event.
            </summary>
        </member>
        <member name="P:Infragistics.Input.DragDeltaGestureEventArgs.VerticalChange">
            <summary>
            The vertical (Y) change for this drag event.
            </summary>
        </member>
        <member name="P:Infragistics.Input.DragDeltaGestureEventArgs.Direction">
            <summary>
            The direction of the drag gesture, as determined by the initial drag change.
            </summary>
        </member>
        <member name="T:Infragistics.Input.DragCompletedGestureEventArgs">
            <summary>
            The event args used by the DragCompleted event.
            </summary>
        </member>
        <member name="P:Infragistics.Input.DragCompletedGestureEventArgs.HorizontalChange">
            <summary>
            The total horizontal (X) change of the drag event.
            </summary>
        </member>
        <member name="P:Infragistics.Input.DragCompletedGestureEventArgs.VerticalChange">
            <summary>
            The total vertical (Y) change of the drag event.
            </summary>
        </member>
        <member name="P:Infragistics.Input.DragCompletedGestureEventArgs.Direction">
            <summary>
            The direction of the drag gesture, as determined by the initial drag change.
            </summary>
        </member>
        <member name="P:Infragistics.Input.DragCompletedGestureEventArgs.HorizontalVelocity">
            <summary>
            The final horizontal (X) velocity of the drag, if the drag was inertial.
            </summary>
        </member>
        <member name="P:Infragistics.Input.DragCompletedGestureEventArgs.VerticalVelocity">
            <summary>
            The final vertical (Y) velocity of the drag, if the drag was inertial.
            </summary>
        </member>
        <member name="T:Infragistics.Input.FlickGestureEventArgs">
            <summary>
            The event args used by the Flick event.
            </summary>
        </member>
        <member name="P:Infragistics.Input.FlickGestureEventArgs.HorizontalVelocity">
            <summary>
            The horizontal (X) velocity of the flick.
            </summary>
        </member>
        <member name="P:Infragistics.Input.FlickGestureEventArgs.VerticalVelocity">
            <summary>
            The vertical (Y) velocity of the flick.
            </summary>
        </member>
        <member name="P:Infragistics.Input.FlickGestureEventArgs.Angle">
            <summary>
            The angle of the flick.
            </summary>
        </member>
        <member name="P:Infragistics.Input.FlickGestureEventArgs.Direction">
            <summary>
            The direction of the flick gesture, as determined by the flick velocities.
            </summary>
        </member>
        <member name="T:Infragistics.Input.MultiTouchGestureEventArgs">
            <summary>
            The base class for multi-touch gesture event args. Currently used only for
            two-finger (pinch) operations.
            </summary>
        </member>
        <member name="M:Infragistics.Input.MultiTouchGestureEventArgs.GetPosition(System.Windows.UIElement,System.Int32)">
            <summary>
            Returns the position of either of the two touch points (0 or 1) relative to
            the UIElement provided.
            </summary>
            <param name="relativeTo">The return value will be relative to this element.</param>
            <param name="index">The touchpoint to use (0 or 1).</param>
            <returns>The gesture's starting point relative to the given UIElement.</returns>
        </member>
        <member name="P:Infragistics.Input.MultiTouchGestureEventArgs.GestureOrigin2">
            <summary>
            The second touch point's initial position
            </summary>
        </member>
        <member name="P:Infragistics.Input.MultiTouchGestureEventArgs.TouchPosition2">
            <summary>
            The second touch point. The first is stored in GestureEventArgs.
            </summary>
        </member>
        <member name="T:Infragistics.Input.PinchStartedGestureEventArgs">
            <summary>
            The event args used by the PinchStarted event.
            </summary>
        </member>
        <member name="P:Infragistics.Input.PinchStartedGestureEventArgs.Distance">
            <summary>
            The distance between the two touch points.
            </summary>
        </member>
        <member name="P:Infragistics.Input.PinchStartedGestureEventArgs.Angle">
            <summary>
            The angle defined by the two touch points.
            </summary>
        </member>
        <member name="T:Infragistics.Input.PinchGestureEventArgs">
            <summary>
            The event args used by the PinchDelta and PinchCompleted events.
            </summary>
        </member>
        <member name="P:Infragistics.Input.PinchGestureEventArgs.DistanceRatio">
            <summary>
            Returns the ratio of the current distance between touchpoints / the original distance
            between the touchpoints.
            </summary>
        </member>
        <member name="P:Infragistics.Input.PinchGestureEventArgs.TotalAngleDelta">
            <summary>
            Returns the difference in angle between the current touch positions and the original
            touch positions.
            </summary>
        </member>
        <member name="T:Infragistics.Input.GestureListener">
            <summary>
            The GestureListener class raises events similar to those provided by the XNA TouchPanel, but it is designed for
            Silverlight's event-driven model, rather than XNA's loop/polling model, and it also takes care of the hit testing
            and event routing.
            </summary>
        </member>
        <member name="M:Infragistics.Input.GestureListener.Touch_FrameReported(System.Object,System.Windows.Input.TouchFrameEventArgs)">
            <summary>
            Handle touch events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Input.GestureListener.TouchStart">
            <summary>
            A touch has started.
            </summary>
        </member>
        <member name="M:Infragistics.Input.GestureListener.TouchDelta">
            <summary>
            A touch is continuing...
            </summary>
        </member>
        <member name="M:Infragistics.Input.GestureListener.TouchComplete">
            <summary>
            A touch has ended.
            </summary>
        </member>
        <member name="M:Infragistics.Input.GestureListener.RaiseGestureEvent``1(System.Func{Infragistics.Input.GestureListener,System.EventHandler{``0}},System.Func{``0},System.Boolean)">
            <summary>
            This method does all the necessary work to raise a gesture event. It sets the orginal source, does the routing,
            handles Handled, and only creates the event args if they are needed.
            </summary>
            <typeparam name="T">This is the type of event args that will be raised.</typeparam>
            <param name="eventGetter">Gets the specific event to raise.</param>
            <param name="argsGetter">Lazy creator function for the event args.</param>
            <param name="releaseMouseCapture">Indicates whether the mouse capture should be released </param>
        </member>
        <member name="E:Infragistics.Input.GestureListener.GestureBegin">
            <summary>
            The GestureBegin event.
            </summary>
        </member>
        <member name="E:Infragistics.Input.GestureListener.GestureCompleted">
            <summary>
            The GestureCompleted event.
            </summary>
        </member>
        <member name="E:Infragistics.Input.GestureListener.Tap">
            <summary>
            The Tap event (touch, release, no movement).
            </summary>
        </member>
        <member name="E:Infragistics.Input.GestureListener.DoubleTap">
            <summary>
            The DoubleTap event is raised instead of Tap if the time between two taps is short eonugh.
            </summary>
        </member>
        <member name="E:Infragistics.Input.GestureListener.Hold">
            <summary>
            The Hold event (touch and hold for one second)
            </summary>
        </member>
        <member name="E:Infragistics.Input.GestureListener.DragStarted">
            <summary>
            The DragStarted event.
            </summary>
        </member>
        <member name="E:Infragistics.Input.GestureListener.DragDelta">
            <summary>
            The DragDelta event.
            </summary>
        </member>
        <member name="E:Infragistics.Input.GestureListener.DragCompleted">
            <summary>
            The DragCompleted event. Will be raised on touch release after a drag, or
            when a second touch point is added.
            </summary>
        </member>
        <member name="E:Infragistics.Input.GestureListener.Flick">
            <summary>
            The Flick event. Raised when a drag that was fast enough ends with a release.
            </summary>
        </member>
        <member name="E:Infragistics.Input.GestureListener.PinchStarted">
            <summary>
            The PinchStarted event.
            </summary>
        </member>
        <member name="E:Infragistics.Input.GestureListener.PinchDelta">
            <summary>
            Any two-touch point (two finger) operation.
            </summary>
        </member>
        <member name="E:Infragistics.Input.GestureListener.PinchCompleted">
            <summary>
            The end of a pinch operation.
            </summary>
        </member>
        <member name="T:Infragistics.Input.GestureService">
            <summary>
            The GestureService class is the helper for getting and setting GestureListeners
            on elements.
            </summary>
        </member>
        <member name="M:Infragistics.Input.GestureService.GetGestureListener(System.Windows.DependencyObject)">
            <summary>
            Gets a GestureListener for the new element. Will create a new one if necessary.
            </summary>
            <param name="obj">The object to get the GestureListener from.</param>
            <returns>Either the previously existing GestureListener, or a new one.</returns>
        </member>
        <member name="M:Infragistics.Input.GestureService.GetGestureListenerInternal(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Gets the GestureListener on an element. If one is not set, can create a new one
            so that this will never return null, depending on the state of the createIfMissing
            flag.
            </summary>
            <param name="obj">The object to get the GestureListener from.</param>
            <param name="createIfMissing">When this is true, if the attached property was not set on the element, it will create one and set it on the element.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Input.GestureService.SetGestureListener(System.Windows.DependencyObject,Infragistics.Input.GestureListener)">
            <summary>
            Sets the GestureListener on an element. Needed for XAML, but should not be used in code. Use
            GetGestureListener instead, which will create a new instance if one is not already set, to
            add your handlers to an element.
            </summary>
            <param name="obj">The object to set the GestureListener on.</param>
            <param name="value">The GestureListener.</param>
        </member>
        <member name="M:Infragistics.Input.GestureService.SetGestureListenerInternal(System.Windows.DependencyObject,Infragistics.Input.GestureListener)">
            <summary>
            This is used to set the value of the attached DependencyProperty internally.
            </summary>
            <param name="obj">The object to set the GestureListener on.</param>
            <param name="value">The GestureListener.</param>
        </member>
        <member name="F:Infragistics.Input.GestureService.GestureListenerProperty">
            <summary>
            The definition of the GestureListener attached DependencyProperty.
            </summary>
        </member>
        <member name="M:Infragistics.Input.MathHelpers.GetAngle(System.Double,System.Double)">
            <summary>
            Return the angle of the hypotenuse of a triangle with
            sides defined by deltaX and deltaY.
            </summary>
            <param name="deltaX">Change in X.</param>
            <param name="deltaY">Change in Y.</param>
            <returns>The angle (in degrees).</returns>
        </member>
        <member name="M:Infragistics.Input.MathHelpers.GetDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Return the distance between two points
            </summary>
            <param name="p0">The first point.</param>
            <param name="p1">The second point.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:Infragistics.Input.MathHelpers.ToPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Helper extension method for turning XNA's Vector2 type into a Point
            </summary>
            <param name="v">The Vector2.</param>
            <returns>The point.</returns>
        </member>
        <member name="T:Infragistics.Input.SafeRaise">
            <summary>
            A helper class for raising events safely.
            </summary>
        </member>
        <member name="M:Infragistics.Input.SafeRaise.Raise(System.EventHandler,System.Object)">
            <summary>
            Raises an event in a thread-safe manner, also does the null check.
            </summary>
            <param name="eventToRaise">The event to raise.</param>
            <param name="sender">The event sender.</param>
        </member>
        <member name="M:Infragistics.Input.SafeRaise.Raise(System.EventHandler{System.EventArgs},System.Object)">
            <summary>
            Raises an event in a thread-safe manner, also does the null check.
            </summary>
            <param name="eventToRaise">The event to raise.</param>
            <param name="sender">The event sender.</param>
        </member>
        <member name="M:Infragistics.Input.SafeRaise.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises an event in a thread-safe manner, also does the null check.
            </summary>
            <typeparam name="T">The event args type.</typeparam>
            <param name="eventToRaise">The event to raise.</param>
            <param name="sender">The event sender.</param>
            <param name="args">The event args.</param>
        </member>
        <member name="M:Infragistics.Input.SafeRaise.Raise``1(System.EventHandler{``0},System.Object,Infragistics.Input.SafeRaise.GetEventArgs{``0})">
            <summary>
            Raise an event in a thread-safe manner, with the required null check. Lazily creates event args.
            </summary>
            <typeparam name="T">The event args type.</typeparam>
            <param name="eventToRaise">The event to raise.</param>
            <param name="sender">The event sender.</param>
            <param name="getEventArgs">The delegate to return the event args if needed.</param>
        </member>
        <member name="T:Infragistics.Input.SafeRaise.GetEventArgs`1">
            <summary>
            This is a method that returns event args, used for lazy creation.
            </summary>
            <typeparam name="T">The event type.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Infragistics.IProvidePropertyPersistenceSettings">
            <summary>
            Allows objects to to specify which properties should be saved when the PersistenceManager goes to save it.
            </summary>
        </member>
        <member name="M:Infragistics.IProvidePropertyPersistenceSettings.FinishedLoadingPersistence">
            <summary>
            Allows an object to perform an operation, after it's been loaded.
            </summary>
        </member>
        <member name="P:Infragistics.IProvidePropertyPersistenceSettings.PropertiesToIgnore">
            <summary>
            Gets a List of properties that shouldn't be saved when the PersistenceManager goes to save them.
            </summary>
        </member>
        <member name="P:Infragistics.IProvidePropertyPersistenceSettings.PriorityProperties">
            <summary>
            Gets a List of properties that should be applied, before even trying to look at any other property on the object.
            </summary>
        </member>
        <member name="T:Infragistics.INeedInitializationForPersistence">
            <summary>
            Allows an object to perform some sort of initialization, before it is loaded via the Control Persistence Framework.
            </summary>
        </member>
        <member name="M:Infragistics.INeedInitializationForPersistence.InitObject(System.Object)">
            <summary>
            This method is used to setup the object that was just created. 
            </summary>
            <param name="owner">The object that owns the object being initialized. </param>
        </member>
        <member name="T:Infragistics.IProvideCustomPersistence">
            <summary>
            Allows an object to save and load itself, instead of having the Control Persistence Framework, decie how it should be saved and loaded.
            </summary>
        </member>
        <member name="M:Infragistics.IProvideCustomPersistence.Save">
            <summary>
            Gets the string representation of the object, that can be later be passed into the Load method of this object, in order to rehydrate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.IProvideCustomPersistence.Load(System.Object,System.String)">
            <summary>
            Takes the string that was created in the Save method, and rehydrates the object. 
            </summary>
            <param name="owner">This is the object who owns this object as a property.</param>
            <param name="value"></param>
        </member>
        <member name="T:Infragistics.IProvideCustomObjectPersistence">
            <summary>
            An interface that will interupt the normal saving of an object by the persistence framework, so that it can save itself.
            </summary>
        </member>
        <member name="M:Infragistics.IProvideCustomObjectPersistence.SaveObject">
            <summary>
            Saves the object in simplified terms for the persitence framework
            </summary>
            <returns>A serializable object.</returns>
        </member>
        <member name="M:Infragistics.IProvideCustomObjectPersistence.LoadObject(System.Object)">
            <summary>
            Given the object that was originally stored, the object can now rehydrate itself. 
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Infragistics.PlatformProxy.GetFocusedElement(System.Windows.DependencyObject)">
            <summary>
            Gets the Focused element
            </summary>
            <param name="scopedElement">
            The paramter is specific to wpf, where you would pass the element who you should be scoped to.
            </param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.PlatformProxy.GetRootVisual(System.Windows.DependencyObject)">
            <summary>
            The primary use case of this method is to replace using Application.Current.RootVisual in SL.
            </summary>
            <param name="scopedElement"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.AssemblyVersion">
            <summary>
            An object that provides information useful for setting up information for the Assembly.
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.CompanyName">
            <summary>
            Assembly company name
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.EndCopyrightYear">
            <summary>
            The End Copyright year.
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.SatelliteContractVersion">
            <summary>
            The SatelliteContractVersion
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.MajorMinor">
            <summary>
            The Major and Minor build number of the assembly, such as 9.1
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.Build">
            <summary>
            The Build Number of the assembly, such as 20091
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.Revision">
            <summary>
            The Revision of the Assembly.
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.Version">
            <summary>
            The full version of the Assembly.
            </summary>
        </member>
        <member name="F:Infragistics.AssemblyVersion.Configuration">
            <summary>
            The current build configuration for the assembly.
            </summary>
        </member>
        <member name="T:Infragistics.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infragistics.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infragistics.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Infragistics.Properties.Resources.InvalidSelectedIndex">
            <summary>
              Looks up a localized string similar to SelectedIndex must always be set to a valid value..
            </summary>
        </member>
        <member name="P:Infragistics.Properties.Resources.InvalidSelectedItem">
            <summary>
              Looks up a localized string similar to SelectedItem must always be set to a valid value..
            </summary>
        </member>
        <member name="P:Infragistics.Properties.Resources.TypeConverters_Convert_CannotConvert">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is unable to convert &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Infragistics.Properties.Resources.TypeConverters_ConvertFrom_CannotConvertFromType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot convert from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Infragistics.Properties.Resources.WrapPanel_OnItemHeightOrWidthPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid length value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Infragistics.Properties.Resources.WrapPanel_OnOrientationPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Orientation value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:Infragistics.StringResourceLocationAttribute">
            <summary>
            A custom attribute to specify the location of strings.
            Use: [assembly: StringResourceLocation("Infragistics.Silverlight.Strings")]
            </summary>
        </member>
        <member name="M:Infragistics.StringResourceLocationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Infragistics.StringResourceLocationAttribute"/>
            </summary>
            <param name="location">The location of string</param>
        </member>
        <member name="P:Infragistics.StringResourceLocationAttribute.Location">
            <summary>
            Specifies the location of strings.resx
            </summary>
        </member>
        <member name="T:Infragistics.TiltEffect">
            <summary>
            This code provides attached properties for adding a 'tilt' effect to all 
            controls within a container.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Infragistics.TiltEffect.MaxAngle">
            <summary>
            Maximum amount of tilt, in radians.
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect.MaxDepression">
            <summary>
            Maximum amount of depression, in pixels
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect._originalCacheMode">
            <summary>
            Cache of previous cache modes. Not using weak references for now.
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect.TiltReturnAnimationDelay">
            <summary>
            Delay between releasing an element and the tilt release animation 
            playing.
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect.TiltReturnAnimationDuration">
            <summary>
            Duration of tilt release animation.
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect.currentTiltElement">
            <summary>
            The control that is currently being tilted.
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect.tiltReturnStoryboard">
            <summary>
            The single instance of a storyboard used for all tilts.
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect.tiltReturnXAnimation">
            <summary>
            The single instance of an X rotation used for all tilts.
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect.tiltReturnYAnimation">
            <summary>
            The single instance of a Y rotation used for all tilts.
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect.tiltReturnZAnimation">
            <summary>
            The single instance of a Z depression used for all tilts.
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect.currentTiltElementCenter">
            <summary>
            The center of the tilt element.
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect.wasPauseAnimation">
            <summary>
            Whether the animation just completed was for a 'pause' or not.
            </summary>
        </member>
        <member name="M:Infragistics.TiltEffect.#ctor">
            <summary>
            This is not a constructable class, but it cannot be static because 
            it derives from DependencyObject.
            </summary>
        </member>
        <member name="M:Infragistics.TiltEffect.#cctor">
            <summary>
            Initialize the static properties
            </summary>
        </member>
        <member name="F:Infragistics.TiltEffect.IsTiltEnabledProperty">
            <summary>
            Whether the tilt effect is enabled on a container (and all its 
            children).
            </summary>
        </member>
        <member name="M:Infragistics.TiltEffect.GetIsTiltEnabled(System.Windows.DependencyObject)">
            <summary>
            Gets the IsTiltEnabled dependency property from an object.
            </summary>
            <param name="source">The object to get the property from.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Infragistics.TiltEffect.SetIsTiltEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsTiltEnabled dependency property on an object.
            </summary>
            <param name="source">The object to set the property on.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:Infragistics.TiltEffect.SuppressTiltProperty">
            <summary>
            Suppresses the tilt effect on a single control that would otherwise 
            be tilted.
            </summary>
        </member>
        <member name="M:Infragistics.TiltEffect.GetSuppressTilt(System.Windows.DependencyObject)">
            <summary>
            Gets the SuppressTilt dependency property from an object.
            </summary>
            <param name="source">The object to get the property from.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Infragistics.TiltEffect.SetSuppressTilt(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the SuppressTilt dependency property from an object.
            </summary>
            <param name="source">The object to get the property from.</param>
            <param name="value">The property's value.</param>
        </member>
        <member name="M:Infragistics.TiltEffect.OnIsTiltEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property change handler for the IsTiltEnabled dependency property.
            </summary>
            <param name="target">The element that the property is atteched to.</param>
            <param name="args">Event arguments.</param>
            <remarks>
            Adds or removes event handlers from the element that has been 
            (un)registered for tilting.
            </remarks>
        </member>
        <member name="M:Infragistics.TiltEffect.TiltEffect_ManipulationStarted(System.Object,System.Windows.Input.ManipulationStartedEventArgs)">
            <summary>
            Event handler for ManipulationStarted.
            </summary>
            <param name="sender">sender of the event - this will be the tilt 
            container (eg, entire page).</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Infragistics.TiltEffect.TiltEffect_ManipulationDelta(System.Object,System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Event handler for ManipulationDelta
            </summary>
            <param name="sender">sender of the event - this will be the tilting 
            object (eg a button).</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Infragistics.TiltEffect.TiltEffect_ManipulationCompleted(System.Object,System.Windows.Input.ManipulationCompletedEventArgs)">
            <summary>
            Event handler for ManipulationCompleted.
            </summary>
            <param name="sender">sender of the event - this will be the tilting 
            object (eg a button).</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Infragistics.TiltEffect.TryStartTiltEffect(System.Windows.FrameworkElement,System.Windows.Input.ManipulationStartedEventArgs)">
            <summary>
            Checks if the manipulation should cause a tilt, and if so starts the 
            tilt effect.
            </summary>
            <param name="source">The source of the manipulation (the tilt 
            container, eg entire page).</param>
            <param name="e">The args from the ManipulationStarted event.</param>
        </member>
        <member name="M:Infragistics.TiltEffect.GetCenterToCenterDelta(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Computes the delta between the centre of an element and its 
            container.
            </summary>
            <param name="element">The element to compare.</param>
            <param name="container">The element to compare against.</param>
            <returns>A point that represents the delta between the two centers.</returns>
        </member>
        <member name="M:Infragistics.TiltEffect.BeginTiltEffect(System.Windows.FrameworkElement,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Begins the tilt effect by preparing the control and doing the 
            initial animation.
            </summary>
            <param name="element">The element to tilt.</param>
            <param name="touchPoint">The touch point, in element coordinates.</param>
            <param name="centerPoint">The center point of the element in element
            coordinates.</param>
            <param name="centerDelta">The delta between the 
            <paramref name="element"/>'s center and the container's center.</param>
        </member>
        <member name="M:Infragistics.TiltEffect.PrepareControlForTilt(System.Windows.FrameworkElement,System.Windows.Point)">
            <summary>
            Prepares a control to be tilted by setting up a plane projection and
            some event handlers.
            </summary>
            <param name="element">The control that is to be tilted.</param>
            <param name="centerDelta">Delta between the element's center and the
            tilt container's.</param>
            <returns>true if successful; false otherwise.</returns>
            <remarks>
            This method is conservative; it will fail any attempt to tilt a 
            control that already has a projection on it.
            </remarks>
        </member>
        <member name="M:Infragistics.TiltEffect.RevertPrepareControlForTilt(System.Windows.FrameworkElement)">
            <summary>
            Removes modifications made by PrepareControlForTilt.
            </summary>
            <param name="element">THe control to be un-prepared.</param>
            <remarks>
            This method is basic; it does not do anything to detect if the 
            control being un-prepared was previously prepared.
            </remarks>
        </member>
        <member name="M:Infragistics.TiltEffect.PrepareTiltReturnStoryboard(System.Windows.FrameworkElement)">
            <summary>
            Creates the tilt return storyboard (if not already created) and 
            targets it to the projection.
            </summary>
            <param name="element">The framework element to prepare for
            projection.</param>
        </member>
        <member name="M:Infragistics.TiltEffect.ContinueTiltEffect(System.Windows.FrameworkElement,System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Continues a tilt effect that is currently applied to an element, 
            presumably because the user moved their finger.
            </summary>
            <param name="element">The element being tilted.</param>
            <param name="e">The manipulation event args.</param>
        </member>
        <member name="M:Infragistics.TiltEffect.EndTiltEffect(System.Windows.FrameworkElement)">
            <summary>
            Ends the tilt effect by playing the animation.
            </summary>
            <param name="element">The element being tilted.</param>
        </member>
        <member name="M:Infragistics.TiltEffect.TiltReturnStoryboard_Completed(System.Object,System.EventArgs)">
            <summary>
            Handler for the storyboard complete event.
            </summary>
            <param name="sender">sender of the event.</param>
            <param name="e">event args.</param>
        </member>
        <member name="M:Infragistics.TiltEffect.ResetTiltEffect(System.Windows.FrameworkElement)">
            <summary>
            Resets the tilt effect on the control, making it appear 'normal'
            again.
            </summary>
            <param name="element">The element to reset the tilt on.</param>
            <remarks>
            This method doesn't turn off the tilt effect or cancel any current
            manipulation; it just temporarily cancels the effect.
            </remarks>
        </member>
        <member name="M:Infragistics.TiltEffect.StopTiltReturnStoryboardAndCleanup">
            <summary>
            Stops the tilt effect and release resources applied to the currently
            tilted control.
            </summary>
        </member>
        <member name="M:Infragistics.TiltEffect.PauseTiltEffect">
            <summary>
            Pauses the tilt effect so that the control returns to the 'at rest'
            position, but doesn't stop the tilt effect (handlers are still 
            attached).
            </summary>
        </member>
        <member name="M:Infragistics.TiltEffect.ResetTiltReturnStoryboard">
            <summary>
            Resets the storyboard to not running.
            </summary>
        </member>
        <member name="M:Infragistics.TiltEffect.ApplyTiltEffect(System.Windows.FrameworkElement,System.Windows.Point,System.Windows.Point)">
            <summary>
            Applies the tilt effect to the control.
            </summary>
            <param name="element">the control to tilt.</param>
            <param name="touchPoint">The touch point, in the container's 
            coordinates.</param>
            <param name="centerPoint">The center point of the container.</param>
        </member>
        <member name="P:Infragistics.TiltEffect.UseLogarithmicEase">
            <summary>
            Whether to use a slightly more accurate (but slightly slower) tilt 
            animation easing function.
            </summary>
        </member>
        <member name="P:Infragistics.TiltEffect.TiltableItems">
            <summary>
            Default list of items that are tiltable.
            </summary>
        </member>
        <member name="T:Infragistics.TiltEffect.LogarithmicEase">
            <summary>
            Provides an easing function for the tilt return.
            </summary>
        </member>
        <member name="M:Infragistics.TiltEffect.LogarithmicEase.EaseInCore(System.Double)">
            <summary>
            Computes the easing function.
            </summary>
            <param name="normalizedTime">The time.</param>
            <returns>The eased value.</returns>
        </member>
        <member name="T:Infragistics.TreeHelpers">
            <summary>
            Couple of simple helpers for walking the visual tree.
            </summary>
        </member>
        <member name="M:Infragistics.TreeHelpers.GetVisualAncestors(System.Windows.FrameworkElement)">
            <summary>
            Gets the ancestors of the element, up to the root.
            </summary>
            <param name="node">The element to start from.</param>
            <returns>An enumerator of the ancestors.</returns>
        </member>
        <member name="M:Infragistics.TreeHelpers.GetVisualParent(System.Windows.FrameworkElement)">
            <summary>
            Gets the visual parent of the element.
            </summary>
            <param name="node">The element to check.</param>
            <returns>The visual parent.</returns>
        </member>
        <member name="T:Microsoft.Phone.Controls.Extensions">
            <summary>
            This set of internal extension methods provide general solutions and 
            utilities in a small enough number to not warrant a dedicated extension
            methods class.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.Extensions.Invert(System.Windows.Media.Matrix,System.Windows.Media.Matrix@)">
            <summary>
            Inverts a Matrix. The Invert functionality on the Matrix type is 
            internal to the framework only. Since Matrix is a struct, an out 
            parameter must be presented.
            </summary>
            <param name="m">The Matrix object.</param>
            <param name="outputMatrix">The matrix to return by an output 
            parameter.</param>
            <returns>Returns a value indicating whether the type was 
            successfully inverted. If the determinant is 0.0, then it cannot 
            be inverted and the original instance will remain untouched.</returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An implementation of the Contains member of string that takes in a 
            string comparison. The traditional .NET string Contains member uses 
            StringComparison.Ordinal.
            </summary>
            <param name="s">The string.</param>
            <param name="value">The string value to search for.</param>
            <param name="comparison">The string comparison type.</param>
            <returns>Returns true when the substring is found.</returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.Extensions.IsPortrait(Microsoft.Phone.Controls.PageOrientation)">
            <summary>
            Returns whether the page orientation is in portrait.
            </summary>
            <param name="orientation">Page orientation</param>
            <returns>If the orientation is portrait</returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.Extensions.IsDarkThemeActive(System.Windows.ResourceDictionary)">
            <summary>
            Returns whether the dark visual theme is currently active.
            </summary>
            <param name="resources">Resource Dictionary</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.Extensions.IsExternalNavigation(System.Uri)">
            <summary>
            Returns whether the uri is from an external source.
            </summary>
            <param name="uri">The uri</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.Extensions.RegisterNotification(System.Windows.FrameworkElement,System.String,System.Windows.PropertyChangedCallback)">
            <summary>
            Registers a property changed callback for a given property.
            </summary>
            <param name="element">The element registering the notification</param>
            <param name="propertyName">Property name to register</param>
            <param name="callback">Callback function</param>
            <remarks>This allows a child to be notified of when a property declared in its parent is changed.</remarks>
        </member>
        <member name="T:Microsoft.Phone.Controls.ItemsControlExtensions">
            <summary>
            Provides helper methods to work with ItemsControl.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.ItemsControlExtensions.GetParentItemsControl``1(System.Windows.DependencyObject)">
            <summary>
            Gets the parent ItemsControl.
            </summary>
            <typeparam name="T">The type of ItemsControl.</typeparam>
            <param name="element">The dependency object </param>
            <returns>
            The parent ItemsControl or null if there is not.
            </returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.ItemsControlExtensions.GetItemsInViewPort(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the items that are currently in the view port
            of an ItemsControl with a ScrollViewer.
            </summary>
            <param name="list">The ItemsControl to search on.</param>
            <returns>
            A collection of weak references to the items in the view port.
            </returns>
        </member>
        <member name="T:Infragistics.Toolkit.LengthConverter">
            <summary>
            Converts instances of other types to and from instances of a double that
            represent an object measurement such as a height or width.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:Infragistics.Toolkit.LengthConverter.UnitToPixelConversions">
            <summary>
            Conversions from units to pixels.
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.LengthConverter.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.LengthConverter" /> class.
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.LengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible from a specified type to a
            <see cref="T:System.Double" /> that represents an object
            measurement.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert from.
            </param>
            <returns>
            True if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Infragistics.Toolkit.LengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to values of the
            <see cref="T:System.Double" /> type.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the
            current culture.
            </param>
            <param name="source">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Infragistics.Toolkit.LengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert a measurement to the
            specified type.
            </summary>
            <param name="typeDescriptorContext">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that provides a format context.
            </param>
            <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert to.
            </param>
            <returns>
            True if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Infragistics.Toolkit.LengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified measurement to the specified type.
            </summary>
            <param name="typeDescriptorContext">
            An object that provides a format context.
            </param>
            <param name="cultureInfo">
            The <see cref="T:System.Globalization.CultureInfo" /> to use as the
            current culture.
            </param>
            <param name="value">The value to convert.</param>
            <param name="destinationType">
            A <see cref="T:System.Type" /> that represents the type you want to
            convert to.
            </param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:System.Windows.Controls.NumericExtensions">
            <summary>
            Numeric utility methods used by controls.  These methods are similar in
            scope to the WPF DoubleUtil class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsNaN(System.Double)">
            <summary>
            Check if a number isn't really a number.
            </summary>
            <param name="value">The number to check.</param>
            <returns>
            True if the number is not a number, false if it is a number.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determine if one number is greater than another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is greater than the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.AreClose(System.Double,System.Double)">
            <summary>
            Determine if two numbers are close in value.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is close in value to the second, false
            otherwise.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.NumericExtensions.NanUnion">
            <summary>
            NanUnion is a C++ style type union used for efficiently converting
            a double into an unsigned long, whose bits can be easily
            manipulated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericExtensions.NanUnion.FloatingValue">
            <summary>
            Floating point representation of the union.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericExtensions.NanUnion.IntegerValue">
            <summary>
            Integer representation of the union.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertTo``1(System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether conversion is possible.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertTo(System.ComponentModel.TypeConverter,System.Object,System.Type)">
            <summary>
            Attempts to convert a specified object to an instance of the
            desired type.
            </summary>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:Infragistics.Toolkit.ListPicker.ExpansionMode">
            <summary>
            The expansion mode of a ListPicker.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ExpansionMode.ExpansionAllowed">
            <summary>
            Allows all items to be visible on the page.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ExpansionMode.FullScreenOnly">
            <summary>
            Requires all items to be displayed in a full screen popup.
            </summary>
        </member>
        <member name="T:Infragistics.Toolkit.ListPicker.ListPicker">
            <summary>
            Class that implements a flexible list-picking experience with a custom interface for few/many items.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.NormalModeOffset">
            <summary>
            In Mango, the size of list pickers in expanded mode was given extra offset.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker._hasPickerPageOpen">
            <summary>
            Whether this list picker has the picker page opened.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.SummaryForSelectedItemsDelegateProperty">
            <summary>
            Identifies the SummaryForSelectedItemsDelegate DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.ListPickerModeProperty">
            <summary>
            Identifies the ListPickerMode DependencyProperty.
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.OnIsHighlightedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Highlight property changed
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.OnIsHighlightedChanged">
            <summary>
            Highlight property changed
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.OnIsEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Enabled property changed
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.OnIsEnabledChanged">
            <summary>
            Enabled property changed
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.SelectedIndexProperty">
            <summary>
            Identifies the SelectedIndex DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.FullModeItemTemplateProperty">
            <summary>
            Identifies the FullModeItemTemplate DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.HeaderProperty">
            <summary>
            Identifies the Header DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.FullModeHeaderProperty">
            <summary>
            Identifies the FullModeHeader DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.ItemCountThresholdProperty">
            <summary>
            Identifies the ItemCountThreshold DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.PickerPageUriProperty">
            <summary>
            Identifies the PickerPageUri DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.ExpansionModeProperty">
            <summary>
            Identifies the ExpansionMode DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.SelectionModeProperty">
            <summary>
            Identifies the SelectionMode DependencyProperty.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPicker.SelectedItemsProperty">
            <summary>
            Identifies the SelectedItems DependencyProperty.
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.#ctor">
            <summary>
            Initializes a new instance of the ListPicker class.
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the control when a new template is applied.
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <param name="item">The specified item.</param>
            <returns>True if the item is its own item container; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element used to display a specified item.
            </summary>
            <returns>A container corresponding to a specified item.</returns>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of the PrepareContainerForItemOverride method.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Provides handling for the ItemContainerGenerator.ItemsChanged event.
            </summary>
            <param name="e">A NotifyCollectionChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.OnTap(System.Windows.Input.GestureEventArgs)">
            <summary>
            Handles the tap event.
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)">
            <summary>
            Called when the ManipulationStarted event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Called when the ManipulationDelta event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)">
            <summary>
            Called when the ManipulationCompleted event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.Open">
            <summary>
            Opens the picker for selection either into Expanded or Full mode depending on the picker's state.
            </summary>
            <returns>Whether the picker was succesfully opened.</returns>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPicker.UpdateSummary(System.Collections.IList)">
            <summary>
            Updates the summary of the selected items to be displayed in the ListPicker.
            </summary>
            <param name="newValue">The list selected items</param>
        </member>
        <member name="E:Infragistics.Toolkit.ListPicker.ListPicker.SelectionChanged">
            <summary>
            Event that is raised when the selection changes.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.SummaryForSelectedItemsDelegate">
            <summary>
            Gets or sets the delegate, which is called to summarize a list of selections into a string.
            If not implemented, the default summarizing behavior will be used.
            If this delegate is implemented, default summarizing behavior can be achieved by returning 
            null instead of a string.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.ListPickerMode">
            <summary>
            Gets or sets the ListPickerMode (ex: Normal/Expanded/Full).
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.IsHighlighted">
            <summary>
            Whether the list picker is highlighted. 
            This occurs when the user is manipulating the box or when in expanded mode.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.FullModeItemTemplate">
            <summary>
            Gets or sets the DataTemplate used to display each item when ListPickerMode is set to Full.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.Header">
            <summary>
            Gets or sets the header of the control.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.HeaderTemplate">
            <summary>
            Gets or sets the template used to display the control's header.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.FullModeHeader">
            <summary>
            Gets or sets the header to use when ListPickerMode is set to Full.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.ItemCountThreshold">
            <summary>
            Gets the maximum number of items for which Expanded mode will be used, 5.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.PickerPageUri">
            <summary>
            Gets or sets the Uri to use for loading the ListPickerPage instance when the control is tapped.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.ExpansionMode">
            <summary>
            Gets or sets how the list picker expands when tapped. 
            This property has an effect only when SelectionMode is Single. 
            When SelectionMode is Multiple, the ExpansionMode will be treated as FullScreenOnly.
            ExpansionAllowed will only expand when the number of items is less than or equalt to ItemCountThreshold
            Single by default.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.SelectionMode">
            <summary>
            Gets or sets the SelectionMode. Extended is treated as Multiple.
            Single by default.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPicker.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
        </member>
        <member name="T:Infragistics.Toolkit.ListPicker.ListPickerItem">
            <summary>
            Class that implements a container for the ListPicker control.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPickerItem.#ctor">
            <summary>
            Initializes a new instance of the ListPickerItem class.
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPickerItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the control when a new template is applied.
            </summary>
        </member>
        <member name="T:Infragistics.Toolkit.ListPicker.ListPickerMode">
            <summary>
            An enumeration defining the supported ListPicker modes.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPickerMode.Normal">
            <summary>
            Normal mode; only the selected item is visible on the original page.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPickerMode.Expanded">
            <summary>
            Expanded mode; all items are visible on the original page.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.ListPicker.ListPickerMode.Full">
            <summary>
            Full mode; all items are visible in a separate Popup.
            </summary>
        </member>
        <member name="T:Infragistics.Toolkit.ListPicker.ListPickerPage">
            <summary>
            Displays the list of items and allows single or multiple selection.
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPickerPage.#ctor">
            <summary>
            Creates a list picker page.
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPickerPage.OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Called when a page becomes the active page in a frame.
            </summary>
            <param name="e">An object that contains the event data.</param>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPickerPage.OnBackKeyPress(System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the Back key is pressed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPickerPage.OnNavigatedFrom(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Called when a page is no longer the active page in a frame.
            </summary>
            <param name="e">An object that contains the event data.</param>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPickerPage.UpdateOutOfViewItems">
            <summary>
            Go through all the items that were not visible on the page and set their properties accordingly without animation.
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.ListPicker.ListPickerPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPickerPage.HeaderText">
            <summary>
            Gets or sets the string of text to display as the header of the page.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPickerPage.Items">
            <summary>
            Gets or sets the list of items to display.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPickerPage.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPickerPage.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPickerPage.SelectedItems">
            <summary>
            Gets or sets the list of items to select.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPickerPage.FullModeItemTemplate">
            <summary>
            Gets or sets the item template
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.ListPicker.ListPickerPage.IsOpen">
            <summary>
            Whether the picker page is open or not.
            </summary>
        </member>
        <member name="T:Infragistics.Toolkit.LocalizedResources.ControlResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.LocalizedResources.ControlResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.LocalizedResources.ControlResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.LocalizedResources.ControlResources.DateTimePickerCancelText">
            <summary>
              Looks up a localized string similar to cancel.
            </summary>
        </member>
        <member name="P:Infragistics.Toolkit.LocalizedResources.ControlResources.DateTimePickerDoneText">
            <summary>
              Looks up a localized string similar to done.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.ITransition">
            <summary>
            Controls the behavior of transitions.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.ITransition.GetCurrentState">
            <summary>
            Gets the
            <see cref="T:System.Windows.Media.Animation.ClockState"/>
            of the
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.ITransition.GetCurrentTime">
            <summary>
            Gets the current time of the
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>.
            </summary>
            <returns>The current time.</returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.ITransition.Pause">
            <summary>
            Pauses the animation clock associated with the
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.ITransition.Resume">
            <summary>
            Resumes the animation clock, or run-time state, associated with the
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.ITransition.Seek(System.TimeSpan)">
            <summary>
            Moves the
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            to the specified animation position. The
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            performs the requested seek when the next clock tick occurs.
            </summary>
            <param name="offset">The specified animation position.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.ITransition.SeekAlignedToLastTick(System.TimeSpan)">
            <summary>
            Moves the
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            to the specified animation position immediately (synchronously).
            </summary>
            <param name="offset">The specified animation position</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.ITransition.SkipToFill">
            <summary>
            Advances the current time of the
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>'s
            clock to the end of its active period.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.ITransition.Begin">
            <summary>
            Initiates the set of animations associated with the
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.ITransition.Stop">
            <summary>
            Stops the <see cref="T:Microsoft.Phone.Controls.ITransition"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Phone.Controls.ITransition.Completed">
            <summary>
            Occurs when the
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            has completed playing.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.NavigationInTransition">
            <summary>
            Has navigation-in
            <see cref="T:Microsoft.Phone.Controls.TransitionElement"/>s
            for the designer experiences.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.NavigationTransition">
            <summary>
            Has
            <see cref="T:Microsoft.Phone.Controls.TransitionElement"/>s
            for the designer experiences.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.NavigationTransition.BackwardProperty">
            <summary>
            The
            <see cref="T:System.Windows.DependencyProperty"/>
            for the backward
            <see cref="T:Microsoft.Phone.Controls.NavigationTransition"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.NavigationTransition.ForwardProperty">
            <summary>
            The
            <see cref="T:System.Windows.DependencyProperty"/>
            for the forward
            <see cref="T:Microsoft.Phone.Controls.NavigationTransition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.NavigationTransition.OnBeginTransition">
            <summary>
            Triggers <see cref="E:Microsoft.Phone.Controls.NavigationTransition.BeginTransition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.NavigationTransition.OnEndTransition">
            <summary>
            Triggers <see cref="E:Microsoft.Phone.Controls.NavigationTransition.EndTransition"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Phone.Controls.NavigationTransition.BeginTransition">
            <summary>
            The navigation transition will begin.
            </summary>
        </member>
        <member name="E:Microsoft.Phone.Controls.NavigationTransition.EndTransition">
            <summary>
            The navigation transition has ended.
            </summary>
        </member>
        <member name="P:Microsoft.Phone.Controls.NavigationTransition.Backward">
            <summary>
            Gets or sets the backward
            <see cref="T:Microsoft.Phone.Controls.NavigationTransition"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Phone.Controls.NavigationTransition.Forward">
            <summary>
            Gets or sets the forward
            <see cref="T:Microsoft.Phone.Controls.NavigationTransition"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.NavigationOutTransition">
            <summary>
            Has navigation-out
            <see cref="T:Microsoft.Phone.Controls.TransitionElement"/>s
            for the designer experiences.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.TransitionElement">
            <summary>
            Transition factory for a particular transition family.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionElement.GetTransition(System.Windows.UIElement)">
            <summary>
            Creates a new
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>.
            Existing
            <see cref="F:System.Windows.UIElement.RenderTransformProperty"/>
            or
            <see cref="F:System.Windows.UIElement.ProjectionProperty"/>
            values may be saved and cleared before the start of the transition, then restored it after it is stopped or completed.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <returns>The <see cref="T:Microsoft.Phone.Controls.ITransition"/>.</returns>
        </member>
        <member name="T:Microsoft.Phone.Controls.TransitionFrame">
            <summary>
            Enables navigation transitions for
            <see cref="T:Microsoft.Phone.Controls.PhoneApplicationPage"/>s.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame.FirstTemplatePartName">
            <summary>
            The new
            <see cref="T:System.Windows.Controls.ContentPresenter"/>
            template part name.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame.SecondTemplatePartName">
            <summary>
            The old
            <see cref="T:System.Windows.Controls.ContentPresenter"/>
            template part name.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame.BitmapCacheMode">
            <summary>
            A single shared instance for setting BitmapCache on a visual.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._firstContentPresenter">
            <summary>
            The first <see cref="T:System.Windows.Controls.ContentPresenter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._secondContentPresenter">
            <summary>
            The second <see cref="T:System.Windows.Controls.ContentPresenter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._newContentPresenter">
            <summary>
            The new <see cref="T:System.Windows.Controls.ContentPresenter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._oldContentPresenter">
            <summary>
            The old <see cref="T:System.Windows.Controls.ContentPresenter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._isForwardNavigation">
            <summary>
            Indicates whether a navigation is forward.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._useFirstAsNew">
            <summary>
            Determines whether to set the new content to the first or second
            <see cref="T:System.Windows.Controls.ContentPresenter"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._readyToTransitionToNewContent">
            <summary>
            A value indicating whether the old transition has completed and the
            new transition can begin.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._contentReady">
            <summary>
            A value indicating whether the new content has been loaded and the
            new transition can begin.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._performingExitTransition">
            <summary>
            A value indicating whether the exit transition is currently being performed.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._storedNewTransition">
            <summary>
            The transition to use to move in new content once the old transition
            is complete and ready for movement.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._storedNavigationInTransition">
            <summary>
            The stored NavigationIn transition instance to use once the old
            transition is complete and ready for movement.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._storedOldTransition">
            <summary>
            The transition to use to complete the old transition.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionFrame._storedNavigationOutTransition">
            <summary>
            The stored NavigationOut transition instance.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.#ctor">
            <summary>
            Initialzies a new instance of the TransitionFrame class.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.FlipPresenters">
            <summary>
            Flips the logical content presenters to prepare for the next visual
            transition.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.OnNavigating(System.Object,System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Handles the Navigating event of the frame, the immediate way to
            begin a transition out before the new page has loaded or had its
            layout pass.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.OnExitTransitionCompleted(System.Object,System.EventArgs)">
            <summary>
            Handles the completion of the exit transition, automatically 
            continuing to bring in the new element's transition as well if it is
            ready.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application 
            code or internal processes (such as a rebuilding layout pass) call
            <see cref="M:System.Windows.Controls.Control.ApplyTemplate"/>.
            In simplest terms, this means the method is called just before a UI 
            element displays in an application.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the
            <see cref="P:System.Windows.Controls.ContentControl.Content"/>
            property changes.
            </summary>
            <param name="oldContent">The old <see cref="T:System.Object"/>.</param>
            <param name="newContent">The new <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.OnBackKeyPress(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the BackKeyPress to stop the animation and go back.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.TransitionNewContent(Microsoft.Phone.Controls.ITransition,Microsoft.Phone.Controls.NavigationInTransition)">
            <summary>
            Transitions the new <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="newTransition">The <see cref="T:Microsoft.Phone.Controls.ITransition"/> 
            for the new <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="navigationInTransition">The <see cref="T:Microsoft.Phone.Controls.NavigationInTransition"/> 
            for the new <see cref="T:System.Windows.UIElement"/>.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.EnsureStoppedTransition(Microsoft.Phone.Controls.ITransition)">
            <summary>
            This checks to make sure that, if the transition not be in the clock
            state of Stopped, that is will be stopped.
            </summary>
            <param name="transition">The transition instance.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.PerformTransition(Microsoft.Phone.Controls.NavigationTransition,System.Windows.Controls.ContentPresenter,Microsoft.Phone.Controls.ITransition)">
            <summary>
            Performs a transition when given the appropriate components,
            includes calling the appropriate start event and ensuring opacity
            on the content presenter.
            </summary>
            <param name="navigationTransition">The navigation transition.</param>
            <param name="presenter">The content presenter.</param>
            <param name="transition">The transition instance.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.CompleteTransition(Microsoft.Phone.Controls.NavigationTransition,System.Windows.Controls.ContentPresenter,Microsoft.Phone.Controls.ITransition)">
            <summary>
            Completes a transition operation by stopping it, restoring 
            interactivity, and then firing the OnEndTransition event.
            </summary>
            <param name="navigationTransition">The navigation transition.</param>
            <param name="presenter">The content presenter.</param>
            <param name="transition">The transition instance.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.PrepareContentPresenterForCompositor(System.Windows.Controls.ContentPresenter,System.Boolean)">
            <summary>
            Updates the content presenter for off-thread compositing for the
            transition animation. Also disables interactivity on it to prevent
            accidental touches.
            </summary>
            <param name="presenter">The content presenter instance.</param>
            <param name="applyBitmapCache">A value indicating whether to apply
            a bitmap cache.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionFrame.RestoreContentPresenterInteractivity(System.Windows.Controls.ContentPresenter)">
            <summary>
            Restores the interactivity for the presenter post-animation, also
            removes the BitmapCache value.
            </summary>
            <param name="presenter">The content presenter instance.</param>
        </member>
        <member name="T:Microsoft.Phone.Controls.Transitions">
            <summary>
            Provides
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>s
            for transition families and modes.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Microsoft.Phone.Controls.Transitions._storyboardXamlCache">
            <summary>
            The cached XAML read from the Storyboard resources.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transitions.GetEnumStoryboard``1(System.Windows.UIElement,System.String,``0)">
            <summary>
            Creates a
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a transition family, transition mode, and
            <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <typeparam name="T">The type of the transition mode.</typeparam>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="name">The transition family.</param>
            <param name="mode">The transition mode.</param>
            <returns>The <see cref="T:Microsoft.Phone.Controls.ITransition"/>.</returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transitions.GetStoryboard(System.String)">
            <summary>
            Creates a
            <see cref="T:System.Windows.Media.Storyboard"/>
            for a particular transition family and transition mode.
            </summary>
            <param name="name">The transition family and transition mode.</param>
            <returns>The <see cref="T:System.Windows.Media.Storyboard"/>.</returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transitions.Roll(System.Windows.UIElement)">
            <summary>
            Creates an
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>
            for the roll transition.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <returns>The <see cref="T:Microsoft.Phone.Controls.ITransition"/>.</returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transitions.Rotate(System.Windows.UIElement,Microsoft.Phone.Controls.RotateTransitionMode)">
            <summary>
            Creates an
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>
            for the rotate transition family.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="rotateTransitionMode">The transition mode.</param>
            <returns>The <see cref="T:Microsoft.Phone.Controls.ITransition"/>.</returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transitions.Slide(System.Windows.UIElement,Microsoft.Phone.Controls.SlideTransitionMode)">
            <summary>
            Creates an
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>
            for the slide transition family.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="slideTransitionMode">The transition mode.</param>
            <returns>The <see cref="T:Microsoft.Phone.Controls.ITransition"/>.</returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transitions.Swivel(System.Windows.UIElement,Microsoft.Phone.Controls.SwivelTransitionMode)">
            <summary>
            Creates an
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>
            for the swivel transition family.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="swivelTransitionMode">The transition mode.</param>
            <returns>The <see cref="T:Microsoft.Phone.Controls.ITransition"/>.</returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transitions.Turnstile(System.Windows.UIElement,Microsoft.Phone.Controls.TurnstileTransitionMode)">
            <summary>
            Creates an
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>
            for the turnstile transition family.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="turnstileTransitionMode">The transition mode.</param>
            <returns>The <see cref="T:Microsoft.Phone.Controls.ITransition"/>.</returns>
        </member>
        <member name="T:Microsoft.Phone.Controls.TransitionService">
            <summary>
            Provides attached properties for navigation
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>s.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionService.NavigationInTransitionProperty">
            <summary>
            The
            <see cref="T:System.Windows.DependencyProperty"/>
            for the in <see cref="T:Microsoft.Phone.Controls.ITransition"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TransitionService.NavigationOutTransitionProperty">
            <summary>
            The
            <see cref="T:System.Windows.DependencyProperty"/>
            for the in <see cref="T:Microsoft.Phone.Controls.ITransition"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionService.GetNavigationInTransition(System.Windows.UIElement)">
            <summary>
            Gets the
            <see cref="T:Microsoft.Phone.Controls.NavigationTransition"/>s
            of
            <see cref="M:Microsoft.Phone.Controls.TransitionService.NavigationInTransitionProperty"/>
            for a
            <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <returns>The </returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionService.GetNavigationOutTransition(System.Windows.UIElement)">
            <summary>
            Gets the
            <see cref="T:Microsoft.Phone.Controls.NavigationTransition"/>s
            of
            <see cref="M:Microsoft.Phone.Controls.TransitionService.NavigationOutTransitionProperty"/>
            for a
            <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <returns>The </returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionService.SetNavigationInTransition(System.Windows.UIElement,Microsoft.Phone.Controls.NavigationInTransition)">
            <summary>
            Sets a
            <see cref="T:Microsoft.Phone.Controls.NavigationTransition"/>
            to
            <see cref="M:Microsoft.Phone.Controls.TransitionService.NavigationInTransitionProperty"/>
            for a
            <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="value">The <see cref="T:Microsoft.Phone.Controls.NavigationTransition"/>.</param>
            <returns>The </returns>
        </member>
        <member name="M:Microsoft.Phone.Controls.TransitionService.SetNavigationOutTransition(System.Windows.UIElement,Microsoft.Phone.Controls.NavigationOutTransition)">
            <summary>
            Sets a
            <see cref="T:Microsoft.Phone.Controls.NavigationTransition"/>s
            to
            <see cref="M:Microsoft.Phone.Controls.TransitionService.NavigationOutTransitionProperty"/>
            for a
            <see cref="T:System.Windows.UIElement"/>.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="value">The <see cref="T:Microsoft.Phone.Controls.NavigationTransition"/>.</param>
            <returns>The </returns>
        </member>
        <member name="T:Microsoft.Phone.Controls.RotateTransition">
            <summary>
            Provides rotate <see cref="T:Microsoft.Phone.Controls.ITransition"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.RotateTransition.ModeProperty">
            <summary>
            The
            <see cref="T:System.Windows.DependencyProperty"/>
            for the
            <see cref="T:Microsoft.Phone.Controls.RotateTransitionMode"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.RotateTransition.GetTransition(System.Windows.UIElement)">
            <summary>
            Creates a new
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>.
            Saves and clears the existing
            <see cref="F:System.Windows.UIElement.RenderTransformProperty"/>
            value before the start of the transition, then restores it after it is stopped or completed.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <returns>The <see cref="T:Microsoft.Phone.Controls.ITransition"/>.</returns>
        </member>
        <member name="P:Microsoft.Phone.Controls.RotateTransition.Mode">
            <summary>
            The <see cref="T:Microsoft.Phone.Controls.RotateTransitionMode"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.RotateTransitionMode">
            <summary>
            The rotate transition modes.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.RotateTransitionMode.In90Clockwise">
            <summary>
            The rotate in 90 degrees clockwise transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.RotateTransitionMode.In90Counterclockwise">
            <summary>
            The rotate in 90 degrees counterclockwise transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.RotateTransitionMode.In180Clockwise">
            <summary>
            The rotate in 180 degrees clockwise transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.RotateTransitionMode.In180Counterclockwise">
            <summary>
            The rotate in 180 degrees counterclockwise transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.RotateTransitionMode.Out90Clockwise">
            <summary>
            The rotate out 90 degrees clockwise transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.RotateTransitionMode.Out90Counterclockwise">
            <summary>
            The rotate out 90 degrees counterclockwise transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.RotateTransitionMode.Out180Clockwise">
            <summary>
            The rotate out 180 degrees clockwise transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.RotateTransitionMode.Out180Counterclockwise">
            <summary>
            The rotate out 180 degrees counterclockwise transition mode.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.SlideTransition">
            <summary>
            Provides slide <see cref="T:Microsoft.Phone.Controls.ITransition"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SlideTransition.ModeProperty">
            <summary>
            The
            <see cref="T:System.Windows.DependencyProperty"/>
            for the
            <see cref="T:Microsoft.Phone.Controls.SlideTransitionMode"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.SlideTransition.GetTransition(System.Windows.UIElement)">
            <summary>
            Creates a new
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>.
            Saves and clears the existing
            <see cref="F:System.Windows.UIElement.RenderTransformProperty"/>
            value before the start of the transition, then restores it after it is stopped or completed.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <returns>The <see cref="T:Microsoft.Phone.Controls.ITransition"/>.</returns>
        </member>
        <member name="P:Microsoft.Phone.Controls.SlideTransition.Mode">
            <summary>
            The <see cref="T:Microsoft.Phone.Controls.SlideTransitionMode"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.SlideTransitionMode">
            <summary>
            The slide transition modes.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SlideTransitionMode.SlideUpFadeIn">
            <summary>
            The slide up, fade in transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SlideTransitionMode.SlideUpFadeOut">
            <summary>
            The slide up, fade out transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SlideTransitionMode.SlideDownFadeIn">
            <summary>
            The slide down, fade in transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SlideTransitionMode.SlideDownFadeOut">
            <summary>
            The slide down, fade out transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SlideTransitionMode.SlideLeftFadeIn">
            <summary>
            The slide left, fade in transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SlideTransitionMode.SlideLeftFadeOut">
            <summary>
            The slide left, fade out transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SlideTransitionMode.SlideRightFadeIn">
            <summary>
            The slide right, fade in transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SlideTransitionMode.SlideRightFadeOut">
            <summary>
            The slide right, fade out transition mode.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.SwivelTransition">
            <summary>
            Provides swivel <see cref="T:Microsoft.Phone.Controls.ITransition"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SwivelTransition.ModeProperty">
            <summary>
            The
            <see cref="T:System.Windows.DependencyProperty"/>
            for the
            <see cref="T:Microsoft.Phone.Controls.SwivelTransitionMode"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.SwivelTransition.GetTransition(System.Windows.UIElement)">
            <summary>
            Creates a new
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>.
            Saves and clears the existing
            <see cref="F:System.Windows.UIElement.ProjectionProperty"/>
            value before the start of the transition, then restores it after it is stopped or completed.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <returns>The <see cref="T:Microsoft.Phone.Controls.ITransition"/>.</returns>
        </member>
        <member name="P:Microsoft.Phone.Controls.SwivelTransition.Mode">
            <summary>
            The <see cref="T:Microsoft.Phone.Controls.SwivelTransitionMode"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.SwivelTransitionMode">
            <summary>
            The swivel transition modes.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SwivelTransitionMode.FullScreenIn">
            <summary>
            The swivel full screen in transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SwivelTransitionMode.FullScreenOut">
            <summary>
            The swivel full screen out transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SwivelTransitionMode.ForwardIn">
            <summary>
            The swivel forward in transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SwivelTransitionMode.ForwardOut">
            <summary>
            The swivel forward out transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SwivelTransitionMode.BackwardIn">
            <summary>
            The swivel backward in transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.SwivelTransitionMode.BackwardOut">
            <summary>
            The swivel backward out transition mode.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.Transition">
            <summary>
            Mirrors the
            <see cref="T:System.Windows.Media.Animation.Storyboard"/>
            interface to control an
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>.
            Saves and restores the
            <see cref="P:System.Windows.UIElement.CacheMode"/>
            and
            <see cref="P:System.Windows.UIElement.IsHitTestVisible"/>
            values for the
            <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.Transition._cacheMode">
            <summary>
            The original
            <see cref="P:System.Windows.UIElement.CacheMode"/>
            of the
            <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.Transition._element">
            <summary>
            The <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.Transition._isHitTestVisible">
            <summary>
            The original
            <see cref="P:System.Windows.UIElement.IsHitTestVisible"/>
            of the
            <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.Transition._storyboard">
            <summary>
            The
            <see cref="T:System.Windows.Media.Animation.Storyboard"/>
            for the
            <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.#ctor(System.Windows.UIElement,System.Windows.Media.Animation.Storyboard)">
            <summary>
            Constructs a
            <see cref="T:Microsoft.Phone.Controls.Transition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>
            and a
            <see cref="T:System.Windows.Media.Animation.Storyboard"/>.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="storyboard">The <see cref="T:System.Windows.Media.Animation.Storyboard"/>.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.Begin">
            <summary>
            Mirrors <see cref="M:System.Windows.Media.Animation.Storyboard.Begin"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.OnCompletedRestore(System.Object,System.EventArgs)">
            <summary>
            Restores the settings for the transition.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.GetCurrentState">
            <summary>
            Mirrors <see cref="M:System.Windows.Media.Animation.Storyboard.GetCurrentState"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.GetCurrentTime">
            <summary>
            Mirrors <see cref="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.Pause">
            <summary>
            Mirrors <see cref="M:System.Windows.Media.Animation.Storyboard.Pause"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.Restore">
            <summary>
            Restores the saved
            <see cref="P:System.Windows.UIElement.CacheMode"/>
            and
            <see cref="P:System.Windows.UIElement.IsHitTestVisible"/>
            values for the
            <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.Resume">
            <summary>
            Mirrors <see cref="M:System.Windows.Media.Animation.Storyboard.Resume"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.Save">
            <summary>
            Saves the
            <see cref="P:System.Windows.UIElement.CacheMode"/>
            and
            <see cref="P:System.Windows.UIElement.IsHitTestVisible"/>
            values for the
            <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.Seek(System.TimeSpan)">
            <summary>
            Mirrors <see cref="M:System.Windows.Media.Animation.Storyboard.Seek"/>.
            </summary>
            <param name="offset">The time offset.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.SeekAlignedToLastTick(System.TimeSpan)">
            <summary>
            Mirrors <see cref="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick"/>.
            </summary>
            <param name="offset">The time offset.</param>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.SkipToFill">
            <summary>
            Mirrors <see cref="M:System.Windows.Media.Animation.Storyboard.SkipToFill"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.Transition.Stop">
            <summary>
            Mirrors <see cref="M:System.Windows.Media.Animation.Storyboard.Stop"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Phone.Controls.Transition.Completed">
            <summary>
            Mirrors <see cref="E:System.Windows.Media.Animation.Storyboard.Completed"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.TurnstileTransition">
            <summary>
            Provides turnstile <see cref="T:Microsoft.Phone.Controls.ITransition"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TurnstileTransition.ModeProperty">
            <summary>
            The
            <see cref="T:System.Windows.DependencyProperty"/>
            for the
            <see cref="T:Microsoft.Phone.Controls.TurnstileTransitionMode"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Phone.Controls.TurnstileTransition.GetTransition(System.Windows.UIElement)">
            <summary>
            Creates a new
            <see cref="T:Microsoft.Phone.Controls.ITransition"/>
            for a
            <see cref="T:System.Windows.UIElement"/>.
            Saves and clears the existing
            <see cref="F:System.Windows.UIElement.ProjectionProperty"/>
            value before the start of the transition, then restores it after it is stopped or completed.
            </summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/>.</param>
            <returns>The <see cref="T:Microsoft.Phone.Controls.ITransition"/>.</returns>
        </member>
        <member name="P:Microsoft.Phone.Controls.TurnstileTransition.Mode">
            <summary>
            The <see cref="T:Microsoft.Phone.Controls.TurnstileTransitionMode"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Phone.Controls.TurnstileTransitionMode">
            <summary>
            The turnstile transition modes.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TurnstileTransitionMode.ForwardIn">
            <summary>
            The turnstile forward in transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TurnstileTransitionMode.ForwardOut">
            <summary>
            The turnstile forward out transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TurnstileTransitionMode.BackwardIn">
            <summary>
            The turnstile backward in transition mode.
            </summary>
        </member>
        <member name="F:Microsoft.Phone.Controls.TurnstileTransitionMode.BackwardOut">
            <summary>
            The turnstile backward out transition mode.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.OrientedSize">
            <summary>
            The OrientedSize structure is used to abstract the growth direction from
            the layout algorithms of WrapPanel.  When the growth direction is
            oriented horizontally (ex: the next element is arranged on the side of
            the previous element), then the Width grows directly with the placement
            of elements and Height grows indirectly with the size of the largest
            element in the row.  When the orientation is reversed, so is the
            directional growth with respect to Width and Height.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._orientation">
            <summary>
            The orientation of the structure.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._direct">
            <summary>
            The size dimension that grows directly with layout placement.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._indirect">
            <summary>
            The size dimension that grows indirectly with the maximum value of
            the layout row or column.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.OrientedSize.#ctor(System.Windows.Controls.Orientation)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
        </member>
        <member name="M:System.Windows.Controls.OrientedSize.#ctor(System.Windows.Controls.Orientation,System.Double,System.Double)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
            <param name="width">Un-oriented width of the structure.</param>
            <param name="height">Un-oriented height of the structure.</param>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Orientation">
            <summary>
            Gets the orientation of the structure.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Direct">
            <summary>
            Gets or sets the size dimension that grows directly with layout
            placement.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Indirect">
            <summary>
            Gets or sets the size dimension that grows indirectly with the
            maximum value of the layout row or column.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Width">
            <summary>
            Gets or sets the width of the size.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Height">
            <summary>
            Gets or sets the height of the size.
            </summary>
        </member>
        <member name="T:Infragistics.Toolkit.WrapPanel">
            <summary>
            Positions child elements sequentially from left to right or top to
            bottom.  When elements extend beyond the panel edge, elements are
            positioned in the next row or column.
            </summary>
            <QualityBand>Mature</QualityBand>
        </member>
        <member name="F:Infragistics.Toolkit.WrapPanel._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:Infragistics.Toolkit.WrapPanel.ItemHeightProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemHeight" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemHeight" />
            dependency property
            </value>
        </member>
        <member name="F:Infragistics.Toolkit.WrapPanel.ItemWidthProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.ItemWidth" />
            dependency property.
            </value>
        </member>
        <member name="F:Infragistics.Toolkit.WrapPanel.OrientationProperty">
            <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.WrapPanel.Orientation" />
            dependency property.
            </summary>
            <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.WrapPanel.Orientation" />
            dependency property.
            </value>
        </member>
        <member name="M:Infragistics.Toolkit.WrapPanel.OnOrientationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">WrapPanel that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Infragistics.Toolkit.WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:System.Windows.Controls.WrapPanel" /> class.
            </summary>
        </member>
        <member name="M:Infragistics.Toolkit.WrapPanel.OnItemHeightOrWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler for ItemHeight and ItemWidth.
            </summary>
            <param name="d">
            WrapPanel that changed its ItemHeight or ItemWidth.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Infragistics.Toolkit.WrapPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a
            <see cref="T:System.Windows.Controls.WrapPanel" /> in anticipation
            of arranging them during the
            <see cref="M:System.Windows.Controls.WrapPanel.ArrangeOverride(System.Windows.Size)" />
            pass.
            </summary>
            <param name="constraint">
            The size available to child elements of the wrap panel.
            </param>
            <returns>
            The size required by the
            <see cref="T:System.Windows.Controls.WrapPanel" /> and its 
            elements.
            </returns>
        </member>
        <member name="M:Infragistics.Toolkit.WrapPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges and sizes the
            <see cref="T:System.Windows.Controls.WrapPanel" /> control and its
            child elements.
            </summary>
            <param name="finalSize">
            The area within the parent that the
            <see cref="T:System.Windows.Controls.WrapPanel" /> should use 
            arrange itself and its children.
            </param>
            <returns>
            The actual size used by the
            <see cref="T:System.Windows.Controls.WrapPanel" />.
            </returns>
        </member>
        <member name="M:Infragistics.Toolkit.WrapPanel.ArrangeLine(System.Int32,System.Int32,System.Nullable{System.Double},System.Double,System.Double)">
            <summary>
            Arrange a sequence of elements in a single line.
            </summary>
            <param name="lineStart">
            Index of the first element in the sequence to arrange.
            </param>
            <param name="lineEnd">
            Index of the last element in the sequence to arrange.
            </param>
            <param name="directDelta">
            Optional fixed growth in the primary direction.
            </param>
            <param name="indirectOffset">
            Offset of the line in the indirect direction.
            </param>
            <param name="indirectGrowth">
            Shared indirect growth of the elements on this line.
            </param>
        </member>
        <member name="P:Infragistics.Toolkit.WrapPanel.ItemHeight">
            <summary>
            Gets or sets the height of the layout area for each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            </summary>
            <value>
            The height applied to the layout area of each item that is contained
            within a <see cref="T:System.Windows.Controls.WrapPanel" />.  The
            default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="P:Infragistics.Toolkit.WrapPanel.ItemWidth">
            <summary>
            Gets or sets the width of the layout area for each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            </summary>
            <value>
            The width that applies to the layout area of each item that is
            contained in a <see cref="T:System.Windows.Controls.WrapPanel" />.
            The default value is <see cref="F:System.Double.NaN" />.
            </value>
        </member>
        <member name="P:Infragistics.Toolkit.WrapPanel.Orientation">
            <summary>
            Gets or sets the direction in which child elements are arranged.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Controls.Orientation" />
            values.  The default is
            <see cref="F:System.Windows.Controls.Orientation.Horizontal" />.
            </value>
        </member>
        <member name="T:Infragistics.Controls.IProvideTouchInfo">
            <summary>
            An interface that will be used by the <see cref="T:Infragistics.Controls.TouchHelper"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.IProvideTouchInfo.GetScrollModeFromPoint(System.Windows.Point,System.Windows.UIElement)">
            <summary>
            Method called to determine which scroll dimensions are valid for a specific point.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.TouchState">
            <summary>
            Enum that describes the current touch state.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.TouchState.NotDown">
            <summary>
            No touch operation is pending  
            </summary>
        </member>
        <member name="F:Infragistics.Controls.TouchState.Pending">
            <summary>
            The screen has been touched but the move delta or time threshholds have not yet been reached.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.TouchState.Scrolling">
            <summary>
            The move delta threshhold has been reached and the control is in a scroll operation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.TouchState.Holding">
            <summary>
            The touch and hold time threshhold has been reached and the control is in a hold state.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.TouchScrollMode">
            <summary>
            Enum that detrmines the valid dimensions for a touch scroll operation.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.TouchScrollMode.None">
            <summary>
            Scrolling is not supported in either dimension  
            </summary>
        </member>
        <member name="F:Infragistics.Controls.TouchScrollMode.Horizontal">
            <summary>
            Scrolling is only supported horizontally
            </summary>
        </member>
        <member name="F:Infragistics.Controls.TouchScrollMode.Vertical">
            <summary>
            Scrolling is only supported vertically
            </summary>
        </member>
        <member name="F:Infragistics.Controls.TouchScrollMode.Both">
            <summary>
            Scrolling is supported vertically and horizontally
            </summary>
        </member>
        <member name="T:Infragistics.Controls.FlickEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> object for the <see cref="E:Infragistics.Controls.TouchHelperBase.Flick"/> event.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.FlickEventArgs.#ctor(System.Windows.UIElement,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.FlickEventArgs"/> class.
            </summary>
            <param name="element"></param>
            <param name="xVelocity"></param>
            <param name="yVelocity"></param>
        </member>
        <member name="P:Infragistics.Controls.FlickEventArgs.Element">
            <summary>
            Gets the <see cref="T:System.Windows.UIElement"/> which the touch is going to be acted against.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.FlickEventArgs.XVelocity">
            <summary>
            Gets the horizontal speed which the element will react to from a flick in pixels per second.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.FlickEventArgs.YVelocity">
            <summary>
            Gets the vertical speed which the element will react to from a flick in pixels per second.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.PanEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> object for the <see cref="E:Infragistics.Controls.TouchHelperBase.Pan"/> event.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.PanEventArgs.#ctor(System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.PanEventArgs"/> class.
            </summary>        
        </member>
        <member name="P:Infragistics.Controls.PanEventArgs.DeltaPoint">
            <summary>
            Gets the point from the screen.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.TouchHelper">
            <summary>
            A class that will listen for touch events from touch screens to allow interaction with controls.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.TouchHelperBase.TouchHelperProperty">
            <summary>
            An attached property that Gets/Sets the <see cref="T:Infragistics.Controls.TouchHelper"/> that should be attached to a <see cref="T:System.Windows.UIElement"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.TouchHelperBase.GetTouchHelper(System.Windows.UIElement)">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.TouchHelper"/> attached to a specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.TouchHelperBase.SetTouchHelper(System.Windows.UIElement,Infragistics.Controls.TouchHelper)">
            <summary>
            Sets the <see cref="T:Infragistics.Controls.TouchHelper"/> that should be attached to the specified <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
            <param name="element"></param>
            <param name="helper"></param>
        </member>
        <member name="M:Infragistics.Controls.TouchHelperBase.OnPanComplete">
            <summary>
            Raises the <see cref="E:Infragistics.Controls.TouchHelperBase.PanComplete"/> event.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.TouchHelperBase.PanComplete">
            <summary>
            Event raised when you hold and drag down with the finger.
            </summary>
        </member>
        <member name="T:Infragistics.TrialControl">
            <summary>
            Specialized TextBlock control designed to expand text to fit in the available space.
            </summary>
        </member>
        <member name="M:Infragistics.TrialControl.#ctor">
            <summary>
            TrialControl constructor.
            </summary>
        </member>
        <member name="T:Infragistics.TrialHelper">
            <summary>
            Helper class used to display a trial watermark over elements.
            </summary>
        </member>
        <member name="M:Infragistics.TrialHelper.SetWatermark(System.Windows.FrameworkElement)">
            <summary>
            Sets a watermark to be shown over an element at all times.
            </summary>
            <param name="parent">The element over which to show the watermark.</param>
        </member>
        <member name="T:Infragistics.NullableEnumTypeConverter`1">
            <summary>
            Converts Nullable Enum types from strings to the specified enum.
            </summary>
            <typeparam name="T">The enum that the value should be converted to.</typeparam>
        </member>
        <member name="M:Infragistics.NullableEnumTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this converter can convert an object of the specified Nullable enum.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">The type that you want to convert from.</param>
            <returns>true if sourceType is a <see cref="T:System.String"/> or of the specified type.</returns>
        </member>
        <member name="M:Infragistics.NullableEnumTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a Nullable enum.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The object to covert to the Nullable enum type.</param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.XamVisualTreeHelper">
            <summary>
            Contains static methods that are useful for performing common tasks with nodes in a visual tree.
            </summary>
        </member>
        <member name="M:Infragistics.XamVisualTreeHelper.GetPhoneApplicationPage">
            <summary>
            Gets the first PhoneApplicationPage instance from the current root visual.
            </summary>
            <returns>The first PhoneApplicationPage instance.</returns>
        </member>
        <member name="M:Infragistics.XamVisualTreeHelper.FindVisualDescendant``1(System.Windows.DependencyObject)">
            <summary>
            Gets the first visual descendant of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the visual descendant to lookup.</typeparam>
            <param name="parent">The root where to start the lookup for descendants.</param>
            <returns>The first visual descendant of the specified type.</returns>
        </member>
        <member name="M:Infragistics.XamVisualTreeHelper.FindVisualDescendant``1(System.Windows.DependencyObject,System.Predicate{System.Windows.DependencyObject})">
            <summary>
            Gets the first visual descendant of type <typeparamref name="T"/> that satisfies the given condition.
            </summary>
            <typeparam name="T">The type of the visual descendant to lookup.</typeparam>
            <param name="parent">The root where to start the lookup for descendants.</param>
            <param name="condition">The condition to be satisfied by the descendant.</param>
            <returns>The first visual descendant of the specified type that satisfies the condition.</returns>
        </member>
        <member name="M:Infragistics.XamVisualTreeHelper.FindAllVisualDescendantsByName``1(System.Windows.DependencyObject,System.String)">
            <summary>
            Gets all the visual descendants of type <typeparamref name="T"/> that has the given name.
            </summary>
            <typeparam name="T">The type of the visual descendants to lookup.</typeparam>
            <param name="parent">The root where to start the lookup for descendants.</param>
            <param name="name">The name that the returned visual descendants must have.</param>
            <returns>All the visual descendants of the specified type and given name.</returns>
        </member>
        <member name="M:Infragistics.XamVisualTreeHelper.FindVisualDescendantByName``1(System.Windows.DependencyObject,System.String)">
            <summary>
            Gets the first visual descendants of type <typeparamref name="T"/> that has the given name.
            </summary>
            <typeparam name="T">The type of the visual descendant to lookup.</typeparam>
            <param name="parent">The root where to start the lookup for descendants.</param>
            <param name="name">The name that the returned visual descendant must have.</param>
            <returns>The first visual descendant of the specified type and given name.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:System.Collections.ObjectModel.ObservableCollectionExtensions" -->
        <member name="M:System.Collections.ObjectModel.ObservableCollectionExtensions.AddItems``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.List{``0})">
            <summary>
            Populates the collection with items copied from the specified list.
            As the WP7 framework doesn´t have an ObservableCollection constructor that receives a parameter,
            this extension emulates that constructor.
            </summary>
            <param name="collection">The collection to populate.</param>
            <param name="list">The list from which the items are copied.</param>
        </member>
    </members>
</doc>
